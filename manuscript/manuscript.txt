{#markua-for-authors}
# Markua for Authors #

This is the part of the Markua Specification which is intended for authors. If you are an author who is looking to write a book or course in Markua, this is the part you should read! If you are a programmer who is implementing a Markua Processor, you will want to read both this part and the [Parsing Markua](#parsing-markua) part after it.

A> # Note for Leanpub Authors
A>
A> Markua is in beta on Leanpub, and there are differences between Markua, Markdown and Leapnub Flavoured Markdown. To learn more, see these appendices:
A>
A> * [Leanpub's Markua Implementation Status](#leanpub-markua-implementation-status)
A> * [Differences with Markdown](#differences-with-markdown)
A> * [Differences with Leanpub Flavoured Markdown (LFM)](#differences-with-lfm)

# Philosophy

## The Magical Typewriter

Imagine you owned a magical typewriter.

When you used this magical typewriter, you wrote with fewer distractions. You didn't just write faster, you wrote better.

With your magical typewriter, you never worried about layout. The book formatted itself.

You could hit a key on your magical typewriter to create an ebook from your manuscript with one click.

All ebook formats would be created, and they'd all look good. You'd have PDF for computers, MOBI for Kindle, and EPUB for everywhere else. The book would look great on phones.

With your magical typewriter, you could publish your book before it was even done, and get feedback from readers all over the world. You could automatically share book updates with them. You would press one key on your magical typewriter to publish a new version, and all your readers would have it instantly.

With your magical typewriter, you could easily compare your current manuscript to any other version of your manuscript that had ever existed.

When the book was done, if you decided to make a print book, you could press a key on your magical typewriter to generate InDesign with one click. Your designer or publisher could use this as a starting point for producing a great looking print book.

With your magical typewriter, you'd only have to do one thing: Write.

Wouldn't it be great if such a magical typewriter existed?

It does. At [Leanpub](https://leanpub.com), we're building it.

But there's one requirement for this magical typewriter to exist: a simple, coherent, open source, free, plain text format for a book manuscript.

This simple format is what authors will write their books in, instead of Word. It will enable an ecosystem of tools to emerge around it.

This simple format will be the basis for the magical typewriter.

This simple format is called Markua.

This is its specification.

## Formatting is Procrastination

When you are writing, formatting is procrastination.

Writing is hard enough without needing to worry about formatting.

Markua is a format for use by writers, not book designers. So, Markua provides fairly minimal formatting options.

Almost all formatting provided in Markua is semantic formatting. This is formatting which has meaning in the text, and which could not be changed by a book designer without possibly changing the meaning of the text.

To emphasize how little formatting is in Markua: Markua doesn't have any concept of font sizes or margins! (You can set those in Markua Processors, like Leanpub, but this is done by setting global styles for the entire book, not by modifying the Markua document.)

# Overview

{#novel-syntax}
## How to Write a Novel in Markua

The Markua specification is long. However, the amount you need to learn to get started is very short.

For example, this example shows everything you need to know to write a novel in Markua:

~~~
# Chapter One

This is a paragraph. You just write. Don't manually wrap lines.

Blank lines separate paragraphs. This is *italic* and **bold**.

* * *

That was a scene break. "This is in quotes."

# Chapter Two

This is a paragraph in a new chapter.
~~~

Specifically, these are the rules:

1. To make a blank line, hit Enter twice.
2. Chapter headings, paragraphs and scene breaks have blank lines above and below them.
3. Use `*one asterisk*` for italic and `**two asterisks**` for bold.
4. To make a chapter heading, start a line with a pound sign (`#`), followed by a space and the name of the chapter.
5. To add a scene break, put three asterisks on a line by themselves (`* * *`).
6. Single newlines produce forced line breaks, so don't manually wrap your paragraphs with newlines.
7. All other text and punctuation is typed normally.

That's it!

## Markua Syntax Example

The following is a slightly longer example Markua document which shows much of the common Markua syntax. This is pretty much all you need for most books, even including computer programming books.

~~~
# Chapter One

This is **bold** and *italic*.

Here's an image:

{alt: "Denzel Washington on a jet ski in a river"}
![Washington Crossing the Delaware](delaware.jpg)

## Section One

You can have bulleted and numbered lists, including nested lists:

1. foo
   a) lorem
   b) ipsum
2. bar
   i. stuff
   ii. more stuff
3. baz

### A Sub-Section

You can even have definition lists!

term 1
: definition 1a
: definition 1b

term 2
: definition 2

## Another Section

Tables work too. There are two syntaxes; this is the simple one:

| Header 1  | Header 2  |
| --------- | --------- |
| Content 1 | Content 2 |
| Content 3 | Content 4 |

You can have external code samples:

![Hello World in Ruby](hello.rb)

You can also inline code samples:

{caption: "Hello World in Ruby"}
```ruby
puts "hello"
```

You can also include single lines of code like `puts "hello"` in paragraphs.

> Blockquotes are really easy too.
> --Peter Armstrong, *The Markua Specification*

Finally, you can do that with math `d = v_i t + \frac{1}{2} a t^2`$ too.
~~~

This syntax is explained along with all the other Markua syntax in the next chapter. First, however, is a brief discussion of what Markua is and where it came from.

## What is Markua?

Markua, pronounced "mar-coo-ah", is the best way in the world to write books and courses.

Markua is simple and powerful. When you are writing using Markua, you are writing, not programming. Once you understand Markua's syntax, it fades into the background.

Markua is opinionated. There is only one way to do almost everything.

Markua was initially designed for the writing of books, but it has been extended to support creating courses. For example, Leanpub authors can click a button to create a massive open online course (MOOC), complete with automated marking, entirely from a Markua document.

Markua can also be used for other purposes, such as writing journal articles or other documents. In this specification, however, I will typically just say "books" when describing the output of a Markua document: saying "books, courses and documents" would be annoying to write--and even more annoying to read!

Markua is a plain text format. Markua manuscripts, called Markua documents, can be written however you want. On a computer, you can use any text editor you want. Beginning authors can use things like Notepad or TextEdit; programmers can use editors like Emacs, Vim, Atom or VSCode; writers who like minimalist programs can use "distraction-free" programs like iA Writer or even physical devices like the Freewrite. Leanpub also includes an in-browser text editor, so you can just type Markua inside your web browser. Finally, you can also write Markua in any program which supports plain text or Markdown editing: since Markua syntax is so similar to Markdown syntax, many programs which understand Markdown will already format Markua documents reasonably well.

Markua documents can be automatically transformed into every popular type of ebook format. The computer programs which do this transformation are called Markua Processors. These programs understand both Markua syntax and how to generate the various output formats. An example Markua Processor is Leanpub: Leanpub can output PDF, EPUB, MOBI and HTML from the same Markua document, and can even output print-ready PDFs and InDesign files from them as well.

## Markua: Markdown for Books

Markua is based on [Markdown](http://daringfireball.net/projects/markdown/). Markdown is a plain text format for writing text which can be transformed by Markdown processors into HTML. Markdown was created by John Gruber, with help from Aaron Swartz. Markdown was described by John Gruber as follows:

> Markdown is a text-to-HTML conversion tool for web writers. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML).

The primary reason that Markdown is a great way to write is that it was designed to be this way:

> The overriding design goal for Markdown's formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it's been marked up with tags or formatting instructions. While Markdown's syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown's syntax is the format of plain text email.

Markua is heavily inspired by Markdown. What Markua does is to map most (not all!) Markdown syntax to book concepts, makes some small changes, and then adds some new syntax and concepts of its own. The differences between Markua and Markdown are discussed [in-depth later](#differences-with-markdown). However, there's one extremely important thing to emphasize first:

**The most popular subset of Markdown syntax is used virtually unchanged in Markua.**

If you write Markdown the way most people write Markdown, you are also writing legal Markua.

For example, the Markua syntax described [earlier](#novel-syntax) as necessary to write a novel is inherited verbatim from Markdown. The only difference is in the handling of single newlines: in Markdown, they are ignored; in Markua, they are treated as forced line breaks.

One of the design goals of Markua is for it to be the most straightforward way for a Markdown document to become a book. So, if you already write your blog posts or lecture notes in Markdown, they are probably already valid Markua. You can use any Markua Processor, such as Leanpub, to turn them into an ebook with one click. Then, as you go down the path of enhancing the manuscript and adding things which only make sense in books, this process will feel like adding, not converting. The process of going from a Markdown document into a Markua ebook is mostly a process of decorating--enhancing and reinterpreting the Markdown document appropriately.

In fact, one of the goals is for writers who are familiar with Markdown to feel as though they are still writing in Markdown, but that Markdown somehow grew an understanding of book concepts. Markua is Markdown for books.

## Origins of Markua

At Leanpub, my cofounder Scott Patten and I created a dialect of Markdown called "Leanpub Flavoured Markdown". Leanpub Flavoured Markdown was basically Markdown minus inline HTML plus a number of extensions needed to write books. This Markdown dialect has been used for years by Leanpub authors to create all kinds of books.

Markua is the evolution of how Markdown is used at Leanpub. After years of experience with Leanpub Flavoured Markdown, I set out to specify it properly. I originally thought that this is what Markua would be: just a formalization of Leanpub Flavoured Markdown. But as the specification work evolved, I realized that Markua was a different thing than Leanpub Flavoured Markdown, and that I needed to fix some of the mistakes I had made in Leanpub Flavoured Markdown.

Books have different abstractions than HTML. All abstractions [leak](http://www.joelonsoftware.com/articles/LeakyAbstractions.html), so HTML's abstractions leak into Markdown and the abstractions of books leak into Markua.

So, I started over. I started with Markdown. I then removed or changed the few things which were either not needed for books, or which were overly complex. I then found new, more appropriate abstractions for books--most importantly resources, figures and attribute lists. I then reassembled the pieces around these abstractions into Markua.

## Why the Name "Markua"?

When I set out to specify Markua, I realized I needed a name. I wanted a name that conveyed the warmth and love that I have for Markdown, for writing and for writers, while not implying endorsement by John Gruber in any way. I also did not want a name which referenced Leanpub: Markua is a standalone specification with its own identity, which anyone (including Leanpub competitors) can freely implement. Finally, I was on vacation in Hawaii when I named Markua, and I wanted something that sounded happy, friendly and almost Hawaiian. (Yes, I'm aware that there is no r in Hawaiian.) I also wanted a name that had its .com domain name available, and that was short and spellable, for branding purposes. The Markua name does have all these properties, and I feel it is a really good brand for what I'm trying to accomplish.

{#headings}
# Headings for Parts, Chapters and Sections

Markua is a way of writing books. Books have things like chapters, sections and subsections. Sometimes books have parts.

In Markua, you make the appropriate headings for parts, chapters and sections, and making these headings divides your book or document into these divisions. If you add part headings, your book will have parts; if you don't, it won't. If you add chapter headings, your book will have chapters; if you don't, it won't.

Here's the way that part, chapter and section headings are made in Markua:

~~~
# Part #

This is a paragraph.

# Chapter

This is a paragraph.

## Section

This is a paragraph.

### Sub-Section

This is a paragraph.

#### Sub-Sub-Section

This is a paragraph.

##### Sub-Sub-Sub-Section

This is a paragraph.

###### Sub-Sub-Sub-Sub-Section

This is a paragraph.
~~~

Markua is very strict about its heading syntax. Specifically, to create a Markua heading, you put the following either on a line by itself or inside an [aside](#asides) or [blurb](#blurbs):

* between one and six pound signs (`#`)
* followed by exactly one space (not a tab)
* followed by text (which can include spaces and tabs, but cannot include newlines)
* followed by the combination of exactly one space and one pound sign for parts, and by nothing for chapters and sections

A Markua heading needs a blank line above and below it. However, due to the rules for [blank lines and file concatenating](#concatenating), you can omit the blank line before a heading which is the first line of a file and omit the blank line after a heading which is the last line of a file.

It is an error for a heading to be empty (only containing whitespace) or to be placed inside a list item.

If the heading is not formatted correctly, the heading is just interpreted as paragraph text, and any formatting characters are output verbatim. Examples of incorrect heading formatting which would cause this include using a tab after the leading `#`, skipping the space after the leading `#` in a chapter (this would be a paragraph starting with a #hashtag), adding more than one trailing `#` character (this is not permitted in any heading), adding a trailing `#` character for section or lower level headings (adding a trailing `#` after a chapter heading makes it into a legal part heading), etc.

{#paragraphs}
# Paragraphs and Blank Lines

The distinguishing thing about a paragraph is that there is nothing else distinguishing about it: unlike headings, lists and other Markua elements, a paragraph requires no special formatting. You just write.

However, paragraphs are separated from headings and from other paragraphs by a blank line. Again, to create a blank line, you hit the Enter key twice.

Here's an example of this in Markua syntax. These are three paragraphs in Markua, each separated by the canonical two newlines which produce one blank line:

~~~
I'm paragraph one. Yay!

This is paragraph two. It's just that easy.

This is paragraph three.
~~~

There are other more technical rules about spaces, newlines and indentation, which are discussed [later](#whitespace).

{#text-formatting}
# Text Formatting

Markua's goal is to provide all the semantic formatting required by authors. Formatting that could be done by a book designer without needing to discuss it with the author is considered orthogonal to Markua, and is largely omitted from Markua.

Markua is a plain text format designed for the writing of books. Books have various types of text formatting in them: bold, italic, underline, strikethrough, superscript and subscript.

The formatting in Markua is mostly basic, semantic text formatting. Here's how to produce it:

Italic
: To produce *italic text*, surround it with `*one asterisk*`.

Underlined
: To produce _underlined text_, surround it with `_one underscore_` and set the `italicize-underlines` global setting to `false`. (The default value of the `italicize-underlines` global setting is `true`, so that Markua behaves like Markdown by default and italicizes all underlines. See [below](#italicize-underlines) for more information.)

Bold
: To produce **bold text**, surround it with __either__ `**two asterisks**` or `__two underscores__`.

Bold + Italic
: To produce ***bold + italic text***, surround it with `***three asterisks***`.

Bold + Underlined
: To produce ___bold + underlined text___, surround it with `___three underscores___`. (Note that the `italicize-underlines` global setting will make this bold + italic if `true`.)

Bold + Italic + Underlined
: To produce ____bold + italic + underlined text____, surround it with `____four underscores____`. (Note that the `italicize-underlines` global setting will make this just bold + italic if `true`.)

Strikethrough
: To produce ~~strikethrough text~~, surround it with `~~two tildes~~`. This is the same syntax as is used by both [GitHub Flavored Markdown](https://help.github.com/articles/github-flavored-markdown/) and by John Macfarlane's excellent [pandoc](http://johnmacfarlane.net/pandoc/README.html).

Superscript
: To produce superscript like the 3 in 5^3^ = 125, surround it with carets like `5^3^ = 125`. (This is the same syntax as is used by pandoc.)

Subscript
: To produce subscript like the 2 in H~2~O, surround it with single tildes like `H~2~O`.

## Text Formatting Can Contain Single Newlines

You can even include single newlines (which produce forced line breaks in Markua) in the formatting:

~~~
This *is italic
and so is this*.
~~~

## Text Formatting Cannot Contain Blank Lines

It is an error for text formatting to span paragraph boundaries.

~~~
This *is not italic.

Neither is this.*
~~~

The reason for this is that a Markua Processor parses blocks (like paragraphs and headings) and then the content of those blocks. So, if you wanted to achieve the effect shown above, you would simply type this:

~~~
This *is italic*.

*So is this.*
~~~

As discussed [later](#handling-errors-and-warnings), this type of formatting error causes the Markua formatting characters to be output as plain paragraph text.

{#nesting-formatting}
## Nesting Formatting

It is possible to nest formatting. Here's a simple example:

~~~
*You can **bold** a word in an italic sentence.*
~~~

Here's a more complex example which contains forced line breaks:

~~~
This is *italic
and **bold** and
still italic*. Now it's neither.
~~~

## Combining Delimiters

Besides just nesting formatting with separate delimiters, you can also combine delimiters.

By "combine delimiters" I mean to smush the formatting delimiters right up against each other. It is almost never desirable to do this, however, as it results in ugly Markua documents. But banning these combinations would be equally arbitrary, and more surprising.

So, if the `italicize-underlines` global setting is `false`, the following combinations work:

* ____*italic + underlined*____: `*_this_*` or `_*this*_`
* ***bold + italic***: `__*this*__` or `*__this__*`
* ____**bold + underlined**____: `**_this_**` or `_**this**_`
* ____***bold + italic + underlined***____: `_***this***_`, `*___this___*`, `***_this_***` or `___*this*___`

If, however, the `italicize-underlines` global setting is `true`, the following all produce ***bold + italic***, since the underlines get converted to italics, and redundant underlines are ignored:

`__*this*__`, `*__this__*`, `_***this***_`, `*___this___*`, `***_this_***` or `___*this*___`

If you incorrectly nest the asterisk and underscore formatting characters, then they are output verbatim as asterisks and underscores, instead of producing formatting. So, the following examples of incorrect nesting all output the asterisks and underscores verbatim:

`*__this*__`, `__*this__*`, `**_this**_`, `_**this_**`, `_***this_***`, `*___this*___`, `***_this***_` or `___*this___*`

## Redundant Delimiters are Errors

Note that redundant delimiters are errors:

* `_*_error_*_`, `_*_error_*_`, `**__error__**`, `__**error**__`, etc.

Finally, note that more than three consecutive asterisks (`***`) or more than four consecutive underscores (`____`) is an error, which (like all errors of this type) causes the Markua formatting characters to be output as plain paragraph text. So, the following are all errors:

* `****error****`, `*****error*****`, `****_error_****`, `_****error****_`, etc.
* `_____error_____`, `______error______`, `_____*error*_____`, `*_____error_____*`, etc.

{#italicize-underlines}
## The `italicize-underlines` Setting

Markua documents have a number of global settings, which are set once, either at the beginning of the document in a [settings hash](#settings) or via some web UI (like on Leanpub).

One of the settings which affects basic text formatting is `italicize-underlines`, which can be `true` or `false`.

In Markdown, `*one asterisk*` and `_one underscore_` both produce *italics*, and there is no way to produce an underline in Markdown except using inline HTML. However, _underline_ is not always just a typewriter version of *italics*. In some languages and in some contexts, underlining serves a distinct, legitimate purpose.

In Markua, `*one asterisk*` produces *italics*, and `_one underscore_` can produce either *italics* or an _underline_ based on the `italicize-underlines` global setting.

**The default value of the `italicize-underlines` setting is `true`, so that by default Markua functions like Markdown and forces all underlines to be italic**.

This will be a bit surprising for new authors who are discovering Markua and have never heard of Markdown, such as people writing novels in Markua. (Frankly, most novels just need italic, not underline, so this isn't a big issue.)

However, it is my expectation that for the foreseeable future, the proportion of authors who discover Markdown first and then learn about Markua will be far, far greater. For these people, it would be a lot more surprising if all their text which they had italicized like `_this_` suddenly became underlined instead!

Furthermore, if you've written in a certain way (like `_this_` for italic) for years, your fingers essentially just do the right thing. I want this to still feel right for these people, not something that makes them think they need to go change a global setting. Essentially no one has spent years writing in Markua, so this is much less of an issue for them!

To be clear...

If the `italicize-underlines` setting is `true` (the default), then underlined text **CANNOT** be produced by the Markua Processor:

* `_one underscore_` produces *italicized text* (just like one asterisk)
* `___three underscores___` produces ***bold + italicized text*** (just like three asterisks)
* `____four underscores____` also produces ***bold + italicized text*** (again, just like three asterisks)

If the `italicize-underlines` setting is `false`, then underlined text **can** be produced by the Markua Processor:

* `_one underscore_` produces _underlined text_
* `___three underscores___` produces ___bold + underlined text___
* `____four underscores____` produces ____bold + italic + underlined____ text

{#resources}
# Resources

Markua documents are written in plain text, either in one text file or multiple text files. However, modern books and courses sometimes contain more than text. Books and courses may embed many types of *resources*.

Resources include things like images, but also include tables, code samples, math, poetry, and even audio and video. (Obviously you can't output audio and video in a book. But a Markua Processor can do smart things, including placeholder images and providing URLs. For an ebook or course, these can be links, or can trigger launching audio or video apps, etc. There is a lot of flexibility for a Markua Processor to do a lot of fancy things with resources, but the important point is that this is extremely simple for the Markua author to use: they just refer to a resource.)

Each type of resource has a number of supported formats. Markua's goal is to make inserting all types of resources simple and consistent, while staying as close to Markdown's syntax as possible.

Resources vary in four different ways:

1. **Insertion Methods**: Span and Figure
2. **Locations**: Local, Web and Inline
3. **Types**: `audio`, `code`, `image`, `math`, `poetry`, `table` and `video`
4. **Formats**: `png`, `m4a`, `mp3`, `ruby`, `latex`, etc.

Before going into more detail, it's helpful to consider a brief example of Markua text which shows a number of resources being inserted. These resources have different insertion methods (span and figure), different locations (local, web and inline), different types (image, code) and different formats (png, jpg, ruby)--yet the syntax to insert them is compact and consistent:

~~~
Inserting an image as a figure is...

![A Piece of Cake](http://markua.com/cake.jpg)

Inline code resources are added as spans like this `hello world` or as figures.

```ruby
puts "hello world"
```

{format: ruby}
![Hello, World](hello.rb)
~~~

The last figure in the example above showed an **attribute list**, which is a list of key-value pairs in curly braces. Any figure can have an attribute list, regardless of resource location, type or format. Attribute lists are explained [later](#attributes).

If you're familiar with Markdown syntax, you'll note that the syntax for local and web resources is similar to Markdown's inline image insertion syntax, and that the syntax for inline resources is similar to the fenced code blocks syntax from popular Markdown extensions and dialects including GitHub Flavoured Markdown.

Tables are also resources, and can also be local, web or inline. However, the table syntax is more elaborate than the syntax for the other resource types, so we discuss tables [later](#tables).

Finally, if any resource is missing during book generation, a Markua processor can either fail to generate the book or can insert something like the "missing image" often seen on web pages into the book. People building Markua Processors have a lot of freedom here.

## Resource Insertion Methods

Resources can be inserted either as figures or as spans.

### Figures

All resources can be inserted as figures. Figures are the normal case for how a resource is inserted. In many Markua documents, they will be most or all of the resources.

To insert a resource as a figure, there must be at least one newline before and after it.

A figure can either be top-level (with a blank line before and after it), or it can be contained in a paragraph. The ways that figures and other block elements can be inserted in paragraphs is discussed [later](#inserting-into-paras).

The syntax for a local or web resource inserted as a figure is as follows:

~~~
{key: value, comma: separated, optional: attribute_list}
![Optional Figure Caption](resource_path_or_url)
~~~

The syntax for an inline resource inserted as a figure is as follows:

~~~
{key: value, comma: separated, optional: attribute_list}
```optional_format
inline resource content (default format is `guess`)
```
~~~

Note that you can also insert an inline resource as a figure using tildes as the delimiter. If the only delimiter was backticks, it would be really difficult to write about Markua in Markua. This syntax is as follows:

```
{key: value, comma: separated, optional: attribute_list}
~~~optional_format
inline resource content (default format is `text`)
~~~
```

Note that **exactly** three backticks or three tildes must be used to insert an inline resource as a figure. If more backticks or tildes are used, these will be interpreted as normal text.

#### Figure Attributes

A figure can also have attributes. The supported attributes vary based on the type of resource, but **all** resources inserted as figures support the `caption`, `class`, `format`, `title` and `type` attributes. (As such, these five attributes are not shown on the specific resource types below.)

`caption`
: This is text which is shown near the figure, typically above or below it. A Markua Processor can choose where to position captions based on any criteria it chooses. For example, a Markua Processor can position all captions above or below figures, or use a different behaviour based on the resource format (e.g. table captions above, image captions below). Note that the figure caption itself may contain the Markua text formatting specified earlier in the [Text Formatting](#text-formatting) chapter. If no `caption` is provided but a `title` is provided, then the `title` should be used as the caption: it does not make sense to refer to a figure with a title, but for the figure itself to have no caption.

`class`
: All attribute lists support a `class` attribute. When used in figures, this is the class of the figure. This can be used for styling, and it can also be used by Markua Processors which group figures by classes, such as theorems or lemmas.

`format`
: This is the resource format. Different resource types have different legal values for format.

`title`
: This is text which is displayed for the figure wherever the figure is listed (e.g. List of Illustrations, Table of Tables, etc.). If no `title` is provided, the `caption` should be used in those places.

`type`
: This is the resource type. This is usually inferred from the format instead of being specified.

Figures can have both alt text and a figure caption. These are distinct things. We will discuss the figure caption first and the alt text second.

#### Figure Captions

A resource which is inserted as a figure can have a figure caption.

This caption shows up in two places in the output:

1. Near the resource, typically above or below it, per the preference of the Markua Processor.
2. Based on the resource type, either in the List of Illustrations, List of Tables or Table of Figures, if they are generated for the book. This text should also be a crosslink to the caption inserted near the figure itself.

The caption for a figure can provided in one of two ways:

1. In the square brackets in front of a local or web resource.
2. In the attribute list above the resource.

~~~
![My Amazing Algorithm](algorithm.rb)

{caption: "My Amazing Algorithm"}
![](algorithm.rb)
~~~

The first choice is clearly shorter, as well as more pleasant to write and to read.

Since inline resources do not use the square bracket syntax, any captions must be added in the attribute list:

~~~
Here's a paragraph before the figure.

{caption: "My Amazing Algorithm"}
```ruby
puts "hello world"
```

Here's a paragraph after the figure.
~~~

#### Figure Alt Text

A figure can have alt text, as long as the type of resource being inserted supports alt text. The alt text is always defined in an attribute list above the figure. Since the alt text is defined in the attribute list, the resource location does not matter: local, web and inline resources all support alt text.

The four types of resource which can have alt text when inserted as a figure are `image`, `video`, `audio` and `math`. Resources of type `code` and `table` do not support alt text, since they themselves are just text. If any alt text is provided for a code or table resource it is ignored.

Alt text is text which is intended to take the place of the resource if the resource itself cannot be seen. In the case of images, the obvious use case is for readers with visual disabilities who are using a screen reader, but it also includes audiobooks and ebook readers which often do not support embedded images, audio and video.

Here's an example of good alt text:

~~~
{alt: "a red apple, possibly a McIntosh or Spartan"}
![](fruit.jpg)
~~~

The alt text should **not** have the same content as the figure caption, if the figure caption is present. (Imagine the annoyance for someone with a visual disability having their screen reader read identical alt text and figure captions to them throughout an entire book!) Instead, the alt text should be descriptive of the image content, while the figure caption can be more creative. For example, a figure caption may be "Washington Crossing the Delaware" and the alt text could be "Denzel Washington riding a jet ski in a river". Having good alt text would enable readers who cannot see the image to still get the joke which the figure caption makes.

#### Figure Captions and Alt Text Together

These are some examples of figures with both alt text and a figure caption:

~~~
{alt: "Denzel Washington on a jet ski in a river"}
![Washington Crossing the Delaware](delaware.jpg)

{alt: "Denzel Washington on a jet ski in a river", caption: "Washington Crossing the Delaware"}
![](delaware.jpg)

{caption: "Earth From Space (Simplified)", alt: "a blue circle"}
```svg
<svg width="20" height="20">
  <circle cx="10" cy="10" r="9" fill="blue"/>
</svg>
```
~~~

#### The Figure Attribute List Takes Precedence

It is always an error to specify an attribute both in the attribute list for a figure and in the syntactic sugar locations, either after the backticks or in the square brackets.

However, if this is done, then the value in the attribute list takes precedence.

In the following figure, the format is `text` not `ruby`:

~~~
{format: text}
```ruby
puts "hello world"
```
~~~

In the following figure, the caption would be "Foo" not "bar":

~~~
{caption: Foo}
![bar](foo.png)
~~~

Again, both of these are not good Markua: attribute values should be specified only once.

### Spans

There are three types of resources which can be inserted as spans:

1. Single-line inline code resources.
2. A `math` resource (regardless of location) without a caption.
3. An `image` resource without figure attributes, such as captions.

An inline code resource can be inserted as a span using the following syntax:

~~~
backtick `resource` backtick
~~~

An inline math resource of `latex` format can be inserted as a span using the following syntax:

~~~
backtick `resource`$ backtick + dollar sign
~~~

An inline math resource of `asciimath` format can be inserted as a span using the following syntax:

~~~
backtick `resource`@ backtick + at sign
~~~

The [code](#code) and [math](#math) resources are described more fully later.

#### Span Attribute Lists Can Be Used To Set The Format

When a resource is inserted as a span, the resource is inserted as part of the flow of text of a paragraph with no newlines before or after it. A span resource is intended to be extremely short and simple.

By default, the format of an inline resource is `text` for code. For math, you specify `latex` with a `$` (or with `{format: latexmath}`) and `asciimath` with an `@` (or with `{format: asciimath}`) after the closing backtick. For an image, it is determined by the file extension.

However, to support rare use cases, any span can have an attribute list. The attribute list on a span is specified immediately after the closing backtick. Span attribute lists can be used to set the format explicitly.

For example, this resource would be formatted as Ruby code:
~~~
Yada yada `puts "hi"`{format: ruby} yada yada.
~~~

This resource would be treated as LaTeX math:

~~~
Yada yada `some LaTeX math here`{format: latexmath} yada yada.
~~~

This is identical to using a `$`:

~~~
Yada yada `some LaTeX math here`$ yada yada.
~~~

This resource would be treated as AsciiMath:

~~~
Yada yada `some AsciiMath math here`{format: asciimath} yada yada.
~~~

This is identical to using an `@`:

~~~
Yada yada `some AsciiMath math here`@ yada yada.
~~~

This resource would be treated as MathML math:

~~~
Yada yada `some MathML math here`{format: mathml} yada yada.
~~~

Yes, you can actually insert a math resource of `mathml` format as a span (assuming you remove all newlines from your MathML), but it's so verbose that it's typically bad idea. You're much better off using AsciiMath or LaTeX math for spans.

Finally, if you wish to insert an image in the middle of a sentence, chances are you are trying to insert an emoji. You can do this with a span image, if you want exact control of what your emoji look like. However, note that emoji also have special support in Markua, described [here](#emoji).

#### Inserting Resources Into a Span Context

In Markua, resources can be inserted into a span context (within a paragraph or other block element) or into a block context (with blank lines above and below it).

Now, it doesn't make sense for many types of resources to be inserted into, say, the middle of a sentence. However, it does make sense for single-line math examples, for single-line code snippets, and for emoji.

So, the rules for inserting resources into a span context are as follows:

1. Any resource can be inserted into a span context, such as the middle of a paragraph.
2. Any resource with a caption which is inserted into a span context is treated as though there is a single newline before and after it, causing it to be inserted as a figure within the span context.
3. The following resource types, when they do not have a caption, can be inserted into a span context without causing single newlines to implicitly precede and follow them:
   a) a `image` without a caption, regardless of location or format
   b) a `math` resource, regardless of location or format
   c) a single-line inline `code` resource
4. All other resources cause single newlines to implicitly precede and follow them when being inserted into a span context.

In terms of inserting resources into a block context: all resource types and formats can be inserted into a block context, with and without captions.

If a resource is inserted in a span context, and it can fit in the span context, it is inserted as a span, with whitespace before and after it. Examples of resources which can fit in a span context are images without captions, video without captions (since an image is used as a placeholder), single-line code samples and single lines of poetry.  Now, there are certain types of resources which, when inserted into a span context, cause the addition of single newlines before and after the resource. These include any resource with a caption, any type of table, a multi-line code sample, any math example, and multi-line poetry.

If a local or web resource is inserted with no newlines before or after it, but there is a caption, the resource is treated as though there are single newlines before and after it. So the following two paragraphs are equivalent:

~~~
Here's some text ![Foo](bar.png) and more text.

Here's some text
![Foo](bar.png)
and more text.
~~~

In both cases, the `bar.png` image is inserted as a figure, and the text in the square brackets is the figure caption, not the alt text. The text in square brackets before a local or web resource is always the figure caption. Also, in both cases, the text which follows the figure is part of the same paragraph as the text which precedes the figure, unless there is a blank line after it to start a new paragraph. This is discussed further [here](#inserting-into-paras). Even though both images above are inserted as figures, in the first case there is no way to specify alt text. This is why the implicit newline approach is inferior to using explicit newlines, since with explicit newlines an attribute list can be defined on the figure like this:

~~~
Here's some text
{alt: "a shoal"}
![Foo](bar.png)
and more text.
~~~

Finally, note that this is all true for all local or web resources, regardless of resource type. The following two paragraphs which contain a web code resource are also equivalent:

~~~
Hello in Ruby is a simple ![Hello World in Ruby](http://markua.com/hello.rb) statement.

Hello in Ruby is a simple
![Hello World in Ruby](http://markua.com/hello.rb)
statement.
~~~

For the purpose of brevity, this point will not be explained in each section about different resource formats.

### Resource Locations

A resource is either considered a local, web or inline resource based on its location:

Local Resource
: The resource is stored along with the manuscript--either in a `resources` directory on a local filesystem, or uploaded to the same web service where the Markua document is being written.

Web Resource
: The resource is referred to via an `http` or `https` URL.

Inline Resource
: The resource is defined right in the body of a Markua document.

#### Local Resources

If local resources are used, all local resources must be stored inside a `resources` directory, or one of its subdirectories. The `resources` directory is not part of the path to the resource.

Here's how the paths to local resources work:

1. An image called `foo.jpg` in the `resources` directory should be referred to as `![](foo.jpg)`, but can also be referred to as `![](resources/foo.jpg)`. Note that leading slashes are not allowed: `![](/foo.jpg)` and `![](/resources/foo.jpg)` are both illegal.
2. An image called `bar.png` in a subdirectory `images` of the `resources` directory should be referred to as `![](images/bar.png)`, but can also be referred to as `![](resources/images/foo.jpg)`. Note that leading slashes are not allowed: `![](images/bar.png)` and `![](resources/images/foo.jpg)` are both illegal.

Typically, there is only one way to do anything in Markua. The reason that there are two ways in this case is that there are, and always will be, more Markdown-aware tools in the world than Markua-aware tools. So, supporting relative paths is a must, and a relative path does include the `resources/` part of that path.

Nested directory trees work as well. A file called `foo.rb` in a `ch1/examples/ruby` directory tree inside the `resources` directory is referenced as `![](ch1/examples/ruby/foo.rb)` or as `![](resources/ch1/examples/ruby/foo.rb)`.

Note that you cannot navigate upward in paths with `../`. This would be a security hole, so it must be forbidden by a Markua Processor.

Markua does not specify whether there are any subdirectories of the `resources` directory, or what their names are. Since any subdirectories have their names as part of the path to the resource, authors can do whatever they want. For example, you can create subdirectories of the `resources` directory for different types of resource, such as `images`, `audio`, `video`, `code`, `math` and `tables`, but you can also just put them all in the `resources` directory together. Also, to be clear: the names of the directories have no meaning, and do not restrict the formats of what can go inside them.

The local resources approach can also be used by hosted services. Internally, services can store resources wherever they want, but if they provide a download (say as a zip file) they should create the resources directory and provide the uploaded resources in that directory. If a nested structure is used, it should be exported that way--if a web service produces paths which reference images inside an images directory (e.g. as `images/foo.png`), then the zip file containing an export should contain a `resources` directory which contains an `images` subdirectory with the images.

#### Web Resources

If web resources are supported, both `http:` and `https:` resources should be supported.

Web resources are identified by the absolute URL of the resource on the internet.

#### Inline Resources

Inline resources can be of type `code`, `math` (regardless of format), `table`, or an `image` resources of `svg` format. Since an SVG image is just XML text, it can be contained inline in the text of a Markua document. This is not something that is true for binary resources like PNG or JPEG images or any type of audio or video file--these can only be local or web resources.

{#resource-types-and-formats}
## Resource Types and Formats

There are seven types of resources: `audio`, `code`, `image`, `math`, `poetry`, `table` and `video`. Each type of resource has a number of supported formats. Any of the seven resource types can be inserted as a local resource or web resource, and many of the resource types can also be inserted as an inline resource.

Both the type and the format can be specified in an attribute list, by the respective `type` and `format` attributes.

The type and the format can also be inferred from the file extension and, in the case of web resources, the URL.

The following table shows the mapping of local file extensions to the default `format` and `type` inferred. Note that these are just defaults: a resource can be set to be any type and format using the attribute list, and this overrides what is inferred from the file extension.

{caption: "Formats Mapped to Local Resource Types", id: "resource-types-and-formats"}
| Extension    | `format`     | `type`   | Description         |
| :----------- | :----------: | :------: | ------------------- |
| `.aac`       | `aac`        | `audio`  | AAC audio           |
| `.m4a`       | `aac`        | `audio`  | AAC audio           |
| `.mp3`       | `mp3`        | `audio`  | MP3 audio           |
| `.oga`       | `ogg`        | `audio`  | Ogg Vorbis          |
| `.ogg`       | `ogg`        | `audio`  | Ogg Vorbis          |
| `.wav`       | `wav`        | `audio`  | WAV audio           |
| `.wave`      | `wav`        | `audio`  | WAV audio           |
| `.txt`       | `text`       | `code`   | Unformatted code    |
| (other)      | `guess`      | `code`   | Formatted code      |
| `.gif`       | `gif`        | `image`  | GIF image           |
| `.jpeg`      | `jpeg`       | `image`  | JPEG image          |
| `.jpg`       | `jpeg`       | `image`  | JPEG image          |
| `.png`       | `png`        | `image`  | PNG image           |
| `.svg`       | `svg`        | `image`  | SVG image           |
| `.svgz`      | `svgz`       | `image`  | Zipped SVG          |
| `.asciimath` | `asciimath`  | `math`   | AsciiMath math      |
| `.mathml`    | `mathml`     | `math`   | MathML math         |
| `.latexmath` | `latexmath`  | `math`   | LaTeX math          |
| `.tex`       | `latex`      | `code`   | LaTeX text          |
| `.poetry`    | `poetry`     | `poetry` | Poetry              |
| `.tbl`       | `table`      | `table`  | Markua table        |
| `.mp4`       | `mp4`        | `video`  | MP4 video           |
| `.webm`      | `webm`       | `video`  | WebM video          |

Note that these file extensions are case-insensitive. Also, note that .mp4 is used for MP4 video, not MP4 AAC audio.

Also, as discussed in the [code](#code) section, Markua Processors must interpret all unspecified file extensions as specifying a resource of type `code` with a format of `guess`, unless the resource is a web resource. If the type and format are not specified and the resource is a web resource, the Markua Processor may use the domain to decide what type of resource to assume. For example, a domain of `youtube.com` may be assumed to be of type `video`, a domain of `instagram.com` may be assumed to be of type `image`, and a domain of github.com may be assumed to be of type `code`.

If the type is not specified in the attribute list, the format determines the type. The formats can either be specified by the `format` attribute or (in most cases) inferred from the file extension for local and web resources. (Inline resources obviously have no file extension, since they are contained in the body of a Markua document.)

As an author, all you typically do is provide the correct file extension for a local resource or set the format in the attribute list. Markua recognizes the format, and uses it to determine the type. If the format is unrecognized, then the resource is treated as a resource of type `code` and with a format of `guess`.

It's important to emphasize that the type and format of a resource can be overridden using an attribute list. In rare instances, it is useful to override the `type` and `format` which have been inferred by the Markua Processor based on the file extension of the resource. This is done by specifying a type and/or format in the attribute list of the resource.

Three examples of when this could be desired are:

1. When writing about, say, the SVG file format, you may want to treat a `.svg` file as a resource of type `code` instead of type `image`. This way, the SVG image (which is just XML text) would be shown as code, instead of interpreted as an image. This would be accomplished by the attribute list `{type: code, format: text}`.
2. When writing about a programming language which is not identified correctly by a Markua Processor, you may want to force the format of the language.
3. When writing about LaTeX math, you may want to force the type to be `code` not `math`.

In the chapters ahead, we will consider each of the types of resources in more detail, as well as the various formats that they support. We will also discuss the supported attributes for each resource type. Resources have different default attributes based on their type, format and insertion method.

{#images}
## Images

The syntax to insert an image is the same compact and consistent syntax that is used for any resource. Local and web resource locations are supported for any type of image; inline resource locations are supported for SVG images only.

Per the [table](#resource-types-and-formats) of resource types and formats, the following types of images are supported in Markua: GIF, PNG, JPEG, SVG and zipped SVG.

Images are always inserted as figures.

We will discuss the supported and the default attributes for images, and then show examples of images being inserted for local, web and inline images.

Note that regardless of the image location, a Markua Processor can embed the image in the output format. For example, a web image does not need to be loaded from the web every time; it can be inlined in the output by the Markua Processor. A Markua Processor can also process images such that all images are placed on the web with URLs, and the images are loaded by the reader from the web.

Images have some of the only non-semantic formatting in Markua. Images can have `width`, `height`, and `align` or `float` attributes, or can be `fullbleed`. These settings, which also apply to the posters for videos, are so universal when applied to images that it would be too purist for Markua to insist that the only way to format images was to add a `class` element, and then style the `class` of the image elsewhere. Markua is semantic, but it's also pragmatic: by providing a few basic ways to format images, it enables authors to make in-progress books look good enough to publish in-progress.

### Supported Attributes for Images

The following are the supported attributes for image resources, in addition to the `type`, `format`, `caption` and `class` attributes which all resources support:

`align`
: The `align` can be `left`, `right` or `middle`. The default is `middle`. Combined with `width` and `height`, this provides basic image formatting. When `align` is specified, text goes above and below the image, but the image and its surrounding whitespace occupies the entire width of the page. In terms of the specific values of `align`, a Markua Processor must interpret `left` as "on the left side of the page", `right` as "on the right side of the page" and `middle` as "in the middle of the content area of the page, respecting margins" in all cases. Finally, note that `inside` and `outside` are not supported for `align`. If you are using those attributes, chances are you should be floating the text around the image by using the `float` attribute, not the `align` attribute.

`alt`
: The `alt` is the alt text, to be displayed when the image cannot be shown. This is provided in the figure attribute list.

`cite`
: An image can have a citation. A Markua Processor is free to combine this citation with the caption attribute or display it separately.

`float`
: The `float` can be `left`, `right`, `inside` or `outside`. The `left` and `right` attribute values mean the same thing as they do with `align`. When `float` is specified, text flows around the image. It is an error to specify both `align` and `float`. Note that `middle` is not supported for `float`, since Markua is not a good choice for the types of advanced layouts which flow text on both sides of an image. For that, you should use something like InDesign; this is why Markua Processors such as Leanpub can export InDesign files. Also, note that `float` supports `inside` or `outside`, but `align` does not. What a Markua Processor does with `inside` and `outside` is more complex. A Markua Processor must interpret `inside` as "near the spine" and `outside` as "away from the spine" in a print book. In an ebook, however, a Markua Processor has some flexibility in terms of the meaning of `inside` and `outside`: it can either interpret `inside` as "left" or it can interpret `inside` as "left if the language is left-to-right, and right if the language is right-to-left". Similarly, a Markua Processor can either interpret `outside` as "right" or it can interpret `outside` as "right if the language is left-to-right, and left if the language is right-to-left". If that makes your head hurt, just use `left` and `right` instead.

`fullbleed`
: `true` or `false`. The default is `false`. If `true`, the Markua Processor should ensure that the image is the full size of the page, with no margins on the page. If `false`, the `width`, `height` and `align` attributes are used instead and margins are respected.

`height`
: The height of the image, in percentage of page content area height (respecting margins). This is specified as a number (integer or float) between 1 and 100 followed by a percentage sign (%). The quotes are optional. So, you can say `{height: "70%"}`, `{height: 70%}`, `{height: "70.5%"}` or `{height: 70.5%}`.

`url`
: An image can have a URL, which is the URL of the `cite` attribute if present, and the URL that the image itself links to, if the `cite` attribute is not present. A Markua Processor is free to combine this URL with the `cite` and `caption` attributes however it wishes, e.g. by linking the `cite` attribute text to the `url` or showing the `url` in parentheses or in a footnote. The use of the `url` attribute is discussed further below.

`width`
: The width of the image, in percentage of page content area width (respecting margins). This is specified as an number (integer or float) between 1 and 100 followed by a percentage sign (%). The quotes are optional. So, you can say `{width: "70%"}`, `{width: 70%}`, `{width: "70.5%"}` or `{width: 70.5%}`.

Note that if only one of `width` and `height` are specified, the Markua Processor should scale the image proportionally if possible (again, respecting margins). If both `width` and `height` are specified, the Markua Processor should scale the image accordingly, ignoring the aspect ratio. (So, it's almost always a bad idea to specify both `width` and `height`.)

### Local Images

The following are some examples of local images:

~~~
Here's a paragraph before the first figure.

![A Piece of Cake](cake.jpg)

Here's a paragraph between the first and second figures.

{alt: "a slice of chocolate cake", fullbleed: true}
![A Piece of Cake](images/cake.jpg)

Here's a paragraph between the second and third figures.

{alt: "a slice of apple pie with ice cream on top", class: "food-closeup"}
![A Piece of Pie](pie.jpg)

Here's a paragraph after the third figure.
~~~

In the above example, the first and third images were directly in the `resources` directory, whereas the second image was in an `images` subdirectory of the `resources` directory.

### Web Images

The following are some examples of web images:

~~~
Here's a paragraph before the first figure.

![A Piece of Cake](http://markua.com/cake.jpg)

Here's a paragraph between the first and second figures.

{alt: "a slice of chocolate cake", fullbleed: true}
![A Piece of Cake](http://markua.com/cake.jpg)

Here's a paragraph between the second and third figures.

{alt: "a slice of apple pie with ice cream on top", class: "food-closeup"}
![A Piece of Pie](http://markua.com/pie.jpg)

Here's a paragraph after the third figure.
~~~

### Inline Images (SVG only)

SVG images are just XML text, so they can be inserted inline in Markua:

~~~
Here's a paragraph before the figure.

{caption: "Earth From Space (Simplified)", alt: "a blue circle"}
```svg
<svg width="20" height="20">
  <circle cx="10" cy="10" r="9" fill="blue"/>
</svg>
```

Here's a paragraph after the figure.
~~~

#### Writing about SVG

If you want to write about the SVG format, and show the actual SVG source (instead of the image produced), it needs to be of a `format` of `code`, not `image`.

Now, you can just be lazy and not provide `format` or `type` attributes at all, since guessing when neither is present always produces a type of `code`.

```
<svg width="20" height="20">
  <circle cx="10" cy="10" r="9" fill="blue"/>
</svg>
```

However, you can also just specify both, either this way...

{type: code}
```svg
<svg width="20" height="20">
  <circle cx="10" cy="10" r="9" fill="blue"/>
</svg>
```

...or this way:

{type: code, format: svg}
```
<svg width="20" height="20">
  <circle cx="10" cy="10" r="9" fill="blue"/>
</svg>
```

Or you can just specify xml, since SVG is xml:

```xml
<svg width="20" height="20">
  <circle cx="10" cy="10" r="9" fill="blue"/>
</svg>
```

Or you can just specify text, if you don't want syntax highlighting:

```text
<svg width="20" height="20">
  <circle cx="10" cy="10" r="9" fill="blue"/>
</svg>
```

Heck, you can even use tildes to do that:

~~~
<svg width="20" height="20">
  <circle cx="10" cy="10" r="9" fill="blue"/>
</svg>
~~~

### Images, Attributes and Links

As discussed previously, images support `url`, `cite` and `alt` attributes. Images also support captions, like all resources inserted as figures.

As discussed previously, the exact question of what to do with `cite` and `url` attributes is dependent on the implementation of the Markua Processor. This can also vary based on context. The following examples will make this clear, using Leanpub as an example.

### Setting the `url` Attribute

~~~
{url: "http://peterarmstrong.com/pictures/1.jpg"}
![](cake.jpg)
~~~

Here's what Leanpub will do with these attributes:

1. There is no caption.
2. The image itself will link to <https://peterarmstrong.com/pictures/1.jpg>.

### Setting the `caption` and `url` Attributes

~~~
{url: "http://peterarmstrong.com/pictures/1.jpg"}
![A Piece of Cake](cake.jpg)
~~~

Here's what Leanpub will do with these attributes:

1. The caption is "A Piece of Cake" (no quotes).
2. The caption will link to <https://peterarmstrong.com/pictures/1.jpg>.
3. The image itself will link to <https://peterarmstrong.com/pictures/1.jpg>.

### Setting the `caption` and `url` Attributes

~~~
{caption: "A Piece of Cake", url: "http://peterarmstrong.com/pictures/1.jpg"}
![](cake.jpg)
~~~

This is identical to the previous example. It doesn't matter which way the `caption` attribute is set; it's the same.

To be redundant, here's what Leanpub will do with these attributes:

1. The caption is "A Piece of Cake" (no quotes).
2. The caption will link to <https://peterarmstrong.com/pictures/1.jpg>.
3. The image itself will link to <https://peterarmstrong.com/pictures/1.jpg>.

### Setting the `alt`, `caption` and `url` Attributes

~~~
{alt: "a slice of chocolate cake", url: "http://peterarmstrong.com/pictures/1.jpg"}
![A Piece of Cake](cake.jpg)
~~~

Here's what Leanpub will do with these attributes:

1. The caption is "A Piece of Cake" (no quotes).
2. The caption will link to <https://peterarmstrong.com/pictures/1.jpg>.
3. The image itself will link to <https://peterarmstrong.com/pictures/1.jpg>.
4. The text "a slice of chocolate cake" will be provided as alt text (for accessibility) in all output formats which support it.

### Setting the `url`, `caption` and `alt` Text

~~~
{alt: "a slice of chocolate cake", cite: "Peter's Food Photography", url: "http://peterarmstrong.com/pictures/1.jpg"}
![A Piece of Cake](cake.jpg)
~~~

Here's what Leanpub will do with these attributes:

1. The caption will become "A Piece of Cake — Peter's Food Photography". Specifically, the caption text will be the value of the `caption` attribute, followed by a space, an em dash, a space, and the value of the `cite` attribute.
2. The "Peter's Food Photography" part will link to <https://peterarmstrong.com/pictures/1.jpg>.
3. The image itself will link to <https://peterarmstrong.com/pictures/1.jpg>.
4. The alt text will be provided as alt text in HTML output, for accessibility support.

### Adding a Link Around an Image

Besides using `url` attributes to create links out of images, you can also use the Markua link syntax around an images itself. This is the standard Markdown link syntax which Markua inherited unchanged.

So, you can do the following:

~~~
[![A Piece of Cake](cake.jpg)](https://peterarmstrong.com/pictures/1.jpg)
~~~

Frankly, this syntax has enough line noise to remind me a bit of JWZ's "now you have two problems" [joke](https://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/) about regular expressions.

What this is doing is inserting an image as a resource with a caption `![A Piece of Cake](cake.jpg)` and then wrapping the entire thing with a link. If you think of the image resource as `r`, this is just `[r](https://peterarmstrong.com/pictures/1.jpg)`. Simple!

Now, if you want to do this, you can. Chances are you'll only want to do this if you've been writing Markdown for years, or if you really hate attribute lists. If neither of those is true for you, you'll probably prefer to just use a `url` attribute.

Note that you can also use a span `url` attribute, if you are inserting an image inline:

~~~
Yada yada ![foo](bar.png){url:"http://leanpub.com"} yada yada.
~~~

Whether this is better or worse than the line noise version is a matter of taste:

~~~
Yada yada [![foo](bar.png)](http://leanpub.com) yada yada.
~~~

Now, if you combine both of them, the Markua processor should use the outer link, and log an error:

~~~
Yada yada [![foo](bar.png){url:"http://leanpub.com"}](http://markua.com) yada yada.
~~~

Here, this would link to `http://markua.com`, not `http://leanpub.com`, and the Markua Processor should log an error.

However, to be clear: never write Markua like this.

{#video}
## Video

The syntax to insert a video is the same compact and consistent syntax that is used for any resource. Local and web resource locations are supported for both video formats; inline resource locations for video are obviously not supported.

A Markua Processor may choose to not support video at all, or to only support one of local or web video due to bandwidth or copyright concerns.

Unlike images, which are supported in most circumstances, with video files it's currently a bit of a crapshoot. There's currently a dominant proprietary format (H.264, or .mp4) and a new open source challenger (WebM). It's entirely likely that many ebook readers won't support either.

Also, unlike images where many images will accompany the manuscript itself, with video it's expected that authors will be uploading their videos to sites such as YouTube first, and then reusing these videos in the contents of their Markua books. So, while video can be local or web video, web video will be much more prominent than web images in a Markua book.

Furthermore, unlike with web images where the format (and thus the type) are typically discoverable from the file extension in the URL, with web video it's usually not. So, for web videos, there will typically be a `{type: video}` attribute list at a minimum. That said, if the type and format are not specified and the resource is a web resource, the Markua Processor may use the domain to decide what type of resource to assume. So YouTube videos may just work in some Markua Processors, like Leanpub, without specifying either the `type` or `format`.

Per the [table](#resource-types-and-formats) of resource types and formats, the following types of videos are supported in Markua: MP4 and WebM.

We will discuss the supported and the default attributes for videos, and then show examples of videos being inserted for both local and web videos.

### Supported Attributes for Video

The following are the supported attributes for video resources, in addition to the `type`, `format`, `caption` and `class` attributes which all resources support. Note that the `caption`, `class`, `fullbleed`, `height` and `width` attributes apply to the `poster` image for the video--not to the video itself during playback.

`align`
: The `align` can be `left`, `right` or `middle`. This applies to the `poster` image for the video, and works just like it does with images.

`embed`
: true or false. If true, then you can actually embed the video file or reference it and play it. If false, then it's from a site like YouTube which disallows this. In this case, this should function like a link to external web page, but open an appropriate app (e.g. the YouTube app) instead of a browser. A Markua Processor can be smart about defaults, and parse the URL to set the value of the `embed` attribute.

`float`
: The `float` can be `left`, `right`, `inside` or `outside`.  This applies to the `poster` image for the video, and works just like it does with images. It is an error to specify both `align` and `float`.

`fullbleed`
: `true` or `false`. The default is `false`.  This applies to the `poster` image for the video, and works just like it does with images.

`height`
: This applies to the `poster` image for the video, and works just like it does with images.

`poster`
: The `poster` is the URL or path to an image which should be shown instead of the video before the video is played. If a Markua Processor is outputting some format where it is known that video resources are not supported, it must choose the poster to use as a replacement for the video. Books are not just ebooks--books can also be printed on the fibers of trees that have been chopped down ("paper"), producing something called a "book". These "books", whether they are bound in a sturdy fashion ("hardcover books") or a flimsy fashion ("paperback books"), have one thing in common with respect to embedded video: they do not support it. Finally, if a Markua Processor is embedding a web video from a web video service (e.g. YouTube) which has a known algorithm for the location of the poster images for its videos, the Markua Processor may choose to use that poster image if a `poster` attribute is not explicitly specified. However, if a poster attribute is specified, then it must be used by the Markua Processor.

`poster-format`
: The format of the `poster` image, if it exists. If this attribute is not specified, the format of the `poster` is inferred from the `poster` image file extension. This attribute needs to exist only to support `poster` images which do not have file extensions.

`transcript`
: The URL or path to a transcript of the video, which should be shown or dictated to people who cannot view video. This helps people with visual disabilities view course material, and helps with ADA compliance. For example, what Leanpub does with a `transcript` is as follows: a URL is linked to in the caption (but in a way which does not affect the Table of Contents), and a path is assumed to be a path to a Markua file which is then used to produce a web page at a public URL, which then is also linked to in the caption in a way which does not affect the Table of Contents. With the Markua files for transcripts, Leanpub only supports certain resource types to be included in the transcript files themselves. Specifically, images, video, audio are not supported, but code, poetry, math and tables are supported. When Leanpub generates a transcript, the URLs are publicly accessible but obscure. Identical transcripts should not make duplicate transcript files on the web, and using a new UUID every time would violate this. However, not changing the transcript URL when its content changed could lead to bad outcomes. So, the URL of a transcript on the web should be scoped to the book and affected both by its filename and its content. What Leanpub does is: (filename minus extension minus period plus hyphen plus the SHA hash).html. Including the filename eliminates collisions if filenames are unique but the hashes are not.

`width`
: This applies to the `poster` image for the video, and works just like it does with images.

### Local Video

~~~
Here's a paragraph before the figure.

![A Piece of Cake](cake-eating-contest.webm)

Here's a paragraph after the figure.
~~~

### Web Video

~~~
Here's a paragraph before the figure.

{type: video, poster: "http://img.youtube.com/vi/VOCYL-FNbr0/mqdefault.jpg"}
![Introducing Markua](https://www.youtube.com/watch?t=105&v=VOCYL-FNbr0)

Here's a paragraph after the figure.
~~~

Ironically, it took me about a year after that talk was recorded to finally figure out what Markua was.

{#audio}
## Audio

Just as with video, the audio support in ebooks and on the web is more varied than for images. With audio, there are MP3, AAC, Ogg and WAV formats all in widespread use, and there are a number of other formats with supporters. It's entirely likely that many ebook readers won't support any of them.

A Markua Processor may choose to not support audio at all, or to only support one of local or web audio due to bandwidth or copyright concerns.

Per the [table](#resource-types-and-formats) of resource types and formats, the following types of audio resources are supported in Markua: MP3, AAC, WAV and Ogg Vorbis.

The syntax to insert an audio file is the same compact and consistent syntax that is used for any resource. Local and web resource locations are supported for both audio formats; inline resource locations for audio are obviously not supported.

We will discuss the supported and the default attributes for audio files, and then show examples of audio being inserted for both local and web audio files.

### Supported Attributes for Audio

The following are the supported attributes for audio resources, in addition to the `type`, `format`, `caption` and `class` attributes which all resources support.

`transcript`
: The URL or path to a transcript of the audio, which should be shown to people who cannot hear audio. This helps people with auditory disabilities view course material, and helps with ADA compliance. Transcripts should be produced and handled in an identical way to `video` resources. For example, Leanpub does this. See the Video resource section above for more information.

### Local Audio

~~~
The full version of the talk is here:

![Full Talk](talk.m4a)
~~~

### Web Audio

~~~
The full version of the talk is here:

![Full Talk](http://markua.com/talk.m4a)
~~~

{#code}
## Code

Code can be a local, web or inline resource, just like any other resource, and the same resource syntax applies to code as to all other resources.

As discussed, code cannot have alt text. It's just text. If any alt text is provided for a code resource, it is ignored.

Markua specifies only one specific file extension to be associated with a type of `code`: the `.txt` extension, which is for the format of `text`. However, Markua Processors must interpret **all** unspecified file extensions as specifying a resource of type `code` with a format of `guess`.

Regardless of whether syntax highlighting is supported and the programming language is detected, all code must be formatted as `monospaced text` by Markua Processors.

The `text` format means to not do any syntax highlighting as well.

The `guess` format is a request for the Markua Processor to guess at the programming language based on the file extension and/or the syntax of the code itself. Then, if the detected language corresponds to a particular programming language which the Markua Processor recognizes, and if the Markua Processor supports syntax highlighting, then it can format the resource as nicely syntax-highlighted code. Syntax highlighting is entirely optional in Markua Processors. If a Markua Processor does not support syntax highlighting, and/or if it cannot detect a matching supported programming language, then it must format the code as though the format was `text`--i.e. to format it as unformatted monospaced text.

Besides the `text` and `guess` values of the format attribute, you can also specify the programming language by setting the format attribute to a specific programming language. This is more reliable than `guess`. Unlike other resource types, Markua does not specify the complete set of the values of the `format` attribute--there are so many programming languages in the world, and new ones are added so frequently, that doing so would be impractical.

However, while a complete set of the values of the `format` attribute is not specified, Markua does specify the `console` value of the `format` attribute to indicate console input. A Markua Processor should format console input as such. (For example, Leanpub uses the open source Pygments library for its code formatting, and Pygments handles `console` format correctly, so Leanpub gets this for free.)

The default value of the format attribute for code is complex:

1. For code which is inserted as a span (which is only supported with inline resources), the default format is `text`.
2. For code which is inserted as a figure which is inserted as an inline resource using three tildes, the default format is `text`.
3. For all other code, the default format is `guess`. This includes local and web resources inserted as figures, and code inserted as an inline figure using three backticks.

Note that the default format can be overridden by specifying it via an attribute list, or after the three backticks in syntactic sugar.

{#supported-attributes-for-code}
### Supported Attributes for Code

The following are the supported attributes for code resources, in addition to the `type`, `format`, `caption` and `class` attributes which all resources support.

`line-numbers`
: This determines whether the code sample shows line numbers. Legal values are `true` or `false`. The default value is `false`. Any value other than `true` is interpreted as `false`.

`number-from`
: If line numbers are shown, this lets you override the starting number of the line numbers. The default value is `1`.

`crop-start`
: Sometimes it's desirable to only show part of a code resource defined in an external file as the code example. The `crop-start` and `crop-end` attributes let you accomplish this. The `crop-start` attribute defines the line which represents the first line included from the resource. For example, `{crop-start: 10, crop-end: 15, line-numbers: true, number-from: 10}` ensures that lines 10-15 are shown and are numbered as lines 10-15. The default value is 1, which is the first line of the file.

`crop-end`
: This attribute ends the range started with crop-start. The default value of crop-end is to be omitted, which is equivalent to specifying the last line of the file.

#### Default Value of the `format` attribute in Inline Code Samples

The default value of the `format` attribute for a code resource inserted as a figure varies based on context.

If the code resource is a local or web resource, it defaults to `guess`.

If the code resource is an inline resource, the default varies based on the delimiter, and whether the code is inserted as a span or as a block.

With three backticks the default format is `guess`, and with three tildes, the default format is `text`. This way, you can vary the default without having to type an attribute list: if you want the code language guessed at, use backticks; if you don't, use tildes. Of course, you can specify any attributes you wish with either delimiter, and specified attributes override default ones. The only reason there are different defaults are to make things easier to type. Programmers refer to such niceties as "syntactic sugar".

The default value of block code resources inserted with three backticks can be overridden from `guess` to some other value by setting by the `default-code-language` attribute on the entire Markua document. (This attribute has no effect on resources inserted with three tildes.) The default value of code span resources inserted as spans with single backticks can be overridden from the default value of `text` to some other value by setting the `default-code-span-language` on the entire Markua document.

### Local Code Resources

Local code resources can be inserted as a figure. In all the following examples of figures, the text in the square brackets is the figure caption, like it is in all figures.

This first figure will be a type of code and a format of `guess`. A Markua Processor which associates `.rb` file extensions with Ruby code will treat this as Ruby code; a Markua Processor which has no association for `.rb` files will treat it as plain text:

~~~
Here's a paragraph before the figure.

![Hello World in Ruby](hello.rb)

Here's a paragraph after the figure.
~~~

That is equivalent to:

~~~
Here's a paragraph before the figure.

{format: guess}
![Hello World in Ruby](hello.rb)

Here's a paragraph after the figure.
~~~

If you don't want to take chances you can do this:

~~~
Here's a paragraph before the figure.

{format: ruby}
![Hello World in Ruby](hello.rb)

Here's a paragraph after the figure.
~~~

Note that the caption is optional in all figures:

~~~
Here's a paragraph before the figure.

![](hello.rb)

Here's a paragraph after the figure.
~~~

### Web Code Resources

Web code resources function identically to how local code resources work, including the significance of file extensions. The only differences is that the files are on the web.

This will be a type of code and a format of `guess` since the file extension is not specified:

~~~
![Hello World in Ruby](http://markua.com/hello.rb)
~~~

That is equivalent to:

~~~
{format: guess}
![Hello World in Ruby](http://markua.com/hello.rb)
~~~

If you don't want to take chances you can do this:

~~~
{format: ruby}
![Hello World in Ruby](http://markua.com/hello.rb)
~~~

Note that in the above examples of figures, the text in the square brackets is the figure caption, like it is in all figures.

{#inline-code-resources}
### Inline Code Resources

Inline code resources are the most flexible way to insert code. They are the only way to insert code as a span resource, and the most straightforward way to add short code examples as figures.

{#code-spans}
#### Code Spans

The format of an inline code resource inserted as a span is:

~~~
Yada yada `some code here` yada yada.
~~~

Since "inline code resource which is inserted as a span" is a mouthful, this is just called a code span.

It is an error for a code spans to contain newlines.

The format of code inserted as a span defaults to `text`. However, you can override this by attaching an attribute list to the end of a span.

In the following example, the first statement let the format of the code default to `text`, whereas the second statement specifies the format of the code as `ruby`:

~~~
Hello World in Ruby is a simple `puts "hello world"` statement.

Hello World in Ruby is a simple `puts "hello world"`{format: ruby} statement.
~~~

Note that there is no syntactic sugar for this, since I don't like this, and I want it to be as distasteful as possible. So, this is a sort of "syntactic salt". Syntax highlighting does not make much sense for code which is inserted in the middle of a sentence--there's just not enough code there for it to be worthwhile. However, in Markua, any span can have an attribute list attached to it (in order to add index entries, for example), so there is no reason to explicitly forbid specifying a format in the attribute list.

#### Figure

Inline code resources work great as figures.

This will be a type of code and a format of `guess` since three backticks are used and since the format is not specified:

~~~
Some paragraph.

```
puts "hello"
```

Some paragraph.
~~~

That is equivalent to:

~~~
Some paragraph.

```guess
puts "hello"
```

Some paragraph.
~~~

If you don't want to take chances you can do this to explicitly specify the format:

~~~
Some paragraph.

```ruby
puts "hello"
```

Some paragraph.
~~~

This Ruby code may be formatted as such if the Markua Processor understands `ruby`. If not, the `ruby` format will be ignored.

If you don't like syntactic sugar you can do:

~~~
Some paragraph.

{format: ruby}
```
puts "hello"
```

Some paragraph.
~~~

If you want a figure caption, you can add it to the attribute list with any of the above. For example:

~~~
Some paragraph.

{caption: "Hello World in Ruby"}
```ruby
puts "hello"
```

Some paragraph.
~~~

Finally, if you want the code to definitely not get syntax highlighted, you can force format to be `text` in one of two ways.

First, you can set it explicitly:

~~~
Some paragraph.

```text
puts "hello"
```

Some paragraph.
~~~

Second, you can use three tildes instead of three backticks, since the default with tildes is `text` not `guess`:

```
Some paragraph.

~~~
puts "hello"
~~~

Some paragraph.
```

Finally, as discussed previously, console input and output should be formatted as such by a Markua Processor:

~~~
```console
$ git init
Initialized empty Git repository in /path/to/repo
```
~~~

### Marking Code as Added or Deleted

Markua supports marking code as added or deleted, which can be helpful if you are writing a computer programming book and want to indicate what code should be added or removed to a larger program.

The way to do this is to add special comment lines to your code.

The magic words are `markua-start-insert`, `markua-end-insert`, `markua-start-delete` and `markua-end-delete`. Any line containing one of those words will be removed completely by a Markua Processor before being inserted into the output.

The Markua Processor will then be able to determine which code is being deleted or inserted, and format it accordingly. The recommended way for a Markua Processor to do this is to make code which is being inserted get **`bolded`**, and to make code which is getting deleted to be put in ~~`strikethrough`~~.

Finally, while syntax highlighting is optional in a Markua Processor, if a Markua Processor does support syntax highlighting it is allowed for the Markua Processor to not do any syntax highlighting when there is the presence of any of any special `markua-*` comments. Syntax highlighting may make it harder to notice the added and removed code, if they are formatted with bold and strikethrough respectively.

### Line Wrapping in Code Resources

Code resources should have newlines added by the author to ensure that automatic line wrapping is not relied upon. Markua Processors may wrap lines to ensure that all code is visible on a page, and *may* add continuation characters (like the backslash `\` character) in the output to indicate that a line has been automatically wrapped. However, adding a continuation character is not a requirement, nor is the choice of which continuation character is used.

{#poetry}
## Poetry

Poetry can be a local, web or inline resource, just like any other resource, and the same resource syntax applies to poetry as to all other resources.

Poetry can only be inserted as a figure. It cannot be inserted as a span resource, like code can.

Markua specifies only one specific file extension to be associated with a type of `poetry`: the `.text` extension, which is for the format of `poetry`.

{#supported-attributes-for-poetry}
### Supported Attributes for Poetry

The following are the supported attributes for poetry resources, in addition to the `type`, `format`, `caption` and `class` attributes which all resources support.

`monospaced`
: `true` or `false`. The default is `false`, except for a special case with inline poetry resources, discussed below. If `true`, the Markua Processor must use a monospaced font to output the poetry. If false, the Markua Processor may use whatever font (proportional or monospaced) it is configured to use to output poetry.

Note that inside a poetry resource, Markua [text formatting](#text-formatting) still applies. You can't do arbitrary Markua stuff like headings, images and tables, but you can do the text formatting like bold, italic, strikethrough, etc. So, if you want to write poetry involving asterisks and underscores, use a code block.

{#spacing-poetry-and-newlines}
### Spacing, Poetry and Newlines

Regardless of the value of the `monospaced` attribute, all whitespace inside a poetry resource is respected. This includes all spaces and newlines, regardless of whether they are leading, internal or trailing spaces, and regardless of the number of consecutive newlines.

Poetry resources should have newlines added by the author to ensure that automatic line wrapping is not relied upon.

Markua Processors may wrap lines to ensure that all poetry is visible on a page, and *may* add continuation characters (like the backslash `\` character) in the output to indicate that a line has been automatically wrapped by the Markua Processor.

Obviously, seeing a continuation character is in poetry is terrible, so the author should consider this a mistake that needs to be fixed by manually line wrapping.

### Local Poetry Resources

Local poetry resources look like many other resources inserted as figures. The text in the square brackets is the figure caption, like it is in all figures.

~~~
Here's a Shakespearean sonnet:

![Sonnet 130](sonnet130.text)

Here's an E. E. Cummings poem:

{monospaced: true}
![I Will Be](iwillbe.text)
~~~

### Web Poetry Resources

Web poetry resources function identically to how local poetry resources work, including the significance of file extensions. The only differences is that the files are on the web.

~~~
Here's a Shakespearean sonnet:

![Sonnet 130](http://markua.com/sonnet130.text)

Here's a paragraph after the figure.
~~~

{#inline-poetry-resources}
### Inline Poetry Resources

With an inline poetry resource, the default value of the `monospaced` attribute for a poetry resource varies based on the delimiter used.

To insert a poetry resource inline, you use a `---` delimiter:

~~~
Some paragraph

---
Shall I compare thee to a summer's day
---

Another paragraph
~~~

By default, the value of the `monospaced` attribute of a poetry resource is false. However, regardless of the value of the `monospaced` attribute, all whitespace is respected in a poetry resource. So, you can indent the last two lines of a sonnet with tabs or spaces without requiring a monospaced font. (The whitespace is preserved, but it is using a proportional font, not a monospaced one.)

~~~
Some paragraph

---
I grant I never saw a goddess go;
My mistress when she walks treads on the ground.
    And yet, by heaven, I think my love as rare
    As any she belied with false compare.
---

Another paragraph
~~~

Now, if you want to add a caption to your poetry, you need to use an attribute list:

~~~
Some paragraph

{caption: "Sonnet 130"}
---
I grant I never saw a goddess go;
My mistress when she walks treads on the ground.
    And yet, by heaven, I think my love as rare
    As any she belied with false compare.
---

Another paragraph
~~~

If you want to set the value of `monospaced` to true and type typewriter poetry like ee cummings, you can do this by setting the `monospaced` attribute to `true`. Here's a pretend poem which wants a monospaced font:

~~~
Some paragraph

{caption: "Peter's Pretentious Poem", monospaced: true}
---
i
  am
      a        cat
            a        l a z y          cat

me   ow
---

Another paragraph
~~~

Just like that poem, however, attribute lists aren't very poetic! So, you can also indicate that a poem is monospaced by adding a `*` after the opening delimiter:

~~~
Some paragraph

---*
i
  am
      a        cat
            a        l a z y          cat

me   ow
---

Another paragraph
~~~

There is no `*` after the closing delimiter. (This is similar to how you can add `$` or `@` after the opening delimiter to specify the type of inline math resource.)

{#tables}
## Tables

Tables are important elements in many Markua documents. Tables are also resources, albeit with a special syntax when used as an inline resource.

Per the [table](#resource-types-and-formats) of resource types and formats, a Markua table in an external file (either as a local or web resource) will be interpreted as such if it has a file extension of `.tbl`, or if it has a `format` of table or `type` of table specified via an attribute list.

Tables are always inserted as figures. Note, however, that a Markua Processor should list tables as tables, not figures, if the book has a Table of Figures and Table of Tables.

The syntax to insert a table defined in an external file on the local filesystem is the same as the syntax to insert a local resource:

~~~
{type: table, optional: attribute_list}
![Optional Table Caption](table_path)
~~~

The `table_path` lists the path to the external file which defines the table.

To insert a table defined inline, you just insert it by typing the table in an appropriate syntax.

Markua supports two types of tables, simple tables and complex tables. Both simple tables and complex tables can be inserted inline, or as local or web resources. Both simple tables and complex tables have the same legal attributes.

### Simple Tables

The following are the principles of simple tables in Markua:

1. Formatting never applies to anything above it.
2. Use the fewest formatting characters possible.
3. Prioritize ease of writing over ease of reading.
4. Use the fewest attributes possible.
5. Be able to left-, center- and right- align columns.
6. You can create a simple table even if you can't line anything up, say if you're using a variable-width font.

Simple tables in Markua are virtually identical to GitHub Flavored Markdown (GFM) tables, as specified [here](https://help.github.com/en/articles/organizing-information-with-tables).

The only difference between Markua simple tables and GFM tables is that in Markua simple tables you *must* start and end each the line with a pipe (`|`) character. In GFM, the starting and ending pipes are optional.

Markua simple tables are best specified first by examples, and then the rules. These examples are similar to those from GFM, since the goal was to be as close to GFM as possible, without the pipe issue.

Note that simple tables may leave an optional single-space gap between the separator hyphens and the pipes, for consistency with GFM. (With GFM, the examples all leave spaces, but it works both ways.)

The following is how you create a simple table in Markua, with the spaces:

~~~
{optional: attribute_list}
| Header A   | Header B   | Header C   |
| ---------- | ---------- | ---------- |
| Body A1    | Body B1    | Body C1    |
| Body A2    | Body B2    | Body C2    |
| Body A3    | Body B3    | Body C3    |
~~~

The following is how you create a simple table in Markua, without the spaces:

~~~
{optional: attribute_list}
| Header A   | Header B   | Header C   |
|------------|------------|------------|
| Body A1    | Body B1    | Body C1    |
| Body A2    | Body B2    | Body C2    |
| Body A3    | Body B3    | Body C3    |
~~~

You don't need `type: table` when the table is defined inline, of course, since it's clear.

Here are some examples of Markua simple tables...

#### Basic Markua Simple Table

The following is a simple table, which has been formatted to line up:

~~~
| Header 1  | Header 2  |
| --------- | --------- |
| Content 1 | Content 2 |
| Content 3 | Content 4 |
~~~

#### Nothing Needs To Line Up

The following is a simple table, which has not been formatted to line up:

~~~
| Header 1  | Header 2 |
| --- | --- |
| Content 1 | Content 2 |
| Content 3 | Content 4 Can be Different Length |
~~~

Note that you need at least three hyphens (`-`) in each header separator cell, just as in GFM.

#### Left, Middle and Right Alignment with Colons

To specify column alignment, you add a colons to the header separator row, just as in GFM. You  still need at least three hyphens per header separator cell, just as in GFM.

~~~
| Left | Middle  | Right |
| :--- |  :---:  |  ---: |
| a    | b       | c     |
| d    | e       | f     |
~~~

Note that the alignment of the cell content does not matter, and the cells do not need to line up. This can also be lazily or pathologically written, and it would be both correct and incomprehensible.

~~~
| Left | Middle | Right |
| :--- | :---: |---: |
| a | b | c |
|    d |              e |   f   |
~~~

#### Pipes in Markua Simple Tables vs. GFM Tables

The following is a table in GFM, but not in Markua:

~~~
header 1 | header 2
-------- | --------
content  | content
more     | and more
~~~

You might think that it's clear this is a table, and that GFM gets it right. For that case, you would be correct.

However, the following is a table in GFM:

~~~
foo | bar
~~~

Now, this case is a bit surprising. Having to write backslash-escape every `|` character is not an acceptable tradeoff, in my opinion.

(It is obviously not a simple table in Markua, since there are no leading or trailing pipes.)

Finally, the following two lines are also considered two tables in some Markdown parsers:

~~~
foo `|` bar

foo \| bar
~~~

Since Markua requires leading and trailing pipes on each line, these are obviously not Markua simple tables.

Because of the leading and trailing pipe requirement, the probability of accidentally creating a table in Markua is essentially zero.

### Complex Tables

The following are the principles of complex tables in Markua:

1. Formatting never applies to anything above it.
2. Prioritize clarity and consistency over brevity.
3. Prioritize ease of reading over ease of writing.
4. Use the fewest attributes possible.
5. Be able to left-, center- and right- align both columns and individual cells.
6. Be able to support footers.
7. Be able to specify multi-line header, cell and footer content.
8. You must line everything up to create a complex table, so you must use a fixed-width font in your editor.

Because of these principles, anyone trying to write a complex table correctly should produce the same result.

Note that complex tables support individual alignment of each cell in the table, as well as of columns. Simple tables only support alignment of columns.

The following is how you create a complex table in Markua:

~~~
{optional: attribute_list}
|============|============|============|
| Header A   | Header B   | Header C   |
|============|============|============|
| Body A1    | Body B1    | Body C1    |
|------------|------------|------------|
| Body A2    | Body B2    | Body C2    |
|------------|------------|------------|
| Body A3    | Body B3    | Body C3    |
|============|============|============|
| Footer A   | Footer B   | Footer C   |
|============|============|============|
~~~

W> Unlike with simple tables, complex tables have the formatting hyphens or equals signs go all the way to the pipes (or, as you'll see later, to one character before if a colon is used to align the column or cell). They do not leave a single space gap between the formatting and the pipes.

You don't need `type: table` when the table is defined inline, of course, since it's clear.

#### Headers and Footers

The header is separated from the body cells by a section separator, i.e. a row of `=` signs and `|` characters. Every row of cells is separated by a row separator, i.e. a row of `-` signs and `|` characters. The `|` characters **MUST** line up and **MUST** start and end each line. The header and footer rows are both optional, of course.

The header and footer rows are both optional. The following are also legal tables...

A header row and three body rows:

~~~
|============|============|============|
| Header A   | Header B   | Header C   |
|============|============|============|
| Body A1    | Body B1    | Body C1    |
|------------|------------|------------|
| Body A2    | Body B2    | Body C2    |
|------------|------------|------------|
| Body A3    | Body B3    | Body C3    |
|============|============|============|
~~~

Just body rows:

~~~
|============|============|============|
| Body A1    | Body B1    | Body C1    |
|------------|------------|------------|
| Body A2    | Body B2    | Body C2    |
|------------|------------|------------|
| Body A3    | Body B3    | Body C3    |
|============|============|============|
~~~

Header, one body row, footer:

~~~
|============|============|============|
| Header A   | Header B   | Header C   |
|============|============|============|
| Body A1    | Body B1    | Body C1    |
|============|============|============|
| Footer A   | Footer B   | Footer C   |
|============|============|============|
~~~

No footer:

~~~
|============|============|============|
| Header A   | Header B   | Header C   |
|============|============|============|
| Body A1    | Body B1    | Body C1    |
|------------|------------|------------|
| Body A2    | Body B2    | Body C2    |
|------------|------------|------------|
| Body A3    | Body B3    | Body C3    |
|============|============|============|
~~~

No header:

~~~
|============|============|============|
| Body A1    | Body B1    | Body C1    |
|------------|------------|------------|
| Body A2    | Body B2    | Body C2    |
|------------|------------|------------|
| Body A3    | Body B3    | Body C3    |
|============|============|============|
| Footer A   | Footer B   | Footer C   |
|============|============|============|
~~~

If there are only two rows separated by a section separator, they are interpreted as a header and a body row:

~~~
|============|============|============|
| Header A   | Header B   | Header C   |
|============|============|============|
| Body A1    | Body B1    | Body C1    |
|============|============|============|
~~~

If there are only two rows separated by a row separator, they are just two body rows:

~~~
|============|============|============|
| Body A1    | Body B1    | Body C1    |
|------------|------------|------------|
| Body A2    | Body B2    | Body C2    |
|============|============|============|
~~~

If there is only one row, it is interpreted as a body row, not a header row:

~~~
|============|============|============|
| Body A1    | Body B1    | Body C1    |
|============|============|============|
~~~

Finally, headers and footers can have multiple rows in them. This won't be used that frequently, but it is fully supported:

~~~
|============|============|============|
| Header A1  | Header B1  | Header C1  |
|------------|------------|------------|
| Header A2  | Header B2  | Header C2  |
|------------|------------|------------|
| Header A3  | Header B3  | Header C3  |
|============|============|============|
| Body A1    | Body B1    | Body C1    |
|------------|------------|------------|
| Body A2    | Body B2    | Body C2    |
|------------|------------|------------|
| Body A3    | Body B3    | Body C3    |
|------------|------------|------------|
| Body A4    | Body B4    | Body C4    |
|============|============|============|
| Footer A1  | Footer B1  | Footer C1  |
|------------|------------|------------|
| Footer A2  | Footer B2  | Footer C2  |
|------------|------------|------------|
| Footer A3  | Footer B3  | Footer C3  |
|============|============|============|
~~~

You may initially think that typing row separators would be annoying. My recommended approach is to write the table first, and then copy and paste the row separators. If you get the column widths wrong, updating row separators is a headache, and you'll end up copying and pasting them anyway.

#### Column and Cell Alignment

You can also specify the left, center and right alignment of columns. This can be done separately for the header, for the body, and for the footer. Also, any individual table cell--except the first one in the header, body or footer--can override the column alignment of the header, body, and footer.

This is in keeping with the principles that formatting never applies to anything above it, and to use the fewest formatting characters possible.

The exact rules will be specified shortly, but it helps to start with a few examples.

This table has a left-aligned column with a header of Header A, a centered column with a header of Header B, and a right-aligned column with a header of Header C:

~~~
|:============|:============:|============:|
| Header A    | Header B     | Header C    |
|=============|==============|=============|
| Body A1     | Body B1      | Body C1     |
|-------------|--------------|-------------|
| Body A2     | Body B2      | Body C2     |
|-------------|--------------|-------------|
| Body A3     | Body B3      | Body C3     |
|=============|==============|=============|
| Footer A    | Footer B     | Footer C    |
|=============|==============|=============|
~~~

By default, all cells in the table header, body and footer are left-aligned.

So, the following table has left-aligned headers, but its body columns are left-, center-, and right-aligned respectively:

~~~
|=============|==============|=============|
| Header A    | Header B     | Header C    |
|:============|:============:|============:|
| Body A1     | Body B1      | Body C1     |
|-------------|--------------|-------------|
| Body A2     | Body B2      | Body C2     |
|-------------|--------------|-------------|
| Body A3     | Body B3      | Body C3     |
|=============|==============|=============|
| Footer A    | Footer B     | Footer C    |
|=============|==============|=============|
~~~

You can use different alignments for the header and the body of the table.

This table is just like the previous one, but it has left-aligned (Header A), centered (Header B) and right-aligned (Header C) header columns, with right-aligned, left-aligned and then centered body columns.

~~~
|:============|:============:|============:|
| Header A    | Header B     | Header C    |
|============:|:=============|:===========:|
| Body A1     | Body B1      | Body C1     |
|-------------|--------------|-------------|
| Body A2     | Body B2      | Body C2     |
|-------------|--------------|-------------|
| Body A3     | Body B3      | Body C3     |
|=============|==============|=============|
| Footer A    | Footer B     | Footer C    |
|=============|==============|=============|
~~~

You can also override the alignment of an individual cell. This table is just like the previous one, but its Body B2 cell is overridden to be centered not left-aligned:

~~~
|:============|:============:|============:|
| Header A    | Header B     | Header C    |
|============:|:=============|:===========:|
| Body A1     | Body B1      | Body C1     |
|-------------|:------------:|-------------|
| Body A2     | Body B2      | Body C2     |
|-------------|--------------|-------------|
| Body A3     | Body B3      | Body C3     |
|=============|==============|=============|
| Footer A    | Footer B     | Footer C    |
|=============|==============|=============|
~~~

Formatting a separator row (`====`) cascades downward. Header alignment cascades into the body and footer; body alignment cascades into the footer.

However, individual cell separator row (`----`) footing does NOT cascade downward. It overrides an individual cell only; it does not change the column alignment going forward. In the above table, Body B3 is left-aligned (like its body column) not centered (like Body B2).

This has the following consequence:

The cells in the first row of a table header, table body or table footer must have the same alignment as the header, body or footer column they are in. They are used to define the alignment, not override it. If you need other cells in the table header, body or footer to have different alignments, those must do the overriding.

So, if you want every other cell in a column to have a different alignment than the first non-header cell in that column, each of them must have the overridden alignment. This would not be true if alignment overrides cascaded downward, but that would confuse a lot more people than helping this small edge case.

Since the alignment is done on the separator row above the first body row, it even works to align a column with no header or footer. The following columns are also left-, center-, and right-aligned respectively:

~~~
|:===========|:==========:|===========:|
| Body A1    | Body B1    | Body C1    |
|------------|------------|------------|
| Body A2    | Body B2    | Body C2    |
|------------|------------|------------|
| Body A3    | Body B3    | Body C3    |
|============|============|============|
~~~

You can override alignments anywhere.

The following table has left-aligned (A), centered (B) and right-aligned (C) header and footer columns, with right-aligned (A), left-aligned (B) and then centered (C) body columns--and it also overrides Header B2 to be right-aligned, Body A2 to be centered and Footer C2 to be left-aligned:

~~~
|:===========|:==========:|===========:|
| Header A1  | Header B1  | Header C1  |
|------------|-----------:|------------|
| Header A2  | Header B2  | Header C2  |
|------------|------------|------------|
| Header A3  | Header B3  | Header C3  |
|===========:|:===========|:==========:|
| Body A1    | Body B1    | Body C1    |
|:----------:|------------|------------|
| Body A2    | Body B2    | Body C2    |
|------------|------------|------------|
| Body A3    | Body B3    | Body C3    |
|------------|------------|------------|
| Body A4    | Body B4    | Body C4    |
|:===========|:==========:|===========:|
| Footer A1  | Footer B1  | Footer C1  |
|------------|------------|:-----------|
| Footer A2  | Footer B2  | Footer C2  |
|------------|------------|------------|
| Footer A3  | Footer B3  | Footer C3  |
|============|============|============|
~~~

However, just because you can, doesn't mean that you should.

#### Multiple-line rows, row spans and column spans

You can have more than one row of content in cells, and there is no ambiguity since each row of cells is separated with a row of `-` signs and `|` characters:

~~~
|=============|==============|=============|
| Header A    | Header B     | Header C    |
|:============|:============:|============:|
| Body A1     | Body B1      | Body C1     |
| is really   | is here      |             |
| really      |              |             |
| long        |              |             |
|-------------|--------------|-------------|
| Body A2     | Body B2      | Body C2     |
|-------------|--------------|-------------|
| Body A3     | Body B3      | Body C3     |
|=============|==============|=============|
| Footer A    | Footer B     | Footer C    |
|=============|==============|=============|
~~~

You can specify a column span just by skipping a `|` in the appropriate place:

~~~
|=============|==============|=============|
| Header A    | Header B     | Header C    |
|:============|:============:|============:|
| Body A1 and B1 Merged      | Body C1     |
|-------------|--------------|-------------|
| Body A2     | Body B2      | Body C2     |
|-------------|--------------|-------------|
| Body A3     | Body B3      | Body C3     |
|=============|==============|=============|
| Footer A    | Footer B     | Footer C    |
|=============|==============|=============|
~~~

Note that the alignment of the cell in the merged columns is that of its leftmost column, if no override is done. So, in the above table, Body A1 and B1 Merged is left-aligned not centered.

Now, if you want to override the alignment on a merged cell, you do that in the leftmost cell. So, in the below table, Body A2 and B2 Merged is centered not left-aligned.

~~~
|=============|==============|=============|
| Header A    | Header B     | Header C    |
|:============|:============:|============:|
| Body A1     | Body B1      | Body C1     |
|:-----------:|--------------|-------------|
| Body A2 and B2 Merged      | Body C2     |
|-------------|--------------|-------------|
| Body A3     | Body B3      | Body C3     |
|=============|==============|=============|
| Footer A    | Footer B     | Footer C    |
|=============|==============|=============|
~~~

You can specify a row span just by skipping a part-row of `-` signs in the appropriate place:

~~~
|=============|==============|=============|
| Header A    | Header B     | Header C    |
|:============|:============:|============:|
| Body A1     | Body B1      | Body C1     |
| and A2      |--------------|-------------|
| Merged      | Body B2      | Body C2     |
|-------------|--------------|-------------|
| Body A3     | Body B3      | Body C3     |
|=============|==============|=============|
| Footer A    | Footer B     | Footer C    |
|=============|==============|=============|
~~~

You can also individually align cells with colons in the `-` part-row **above** them. This alignment overrides any alignment already on the column, and it works for merged cells too:

~~~
|=============|===============|=============|
| Header A    | Header B      | Header C    |
|:============|:=============:|============:|
| Body A1 and B1 Merged       | Body C1     |
|------------:|:--------------|-------------|
| Body A2     | Body B2       | Body C2     |
|:-----------:| and B3 Merged |-------------|
| Body A3     |               | Body C3     |
|=============|===============|=============|
| Footer A    | Footer B      | Footer C    |
|=============|===============|=============|
~~~

In that table, column A is left-aligned, column B is centered and column C is right-aligned. However, cell A2 is right-aligned, cell A3 is centered and merged cell B2 and B3 is left-aligned.

{#table-attributes}
### Supported Attributes for Tables

The following attributes apply to both simple tables and complex tables.

If there are any errors with the supported attributes for tables, such as the `column-widths` not adding up correctly or missing `%` signs, the Markua Processor must log an error or warning, and just output the table with either the erroneous attribute not set or with none of the attributes set.

The following is the supported attribute for table resources, in addition to the `type`, `format`, `caption` and `class` attributes which all resources support:

`column-widths`
: The column widths as a comma-separated list of numbers (integers and/or floats) and/or `*` symbols, from left to right, as a percentage of the total table width. In this attribute value, * means for the column to use the remaining space, equally divided between it and any other column with the * attribute. Examples: `{column-widths: "10%,30%,*,10%"}`, `{column-widths: "10%,*,40%,*"}`, `{column-widths: "10%, 30%, *, 12.5%"}`, `{column-widths: "95%, *, *"}`. The numbers used for the column-widths percentages must sum to exactly 100 (if only numbers are used), or to less than 100 (if there are any `*`s used). Every specified value must be at least 1, and every `*` must compute to at least 1. The number of values (numbers or `*`s) must match the number of columns. Like with the `width` attribute, the percentage sign (%) is required, to make it absolutely clear that these are not measurements in pixels or points. Finally, the list may contain optional whitespace before and/or after each comma.

`style`
: The style of the table. Values can be `simple`, `grid` or any other value. All Markua Processors must support values of `simple` and `grid` for tables. The default is `simple`. A Markua Processor may use whatever formatting it wants with `simple`, but it should be clear which cells are part of the table header, body and footer. A Markua Processor may also use whatever formatting it wants with `grid`, but it must show grid lines around each table cell. If a Markua Processor does not recognize the value of the `style`, it must format it as `simple` and log an error.

`width`
: The width of the table, in percentage of page content area width (respecting margins). This is specified as a number (integer or float) between 1 and 100 followed by a percentage sign (%). The quotes are optional. So, you can say `{width: "70%"}`, `{width: 70%}`, `{width: "70.5%"}` or `{width: 70.5%}`.

A Markua Processor may do whatever it wants when outputting a table. For example, a Markua Processor may choose to transform the table into an image, for maximum ebook reader compatibility--but at the expense of accessibility support in newer ebook readers.

{#math}
## Math

Math can be a local, web or inline resource, just like any other resource, and the same resource syntax applies to code as to all other resources.

Per the [table](#resource-types-and-formats) of resource types and formats, the following types of math resources can be supported by Markua Processors: LaTeX math or MathML.

Note that Markua processors do not need to support either math markup syntax (LaTeX math or MathML). If a Markua Processor does not support a math markup syntax, it should simply render the text of the math resource as unformatted monospaced text, much like a code resource of format `text`.

### Supported Attributes for Math

The following is the supported attribute for math resources, in addition to the `type`, `format`, `caption` and `class` attributes which all resources support:

`alt`
: The `alt` is the alt text, to be displayed when the mathematical equations cannot be shown. The default alt text for math is "math". This can be provided in the figure attribute list. This is primarily intended for Markua Processors that output math as images; there are no output requirements for the alt text. This attribute functions as it does for images. (In fact, a Markua Processor may choose to transform the math into an image, for maximum ebook reader compatibility.)

Note that for math, the `format` is the name of the syntax used to write the mathematical equations. There are two special types of `format` for math baked into Markua: `latex` for LaTeX math and `mathml` for MathML math.

### Local Math Resources

Local math resources can be inserted as a figure. In all the following examples of figures, the text in the square brackets is the figure caption, like it is in all figures.

~~~
Here's a paragraph before the figure.

{alt: "too large to fit in the alt text"}
![Proof of Fermat's Last Theorem](fermat-proof.mathml)

Here's a paragraph after the figure.
~~~

### Web Math Resources

This is identical to how local math resources work, including the significance of file extensions. The only difference is that the files are on the web.

~~~
Here's a paragraph before the figure.

{alt: "too large to fit in the alt text"}
![Proof of Fermat's Last Theorem](http://markua.com/fermat-proof.tex)

Here's a paragraph after the figure.
~~~

Note that in the above examples of figures, the text in the square brackets is the figure caption, like it is in all figures.

### Inline Math Resources

Inline math resources are the most flexible way to insert math. They are the only way to insert math as a span resource, and the most straightforward way to add short math examples as figures. LaTeX math, AsciiMath and MathML can be inserted inline as a span or figure.

#### Span

Being able to insert a math resource as a span is important, as it lets you write things like one of the kinematic equations `d = v_i t + \frac{1}{2} a t^2`$ inside sentences. This can be done with LaTeX math, AsciiMath, or (in theory) MathML.

To insert math as inline math, use a `$` after closing backtick for LaTeX math, an `@` after the closing backtick for AsciiMath, or an attribute list specifying a `format` of `latex`, `asciimath` or `mathml`. If none of these is done, the content of the backticks is treated as code and is output verbatim as monospaced text.

##### LaTeX math

There is syntactic sugar for LaTeX math which is inserted as a span, using the `$` character after the closing backtick:

~~~
Here's one of the kinematic equations `d = v_i t + \frac{1}{2} a t^2`$ inside a sentence.
~~~

The `$` character indicates the inline resource is LaTeX math.

If you don't like syntactic sugar, you can also use {format: latexmath} after the inline span resource:

~~~
Here's one of the kinematic equations `d = v_i t + \frac{1}{2} a t^2`{format: latexmath} inside a sentence.
~~~

##### AsciiMath

[AsciiMath](http://asciimath.org/) is a way of producing simple MathML equations, using about 1% of the typing. It's more terse than LaTeX math.

There is syntactic sugar for AsciiMath which is inserted as a span, using the `@` character after the closing backtick:

~~~
Here's one of the kinematic equations `d = v_i t + 1/2 at^2`@ inside a sentence.
~~~

The `@` character indicates the inline resource is AsciiMath.

If you don't like syntactic sugar, you can also use {format: asciimath} after the inline span resource:

~~~
Here's one of the kinematic equations `d = v_i t + 1/2 at^2`{format: asciimath} inside a sentence.
~~~

##### MathML

Technically you can insert MathML as an inline span resource, as long as you remove all the newlines. There is no syntactic sugar for this, since it is almost always a bad idea:

~~~
Yada yada `<some><mathml><here></here></mathml></some>`{format: mathml} yada yada.
~~~

No, that's not really MathML syntax. For an example of some, see this [Wikipedia page](https://en.wikipedia.org/wiki/MathML).

While it would almost always be a bad idea to insert MathML as a span resource, it would also be a bad idea to forbid it in the Markua spec.

If you're going to insert MathML, it should be inserted as a figure, with newlines used inside the MathML to format it in a somewhat readable way.

#### Figure

Both LaTeX math, AsciiMath and MathML can be inserted inline as a figure.

* LaTeX math can be inserted by specifying either `latex` or `$` after three backticks, or by specifying an attribute list of `{format: latexmath}`.
* AsciiMath can be inserted by specifying either `asciimath` or `@` after three backticks, or by specifying an attribute list of `{format: asciimath}`.
* MathML math can be inserted by specifying `mathml` after three backticks, or by specifying an attribute list of `{format: mathml}`.

All three let you produce mathematical equations like this:

```$
\left|\sum_{i=1}^n a_ib_i\right|
\le
\left(\sum_{i=1}^n a_i^2\right)^{1/2}
\left(\sum_{i=1}^n b_i^2\right)^{1/2}
```

##### LaTeX math

Here's how you do this using LaTeX math...

Here's the version with the syntactic sugar for the format after the backticks:

~~~
Here's a paragraph before the figure.

```$
\left|\sum_{i=1}^n a_ib_i\right|
\le
\left(\sum_{i=1}^n a_i^2\right)^{1/2}
\left(\sum_{i=1}^n b_i^2\right)^{1/2}
```

Here's a paragraph after the figure.
~~~

Here's the same thing, with the full format after the backticks:

~~~
Here's a paragraph before the figure.

```latexmath
\left|\sum_{i=1}^n a_ib_i\right|
\le
\left(\sum_{i=1}^n a_i^2\right)^{1/2}
\left(\sum_{i=1}^n b_i^2\right)^{1/2}
```

Here's a paragraph after the figure.
~~~

Here's the same thing again, with a full attribute list:

~~~
Here's a paragraph before the figure.

{format: latexmath}
```
\left|\sum_{i=1}^n a_ib_i\right|
\le
\left(\sum_{i=1}^n a_i^2\right)^{1/2}
\left(\sum_{i=1}^n b_i^2\right)^{1/2}
```

Here's a paragraph after the figure.
~~~

##### AsciiMath

Here's how you do this using AsciiMath...

Here's the version with the syntactic sugar for the format after the backticks:

~~~
Here's a paragraph before the figure.

```@
abs(sum_(i=1)^n a_i b_i) <= (sum_(i=1)^n a_i^2)^(1/2) (sum_(i=1)^n b_i^2)^(1/2)
```

Here's a paragraph after the figure.
~~~

Here's the same thing, with the full format after the backticks:

~~~
Here's a paragraph before the figure.

```asciimath
abs(sum_(i=1)^n a_i b_i) <= (sum_(i=1)^n a_i^2)^(1/2) (sum_(i=1)^n b_i^2)^(1/2)
```

Here's a paragraph after the figure.
~~~

Here's the same thing again, with a full attribute list:

~~~
Here's a paragraph before the figure.

{format: asciimath}
```
abs(sum_(i=1)^n a_i b_i) <= (sum_(i=1)^n a_i^2)^(1/2) (sum_(i=1)^n b_i^2)^(1/2)
```

Here's a paragraph after the figure.
~~~

If you wonder why I'm a fan of AsciiMath: I actually got that right on the first try at the [AsciiMath website](http://asciimath.org/).

###### Writing about AsciiMath

If you want to write about AsciiMath, and show the actual AsciiMath code (instead of the formatted output), it needs to be of a `format` of `code`, not `math`.

Now, you can just be lazy and not provide `format` or `type` attributes at all, since guessing when neither is present always produces a type of `code`.

```
abs(sum_(i=1)^n a_i b_i) <= (sum_(i=1)^n a_i^2)^(1/2) (sum_(i=1)^n b_i^2)^(1/2)
```

However, you can also just specify both, either this way...

{type: code}
```asciimath
abs(sum_(i=1)^n a_i b_i) <= (sum_(i=1)^n a_i^2)^(1/2) (sum_(i=1)^n b_i^2)^(1/2)
```

...or this way:

{type: code, format: asciimath}
```
abs(sum_(i=1)^n a_i b_i) <= (sum_(i=1)^n a_i^2)^(1/2) (sum_(i=1)^n b_i^2)^(1/2)
```

Or you can just specify text:

```text
abs(sum_(i=1)^n a_i b_i) <= (sum_(i=1)^n a_i^2)^(1/2) (sum_(i=1)^n b_i^2)^(1/2)
```

Heck, you can even use tildes:

~~~
abs(sum_(i=1)^n a_i b_i) <= (sum_(i=1)^n a_i^2)^(1/2) (sum_(i=1)^n b_i^2)^(1/2)
~~~

##### MathML

There is no syntactic sugar for MathML.

Here's the MathML version, with the full format after the backticks:

~~~
Here's a paragraph before the figure.

```mathml
<math xmlns="http://www.w3.org/1998/Math/MathML">
  <mstyle displaystyle="true">
    <mrow>
      <mo>|</mo>
      <mrow>
        <mrow>
          <munderover>
            <mo>&#x2211;</mo>
            <mrow>
              <mi>i</mi>
              <mo>=</mo>
              <mn>1</mn>
            </mrow>
            <mi>n</mi>
          </munderover>
        </mrow>
        <msub>
          <mi>a</mi>
          <mi>i</mi>
        </msub>
        <msub>
          <mi>b</mi>
          <mi>i</mi>
        </msub>
      </mrow>
      <mo>|</mo>
    </mrow>
    <mo>&#x2264;</mo>
    <msup>
      <mrow>
        <mo>(</mo>
        <mrow>
          <munderover>
            <mo>&#x2211;</mo>
            <mrow>
              <mi>i</mi>
              <mo>=</mo>
              <mn>1</mn>
            </mrow>
            <mi>n</mi>
          </munderover>
        </mrow>
        <mrow>
          <msubsup>
            <mi>a</mi>
            <mi>i</mi>
            <mn>2</mn>
          </msubsup>
        </mrow>
        <mo>)</mo>
      </mrow>
      <mrow>
        <mfrac>
          <mn>1</mn>
          <mn>2</mn>
        </mfrac>
      </mrow>
    </msup>
    <msup>
      <mrow>
        <mo>(</mo>
        <mrow>
          <munderover>
            <mo>&#x2211;</mo>
            <mrow>
              <mi>i</mi>
              <mo>=</mo>
              <mn>1</mn>
            </mrow>
            <mi>n</mi>
          </munderover>
        </mrow>
        <mrow>
          <msubsup>
            <mi>b</mi>
            <mi>i</mi>
            <mn>2</mn>
          </msubsup>
        </mrow>
        <mo>)</mo>
      </mrow>
      <mrow>
        <mfrac>
          <mn>1</mn>
          <mn>2</mn>
        </mfrac>
      </mrow>
    </msup>
  </mstyle>
</math>
```

Here's a paragraph after the figure.
~~~

In case you're wondering: no, I didn't type this in. Instead, I did this:

1. I wrote the AsciiMath in the previous section, i.e. `abs(sum_(i=1)^n a_i b_i) <= (sum_(i=1)^n a_i^2)^(1/2) (sum_(i=1)^n b_i^2)^(1/2)`.
2. I went to the [AsciiMath](http://asciimath.org/) website and pasted it in the Input field.
3. I chose Show Math As > MathML Code for the Rendering field.

MathML is excellent as an output format for AsciiMath.

Here's the same thing again, with a full attribute list:

~~~
Here's a paragraph before the figure.

{format: mathml}
```
<math xmlns="http://www.w3.org/1998/Math/MathML">
  <mstyle displaystyle="true">
    (...identical code omitted for brevity...)
  </mstyle>
</math>
```

Here's a paragraph after the figure.
~~~

{#whitespace}
# Whitespace: Spaces, Tabs and Newlines

The goal for the handling of normal whitespace (spaces, tabs and newlines) in Markua is for everything to just work.

Note that these decisions about normal whitespace handling are decisions about prose, not poetry. Poetry has its own rules, and in poetry, all whitespace is preserved unchanged. The way this is accomplished is that poetry, whether in an external file or in the body of a Markua document itself, is handled as a [poetry resource](#poetry).

For prose, Markua has four principles of whitespace handling:

1. You should be able to look at a Markua document and know what is produced. Invisible formatting is frowned upon.
2. Paragraphs and sentences should be handled consistently, regardless of indentation and spaces after periods.
3. Manual whitespace formatting should be discouraged.
4. Newlines are newlines; spaces are spaces. These are different things.

These simple goals have far-reaching consequences:

1. Whitespace at the end of a line or file is ignored.
2. It doesn't matter how many spaces you add after a sentence.
3. All consecutive blank lines after the first blank line are ignored when separating paragraphs, and all consecutive blank lines after the second blank line are ignored when separating lists.
4. You can't manually wrap text with newlines being used as though they are spaces, but you can add a forced line break just by hitting the Enter key.

## Newlines

{#single-newlines}
### Single Newline = Forced Line Break

In Markua, a forced line break in the input is a forced line break in all output formats. This is true for paragraphs, lists, blockquotes, asides and blurbs.

In ancient history, some text editors did not automatically wrap lines of text, so manual wrapping of plain text files was a good thing to do. Also, for computer programmers, we still do not wrap our text when programming. However, for writing, automatic wrapping of paragraphs is essential for staying in the flow while writing, and for being able to edit your text without needing to re-wrap every line in a paragraph. This is one decision that even Microsoft Word gets right.

The handling of single newlines is the largest difference between Markua and Markdown. To learn more, see the newlines [discussion](#markdown-newlines) in the Differences with Markdown chapter.

The following is an example of Markua's single newlines:

~~~
I'm paragraph one. Yay!

This is paragraph two.
This is *still* in paragraph two, preceded by a forced line break.
This is also in paragraph two, also preceded by a forced line break.

This is paragraph three.
~~~

### Two or More Newlines = One Blank Line

Two or more consecutive newlines produce exactly one blank line, which separates block elements like paragraphs from each other. So, there is no reason to use more than two consecutive newlines.

When writing prose, there's basically no reason to add multiple blank lines. Worse, the most popular reason is a bad one: to attempt to manually accomplish a page break, or to make something look like a section break. However, Markua has special syntax for [scene breaks](#scene-breaks) and [page breaks](#page-breaks), which should be used for these purposes.

There's also a horrible hack to force whitespace, which works both to add spaces or blank lines. This is discussed [later](#whitespace-hack).

## Spaces and Tabs

### Spaces and Tabs at the Beginning of a Line are Only to Determine List Containment, and Extra Spaces are Removed

Spaces and tabs at the beginning of a line are only used to determine whether the content is contained in a list item--or, in the case of a nested list, which list the list item is contained in.

Besides this, in a paragraph, any manual indentation (using spaces or tabs at the beginning of a line) is just removed. This is even true after a forced line break, using a single newline.

So, if you're writing a sonnet, you can't manually indent the last two lines just by hitting Enter and adding two spaces at the beginning of the line. Instead, you need to use a [poetry resource](#poetry). To do this, you start a poetry resource with `___` or `---`. This will have the added benefit of allowing your poetry to be formatted using special font sizes and margins, to be more poetic than prose.

### Spaces and Tabs at the End of a Line are Removed

Unlike Markdown, all trailing spaces at the end of a line are ignored by Markua. This way, there is no [reliance on invisible formatting to produce newlines](#single-newlines), and editors which strip trailing spaces have no effect on a Markua document.

### Consecutive Spaces are Collapsed to One Space

Multiple internal spaces in the middle of a paragraph are all collapsed to one space. The following paragraphs are the same:

~~~
This is foo. This is bar.

This is foo.  This is bar.

This  is  foo.    This is      bar.
~~~

### A Markua Processor may Separate Sentences with Custom Whitespace

A Markua Processor may choose to detect what the end of a sentence is, and output a custom amount of whitespace between sentences within a paragraph. Regardless of whether this is one space, one and a half spaces, two spaces, or some other amount of space, the amount of chosen to separate sentences within paragraphs must be identical. (Yes, one and a half spaces at the end of a sentence is a real choice to output, and it is arguably better than one or two spaces. However, good luck trying to type it!)

This can be accomplished by a Markua Processor in two ways:

1. Don't even try to determine what a sentence is, and always output one space after periods.
2. Determine what a sentence is, and output a custom amount of space after it.

Either way, the amount of space after the end of a sentence must be the same for all sentences, regardless of how many spaces the author(s) typed. This way, multiple authors can collaborate on a Markua document and it will look consistent in the output, even if some authors use one space after sentences and other authors use two spaces after sentences.

Finally, note that determining the end of a sentence would be easier if all authors typed two spaces at the end of their sentences! This way, a Markua Processor could easily determine that something like "Mr. Armstrong" did not, in fact, contain the end of a sentence between `Mr.` and `Armstrong`.

{#lists}
# Lists

Markua supports two types of lists, bulleted lists and numbered lists, which can be formatted as either simple or complex lists.

The basics of bulleted and numbered lists are discussed first. This is followed by a discussion of simple and complex lists, which will contain examples of both.

Note that Markua distinguishes between "bulleted" and "numbered" lists, not between "unordered" and "ordered" lists (as is done by HTML and Markdown), since all lists have an order--otherwise they wouldn't be lists!

{#bulleted-lists}
## Bulleted Lists

Markua lets you make a bulleted list by starting each list item with either an asterisk (`*`) or a hyphen (`-`), followed by one space, followed by text content. You can't mix and match asterisks and hyphens in the same list.

You can build a bulleted list out of items starting with an asterisk and one space:

~~~
* foo
* bar
* baz
~~~

You can build a bulleted list out of items starting with a hyphen and one space:

~~~
- one
- two
- three
~~~

Markua could have supported just one of the asterisk or the hyphen, but this would have been too prescriptive.

To make a bulleted list in Markua:

* Start each list item with either an asterisk (`*`) or a hyphen (`-`).
* You can't mix and match asterisks and hyphens in the same list.
* Only one space is allowed after each bullet. Just as with headings, there is no reason to support any other number of spaces, and the increased consistency is a benefit.
* A single-element bulleted list is a list: although it is a pretty stupid list, treating it as a literal paragraph starting with an asterisk or hyphen would be even stupider.

In terms of style guidance, the preferred bullet type in Markua is the asterisk.

{#numbered-lists}
## Numbered Lists

In Markua, a numbered list can vary the following:

1. Numbering system
2. Numbering direction (ascending or descending)
3. Initial number (or letter, or Roman numeral)
4. Period or parentheses after the number (or letter, or Roman numeral)

The following choices of numbering system are supported:

1. Decimal numbers
2. Uppercase letters
3. Lowercase letters
4. Uppercase Roman numerals
5. Lowercase Roman numerals

Unlike in Markdown, in Markua the number that begins the list in the manuscript is the *same* number that begins the list in the output.

To make a numbered list in Markua:

* Start two or more consecutive lines with either a consecutive (e.g. `1.`, `2.`, `3.`) or the first (e.g. `1.`, `1.`, `1.`)  number, letter or Roman numeral, each followed by either a period or right parenthesis, then exactly one space, then text content.
* Since Markua supports letters and Roman numerals as well as decimal numbers to start lists, the rules about using consecutive numbers or the same number are actually a bit complex. These are discussed later.
* You need to follow the period or parenthesis with exactly one space. Markua very deliberately does not allow more than one space following the period or right-parenthesis: if your list grows to 10 or more items, you should not waste time adding a space to items 1-9 to line their content up with item 10; similarly, if your list grows to 100 or more items you should not waste time adding yet another space to items 1-99 to line their content up with item 100. So, Markua just forbids more than one space after the period or parenthesis. Besides the time saved, the increased consistency is a benefit.

Note that a Markua Processor must output the same number, letter or Roman numeral which is in the manuscript. A Markua Processor may choose to respect the parentheses versus period decision, or it may choose to use all periods or all parentheses, or it may choose to use parentheses in, say, PDF, but use periods in, say, HTML, EPUB and MOBI. There is no formal, official mapping of Markua to any output format, to encourage competition and dynamic ecosystem of Markua Processors.

This set of examples shows many of the normal use cases of lists with the various numbering systems. For the edge cases, see the next sections.

You can build a numbered list out of ascending decimal numbers starting from 1:

~~~
1. foo
2. bar
3. baz
~~~

You can build a numbered list out of ascending decimal numbers starting from 1, with parentheses used instead of periods:

~~~
1) foo
2) bar
3) baz
~~~

You can build a numbered list out of ascending decimal numbers followed by periods starting from a higher number:

~~~
9. foo
10. bar
11. baz
~~~

You can build a numbered list out of ascending decimal numbers followed by parentheses starting from a higher number:

~~~
9) foo
10) bar
11) baz
~~~

You can build a numbered list out of descending decimal numbers:

~~~
3. foo
2. bar
1. baz
~~~

You can build a numbered list out of identical decimal numbers, if you are lazy (producing 1, 2, 3):

~~~
1. foo
1. bar
1. baz
~~~

You can build a numbered list out of ascending lowercase letters:

~~~
a. foo
b. bar
c. baz
~~~

You can build a numbered list out of ascending lowercase letters, with parentheses used instead of periods:

~~~
a) foo
b) bar
c) baz
~~~

You can build a numbered list out of ascending uppercase letters:

~~~
I. foo
J. bar
K. baz
~~~

You can build a numbered list out of ascending uppercase Roman numerals:

~~~
I. foo
II. bar
III. baz
~~~

You can build a numbered list out of ascending lowercase Roman numerals:

~~~
i. foo
ii. bar
iii. baz
~~~

You cannot, however, indent your numbered list delimiters. The following is not a list, but instead is an oddly-formatted paragraph:

~~~
 8. foo
 9. bar
10. baz
~~~

### In Markua, It's Hard to Accidentally Make a Numbered List

Markdown has the interesting combination of supporting one element lists and ignoring the number that a list starts with. This means it's possible to inadvertently start a numbered list by beginning any line with a number followed by a period. The example that John Gruber [cites](http://daringfireball.net/projects/markdown/syntax) is the following:

`1986. What a great season.`

In Markdown, this would produce the following single-element numbered list:

`1. What a great season.`

In my opinion, is a blatant violation of the Principle of Least Surprise. (By the way, there is a very gross workaround in Markdown: you prefix the period with a backslash. So, you'd write `1986\. What a great season.` to avoid this.)

Now, if Markua supported single-element numbered lists, this would produce a single-element numbered list:

`1986. What a great season.`

This wouldn't be as bad as what Markdown does, but it wouldn't be good either! Exactly how stupid it would look would be determined by how numbered lists were formatted by the Markua Processor, but it certainly would look wrong.

But what to do?

What Markua does is define a number of common-sense use cases which *do* make numbered lists, and then backs out the rule which results. The resulting rule is as follows:

**In Markua, a single element numbered list is a numbered list if at least one of the following is true: it uses a parenthesis for its delimiter, it contains a nested list, or it is itself a child of some list item in a list.**

So, something like this is not a list in between two paragraphs. Instead, it's three paragraphs, like you would expect:

~~~
Yada yada yada

1986. What a great season.

Yada yada yada
~~~

This is true for numbered lists only--single-element bulleted lists are lists. (It's stupid, but the alternative would have been stupider.)

~~~
Yada yada yada

* This is a list

Yada yada yada
~~~

So, in Markua, the automatic creation of a numbered list only happens if you have two or more lines starting with consecutive or identical numbers, letters or Roman numerals, followed by a period or right parenthesis, followed by a space, followed by text content.

This still has some possibly incorrect interpretations, but these will be a *lot* more rare. This matters: if you get burned by the automatic list creation, and you feel that you have to think about whether you can start a sentence with a number, then writing in Markua would feel more like programming than writing.

#### A Single-Element Numbered List With A Parenthesis Is a Numbered List

This **is** a numbered list:

~~~
Yada yada yada

1) Foo

Yada yada yada
~~~

This **is** a numbered list:

~~~
Yada yada yada

1986) Foo

Yada yada yada
~~~

This is **not** a numbered list:

~~~
Yada yada yada

1\) Foo

Yada yada yada
~~~

This is **not** a numbered list:

~~~
Yada yada yada

1986\) Foo

Yada yada yada
~~~

This is **not** a numbered list:

~~~
Yada yada yada

1. Foo

Yada yada yada
~~~

This is **not** a numbered list:

~~~
Yada yada yada

1986. Foo

Yada yada yada
~~~

#### A Single-Element Numbered List Which Contains A List Is A Numbered List

This is a numbered list:

~~~
Yada yada yada

1. Foo
   a) foo
   b) bar
   c) baz

Yada yada yada
~~~

This is a numbered list:

~~~
Yada yada yada

1986. Foo
      a) foo
      b) bar
      c) baz

Yada yada yada
~~~


#### A Single-Element Numbered List Which Is Contained in A List Is A Numbered List

This is a numbered list, including the `a) hello` part at the bottom.

~~~
Yada yada yada

1. Foo
   a) foo
   b) bar
   c) baz
2. Bar
   a) foo
   b) bar
   c) baz
3. Baz
   a) hello

Yada yada yada
~~~

This is a numbered list:

~~~
Yada yada yada

1986. Foo
      a) foo
      b) bar
      c) baz

Yada yada yada
~~~

### Consecutive Lists

The following example contains three paragraphs. The second paragraph contains two consecutive lists, a numbered list and a bulleted list:

~~~
Paragraph one...

Yada yada yada
1. fee
2. fie
-  foe
-  fum
Yada yada yada

Paragraph two...
~~~

### List Items Can Be Empty

This is gross and pointless, but banning this case would be worse. The following are all legal lists:

~~~
* foo
*
* bar

1. foo
2.
3. bar

* lorem
  * ipsum
  *
  * dolor
*
* sit
  *
  * amet

*
*
*

1.
2.
3.
~~~

### Numbered List Numbering Rules

*This section is highly technical, and can be [skipped](#simple-lists) or quickly skimmed by almost all authors. It's probably only interesting to someone writing a Markua Processor.*

There are a number of rules about what does and does not trigger the creation of a numbered list. These rules are designed to help authors stay sane when writing in Markua, and also to help implementors of Markua Processors stay sane. In all cases, the first number, letter or Roman numeral is the start of the list numbering. This never changes.

If, because of the correct application of these rules, a numbered list is not created, what happens is that a paragraph is created instead, with a forced line break for each single newline. In this instance, the output directly matches the input, including all the numbering.

In theory, Markua supports creating a numbered list when either of the following two conditions occur:

1. Every item in the list begins with a consecutive number, either increasing or decreasing.
2. Every item in the list begins with the same number.

This is not actually quite true.

See, the notion of "consecutive" is easy to explain and to check for decimal numbers, either in increasing or decreasing order. `1, 2, 3, ...`, `456, 457, 458, ...`, or `5, 4, 3` are all easily verified as consecutive, both by humans and computers.

However, Markua also supports numbered lists using uppercase and lowercase alphabetical numbering, as well as uppercase and lowercase Roman numeral numbering, and in increasing or decreasing order.

In the case of alphabetical numbering, checking "consecutive" is harder. It's relatively straightforward for the first 26 items, but then all bets are off. In case you're curious, here is the sequence used in HTML for increasing alphabetical numbering:

`a, b, ..., z, aa, ab, ..., az, ba, bb, ... bz, za, zb, ..., zz, aaa, aab, ..., aaz, aba, abb, ...`

In terms of Roman numerals, it's even worse. I'm sure that someone in a Classics department (or in the NFL) knows the algorithm by heart, but I don't.

So, what are Markua authors and implementors of Markua Processors to do?

Markua makes this simpler by specifying the following rules.

Markua *actually* supports creating a numbered list based on a different set of conditions based on the numbering type.

For decimal numbers, Markua actually supports creating a numbered list when either of the following two conditions occur:

1. Every item in the list begins with a consecutive number, either increasing or decreasing.
2. Every item in the list begins with `1.`

For uppercase and lowercase alphabetical numbering, Markua actually supports creating a numbered list when either of the following two conditions occur:

1. Every item in the list begins with a consecutive letter, followed by a period, and the lettering does not extend past `z.` for lowercase, or `Z.` for uppercase. (This way, implementors of Markua Processors don't need to check the `aa`, case, and authors writing in Markua don't need to remember it.)
2. Every item in the list begins with `a.` for lowercase letters or `A.` for uppercase letters.

These rules mean you can't start a list with `aa.` or higher. This is preferable to Markua having many variants of the Markdown `1986.` problem. If you want to write a paragraph starting with "AA.", to write a dramatic statement about either anti-aircraft fire or alcoholism, you would be really surprised to have created a single-element list beginning with "AA" instead!

For uppercase and lowercase Roman numeral numbering, Markua actually supports creating a numbered list when either of the following two conditions occur:

1. Every item in the list begins with a consecutive Roman numeral, followed by a period, and the lettering does not extend past `xii.` for lowercase Roman numerals or `XII.` for uppercase Roman numerals. To be clear, this means that the only valid consecutive lowercase Roman numerals are `i, ii, iii, iv, v, vi, vii, viii, ix, x, xi, xii`, and that the only valid consecutive uppercase Roman numerals are `I, II, III, IV, V, VI, VII, VIII, IX, X, XI, XII`.
2. Every item in the list begins with `i.` for lowercase Roman numerals or `I.` for uppercase Roman numerals.

The combination of the rules for Roman numeral numbering means that you can have an arbitrarily long Roman numeral list starting from `i.` or `I.`, but that implementors of Markua Processors don't need to write code to figure out whether `MCMLXXV` is a valid Roman numeral, and what the consecutive Roman numeral sequence after it is.

If you're wondering why I picked `xii` and `XII` for the last consecutive lowercase and uppercase Roman numerals to respect: this is Roman numeral 12, and the main usage of Roman numerals in modern life is in clock faces.

Speaking of clock faces, I have bad news for fans of watches and antique clocks:

* The only supported version of the Roman numeral 4 is the subtractive `iv` (in lowercase) or `IV` (in uppercase); the additive `iiii` or `IIII` form is not supported.
* The only supported version of the Roman numeral 9 is the subtractive `ix` (in lowercase) or `IX` (in uppercase); the additive `viiii` or `VIIII` form is not supported.

It turns out that the question of additive versus subtractive forms of Roman numerals is actually interesting; see [this article](http://mentalfloss.com/article/24578/why-do-some-clocks-use-Roman-numeral-iiii) and [this Wikipedia entry](https://en.wikipedia.org/wiki/Roman_numerals) for a starting point.

In Markua, list numbers must **all** either be **consecutive**, given the type of numbering that is used, or **the same as the first number**. Otherwise, the list is interpreted as a paragraph with a bunch of break tags in it, and lines starting with the numbers given. The principle is the following: the numbers which are shown in the manuscript must be the same as those in the output, or the numbers must be clearly intended to be numbered list numbers. Otherwise, a list will not be produced.

If you want to prevent a list from being created with consecutive numbered items separated by single newlines, the backslash escape in front of the period used in Markdown to prevent lists also works in Markua. However, it is needed a lot less often.

{#simple-lists}
## Simple Lists

Both bulleted and numbered lists can either be simple lists or complex lists. Whereas the distinction between bulleted and numbered lists was based on the list delimiter, simple and complex lists are distinguished by the indentation and newlines.

Yes, this distinction essentially comes down to the ancient computer science debate of tabs versus spaces.

**A simple list uses one tab per nested indentation level.**

If you use spaces for indentation, what you are creating is a complex list, which is discussed next.

Besides the formatting rules for bulleted or numbered lists, the rules for a simple list are:

* There are no newlines in list items. Each list item in a simple list is one paragraph with no forced line breaks or blank lines.
* You cannot insert resources with attribute lists in list items. These are inserted after forced line breaks or blank lines, both of which require newlines, and there are no newlines in list items of simple lists.
* There is a maximum of **four** levels of nesting of lists, including the outermost list. (So, you can have three levels of nested lists under each outermost list item.)
* If you try to nest a fifth level of nesting (or more), the Markua Processor must raise an error.
* The first indentation level is no indentation: it is at the left margin.
* You must use exactly one tab per nested indentation level.  (So, the number of tabs you can have is 0, 1, 2 or 3.)
* You cannot use spaces to indent list items. Simple lists only contain tabs.

This is an example of a simple list which has the maximum number (four) of levels of nested list:

~~~
1. foo
	a) lorem
		i. unus
			- one
			- two
			- three
		ii. duo
		iii. tres
	b) ipsum
	c) dolor
2. bar
3. baz
~~~

## Flat Lists

The examples of bulleted and numbered lists in the [Bulleted Lists](#bulleted-lists) and [Numbered Lists](#numbered-lists) sections above were *flat lists*, which did not contain any indentation.

Every item in a flat list is at the outermost level, and there are no newlines in list items. A flat list is a special case, in that it conforms to all the rules for *both* a simple list and a complex list.

A flat list is so simple that it is not just a simple list, it's also a complex list. *Whoa.*

## Complex Lists

Whereas simple lists use tabs for indentation and cannot have newlines within list items, **a complex list uses spaces for indentation levels and can have newlines within list items**.

Using spaces allows for a lot more complex formatting of list items which is still understandable, including lining up nested resources and multiple-paragraph list items. So, these are called complex lists not "spaces lists", since the distinguishing feature is the complexity supported by the spaces, not the spaces themselves.

Besides the formatting rules for bulleted or numbered lists, the rules for a complex list are:

* Complex lists only contain spaces. You cannot use tabs to indent list items or line up content in list items. If you like hitting the tab key, ensure that you set your text editor to convert tabs to spaces.
* Each list item in a complex list can be one or more paragraphs, and each paragraph can contain forced line breaks. Specifically, there can be forced line breaks (formed by single newlines) and blank lines (formed by exactly two consecutive newlines) in list items.
* You can insert resources with attribute lists in list items. These are inserted after forced line breaks or blank lines.
* After any forced line break or blank line, the content (including a nested list) must be lined up with the beginning of the content in the above line using the appropriate number of spaces (not tabs). This rule is discussed further in the [Complex List Indentation](#complex-list-indentation) section below.
* There is a maximum of **four** levels of nesting of lists, including the outermost list. So, you can have three levels of nested lists under each outermost list item.
* If you try to nest a fifth level of nesting (or more), the Markua Processor must raise an error.
* The first indentation level is no indentation: it is at the left margin.

A> Yes, this is one of the reasons why simple lists cannot contain newlines inside list items. If that was allowed, the natural thing to do would be to support using tabs and spaces to align complex content in those list items. However, what this would also result in would be that converting tabs to spaces could break a list: if we allowed tabs to be used to align subsequent paragraphs in a list item, then converting those tabs to spaces could, in certain cases, result in an incorrect number of spaces being used. This would then result in a valid list becoming an invalid list. A common text editor setting which modifies formatting in an invisible way should not be able to break a Markua document, so forcing tab-indented lists to be simple lists ensures that this is the case. This is preferable to either banning tabs (since many people prefer tabs) or to attempting to support complex lists using tabs (which would be both brittle and confusing).

As discussed, if you attempt to nest more than four levels of nesting, the Markua Processor must raise an error. However, if you violate the indentation rules or newline rules of both simple lists and complex lists, the Markua Processor must just interpret your list as normal non-list content, such as a paragraph with line breaks. The reason for this is simple: every block element which is not a list violates the rules for lists--otherwise it would be a list! So, the only "this is not a list" property which actually causes an error is an attempt to add more that four levels of nesting to a simple or complex list. Any other mistake just results in the list being not a list, in order to be more permissive about how Markua documents can be formatted.

### Complex List Examples

You can do everything with a complex list that you can do with a simple list. This is a complex list which is the equivalent of the nested list from the simple list example above:

~~~
1. foo
   a) lorem
      i. unus
         - one
         - two
         - three
      ii. duo
      iii. tres
   b) ipsum
   c) dolor
2. bar
3. baz
~~~

However, you can do a lot more with a complex list as well.

First, you can add optional blank lines between the items for readability.

Note that the same decision must apply for each list level: you can't have blank lines between some items in a list and not others. You can, however, have blank lines between items in one level but not in others. Here's an example of using blank lines in the outer list and in the first nested list, but not in the second and third nested lists:

~~~
1. foo

   a) lorem
      i. unus
         - one
         - two
         - three
      ii. duo
      iii. tres

   b) ipsum

   c) dolor

2. bar

3. baz
~~~

You can make multiple paragraph list items using blank lines, and add forced line breaks using single newlines:

~~~
1. This is the first paragraph in the first item in the list.

   This is the second paragraph in the first item in the list. It is followed by a nested list.

   a) lorem
      i. unus
         - This is part of the first list item in a nested list.
           This is still part of the first list item in a nested list, with a forced line break.
         - two
         - three
      ii. duo
      iii. tres

   b) ipsum

   c) dolor

2. bar

3. baz
~~~

Note that the amount of space to indent is determined by the content, and that is determined by the width of the number:

~~~
9. This is the first item in the list.
   This is still part of the first item in the list.
   a) lorem
   b) ipsum
   c) dolor
10. This is the second item in the list.
    This is still part of the second item in the list.
    a) lorem
    b) ipsum
    c) dolor
~~~

This is a numbered list which contains five list items. It includes an inline code resource, a local code resource, and multiple-line list items:

~~~
1. This is part of the first item in the list.
   ```ruby
   puts "hello"
   ```
   This is still part of the first item in the list.
2. This is the second item in the list.
   {format: ruby}
   ![Hello, World](hello.rb)
   This is still part of the second item in the list.
3. This is the third item in the list.
   This is still part of the third item in the list.
4. This is the fourth item in the list.
   This is still part of the fourth item in the list.
5. This is the fifth item in the list.
~~~

This is a bulleted list with the same complexity:

~~~
* This is part of the first item in the list.
  ```ruby
  puts "hello"
  ```
  This is still part of the first item in the list.
* This is the second item in the list.
  {format: ruby}
  ![Hello, World](hello.rb)
  This is still part of the second item in the list.
* This is the third item in the list.
  This is still part of the third item in the list.
* This is the fourth item in the list.
  This is still part of the fourth item in the list.
* This is the fifth item in the list.
~~~

Neither the numbered or bulleted list above had multiple paragraphs in it, just forced line breaks. This is what those lists look like with multiple paragraphs instead...

This is the numbered list version:

~~~
1. This is part of the first item in the list.

   ```ruby
   puts "hello"
   ```

   This is still part of the first item in the list.

2. This is the second item in the list.

   {format: ruby}
   ![Hello, World](hello.rb)

   This is still part of the second item in the list.

3. This is the third item in the list.

   This is still part of the third item in the list.

4. This is the fourth item in the list.

   This is still part of the fourth item in the list.

5. This is the fifth item in the list.
~~~

This is the bulleted list version:

~~~
* This is part of the first item in the list.

  ```ruby
  puts "hello"
  ```

  This is still part of the first item in the list.

* This is the second item in the list.

  {format: ruby}
  ![Hello, World](hello.rb)

  This is still part of the second item in the list.

* This is the third item in the list.

  This is still part of the third item in the list.

* This is the fourth item in the list.

  This is still part of the fourth item in the list.

* This is the fifth item in the list.
~~~

To reiterate, single blank lines (two newlines) make paragraphs, and forced line breaks (single newlines) stay in the same paragraph.

~~~
Here's a paragraph before the list.

1. This is the first paragraph in the first list item. Yay!

   This is a second paragraph in the first list item.

2. The second list item is boring.

3. The third list item has three paragraphs. This is the first paragraph.
   This is still part of the first paragraph.

   Here's the second paragraph in the third list item.

   Here's the third paragraph in the third list item.

Here's a paragraph after the list.
~~~

### Blank Lines in Complex Lists

#### Single Blank Lines Within Complex List Items

It is legal to add single blank lines in between list items, to separate the list item into multiple paragraphs.

If there is a blank line within a list item, there **must** also be a blank line at the end of the list item.

The reason for this is simple: since paragraphs are separated by blank lines, and since lists support multiple-paragraph list items, you need to add a blank line at the end of a multiple-paragraph list item for symmetry. Otherwise, you can write something ugly like this:

~~~
1. foo

   bar
2. baz
~~~

The above example is so ugly it's not a legal Markua complex list, and instead must be interpreted as paragraphs.

The correct way to write it is:

~~~
1. foo

   bar

2. baz
~~~

#### Two Consecutive Blank Lines End A Complex List

Whereas one blank line can be used in between list items for spacing or between other list item content to separate it into paragraphs, two blank lines always end a list and start a new block element, such as a paragraph or a new list.

There is no reason to be able to add two blank lines in between list items. However, there are reasons to wish to have two lists in a row in a Markua document. So, two blank lines in between two list items stops the previous list and starts a new list. There is no need to use some kind of garbage syntax to separate lists--just add an extra blank line.

Note, however, that two blank lines between single-element numbered lists would actually not produce two numbered lists since, again, in Markua single-element numbered lists *are not lists*.

This all sounds a bit complex, but it actually results in behaviour which is as unsurprising as possible to the author, and a lot less surprising than standard Markdown. This is shown by the following examples...

This is one flat list, which is both as simple list and a complex list:

~~~
* list one item one
* list one item two
* list one item three
~~~

This is one list. Since there are blank lines, it's a complex list:

~~~
* list one item one

* list one item two

* list one item three
~~~

These are two flat lists. Again, flat lists are both simple lists and complex lists:

~~~
* list one item one
* list one item two
* list one item three


* list two item one
* list two item two
* list two item three
~~~

These are two complex lists:

~~~
* list one item one

* list one item two

* list one item three


* list two item one

* list two item two

* list two item three
~~~

These are two flat lists. The first is a one-element list; the second is a three-element list:

~~~
* list one item one


* list two item one
* list two item two
* list two item three
~~~

These are also two flat lists. The first is a one-element list; the second is a three-element list:

~~~
* list one item one


* list two item one

* list two item two

* list two item three
~~~

These are two flat lists:

~~~
1. list one item one
2. list one item two
3. list one item three


1. list two item one
2. list two item two
3. list two item three
~~~

These are two complex lists:

~~~
1. list one item one

2. list one item two

3. list one item three


1. list two item one

2. list two item two

3. list two item three
~~~

This is a normal paragraph followed by a flat list, since single-element numbered lists are not lists. This example shows the correctness of this decision:

~~~
1986. What a great season.


1. list one item one
2. list one item two
3. list one item three
~~~

This is also a normal paragraph followed by a flat list, since, again, single-element numbered lists are not lists. This highly-contrived example will confuse anyone reading your manuscript:

~~~
1. This is actually a paragraph not a list, since single-element numbered lists are not lists.


2. list one item one
3. list one item two
4. list one item three
~~~

This is also a normal paragraph followed by a complex list, but this more-contrived example would confuse anyone reading your manuscript:

~~~
1. This is actually a paragraph not a list.


1. list one item one

2. list one item two

3. list one item three
~~~

Again, this is also a normal paragraph followed by a complex list, but this even-more-contrived example would confuse anyone reading your manuscript:

~~~
1. This is actually a paragraph not a list.


2. list one item one

3. list one item two

4. list one item three
~~~

### Inline Code Resources Inside List Items

When inserting a code resource as an inline resource in a list item, it must be indented to line up with the list item content it is a sibling of.

For example, in the following list, the inline code blocks are indented by three spaces:

~~~
1. This is part of the first item in the list.

   ```ruby
   puts "hello"
   ```

   This is still part of the first item in the list.

   ```java
   public class Hello {
       public static void main(String[] args) {
           System.out.println("hello");
       }
   }
   ```

2. This is the second item in the list.
~~~

When the code itself is output, the number of spaces that the list was indented by must be subtracted from the output by the Markua Processor.

So, when this list is output, in the first example, `puts "hello"` and `public class Hello {` would both start with no indentation, while the `       public static void main(String[] args) {` line would be output with 4 spaces of indentation, not 7.

{#complex-list-indentation}
### Complex List Indentation

The rule for complex list indentation is as follows:

"After any forced line break or blank line, the content (including a nested list) must be lined up with the beginning of the content in the above line using the appropriate number of spaces (not tabs). This rule is discussed further in the [Complex List Indentation](#complex-list-indentation) section below."

This rule is very strict, and it has a number of consequences.

First, I want to explain why this rule is the way it is.

The goal is to ensure that all complex lists look the same to every author or editor who works on a manuscript, regardless of their tab settings. Complex lists are, well, complex, and being able to reason clearly about them is important. So, the first goal of the formatting rules is to ensure maximum readability. This is why tabs are banned from complex lists.

Next, in terms of the amount of indentation.

The amount of indentation inside a complex list item is actually *not* arbitrary; **it is completely determined by how many spaces you need to line up with the content in the line above the list item**. For a bulleted list this will always be 2 spaces (1 for the `*` or `-`, followed by 1 for the space); for a numbered list this will always be at least 3 spaces (1 or more for the number/letter/Roman numeral, 1 for the `.` or `)`, and 1 for the space).

Now, this has an important and slightly annoying consequence: while nested lists will always line up with the content of the list item, there are certain situations in which nested lists will not line up with each other.

Specifically, there are three of them which are noteworthy:

1. Numbered lists with decimal numbers which go above 9
2. Numbered lists with uppercase or lowercase letters which go above z
3. Numbered lists with Roman numerals

These situations are shown below.

Numbered lists with decimal numbers which go above 9:

~~~
8. foo
   bar
   a) lorem
   b) ipsum
9. foo
   bar
   a) lorem
   b) ipsum
10. foo
    bar
    a) lorem
    b) ipsum
11. foo
    bar
    a) lorem
    b) ipsum
~~~

Numbered lists with uppercase or lowercase letters which go above z:

~~~
y) foo
   bar
   a) lorem
   b) ipsum
z) foo
   bar
   a) lorem
   b) ipsum
aa) foo
    bar
    a) lorem
    b) ipsum
ab) foo
    bar
    a) lorem
    b) ipsum
~~~

Lists with Roman numerals:

~~~
i) foo
   bar
   a) lorem
   b) ipsum
ii) foo
    bar
    a) lorem
    b) ipsum
iii) foo
     bar
     a) lorem
     b) ipsum
iv) foo
    bar
    a) lorem
    b) ipsum
v) foo
   bar
   a) lorem
   b) ipsum
~~~

Now, frankly, the Roman numeral example looks pretty bad. However, nesting anything inside Roman numerals looks bad. For example, if complex lists in Markua worked with a constant amount of spaces, then they would not line up with the content of the list items.

~~~
This is not a Markua list, and will be output a really ugly paragraph with a bunch of forced line breaks:

i) foo
   bar
   a) lorem
   b) ipsum
ii) foo
    bar
   a) lorem
   b) ipsum
iii) foo
     bar
   a) lorem
   b) ipsum
iv) foo
    bar
   a) lorem
   b) ipsum
v) foo
   bar
   a) lorem
   b) ipsum

Again, the above is not a list.
~~~

So, if you like Roman numerals, my personal advice is to use them either in simple lists (since tabs always line up) or as the lowest level of indentation in a complex list.

{#definition-lists}
# Definition Lists

Definition lists are also supported in Markua. Definition lists are related to lists, but they are neither flat, simple nor complex. Instead, they are what they are: definition lists.

To define a definition list in Markua, use the following syntax:

~~~
term 1
: definition 1

term 2
: definition 2
~~~

There can be one to three spaces after the colon, or one tab.

A definition list can provide multiple definitions for a term:

~~~
term 1
: definition 1a
: definition 1b

term 2
: definition 2
~~~

A single term definition list is a definition list, regardless of how many definitions for the term exist:

~~~
term
: definition
~~~

Finally, like list items in complex lists, each definition list item can contain newlines and multiple paragraphs. What you do here is indent the subsequent lines by the same amount of space as the initial line. (If you do not indent the subsequent lines, then you're ending the definition list and just starting a new paragraph.) As with list items, one newline is a forced line break; two newlines is a new paragraph:

You can nest resources inside a definition list. You cannot nest definition lists inside definition list items, however--that would be highly confusing.

~~~
Here's a paragraph before the definition list.

one
: This is the first definition of one. It's one paragraph.
: This is the second definition of one. It's two paragraphs.

  This is a second paragraph in the second definition of one.

two
: The second definition list item is simple.

three
: The third definition list item has three paragraphs.
  This is definition still part of the first paragraph.

  Here's the second paragraph in the third definition list item.

  Here's the third paragraph in the third definition list item.

ruby
: Here is some Ruby code.

  ```ruby
  puts "hello"
  ```

  Here is some more Ruby code.

  {format: ruby}
  ![Hello, World](hello.rb)

  That's as simple as it gets.

Here's a paragraph after the list.
~~~

Just as with list items, any leading whitespace after the line break is used to continue the definition list item, and is thus ignored. Like list items, definition list items are not poetry.

With the rise of mobile and the narrower screen reading experience becoming the new default, definition lists may end up being more useful than tables in many Markua documents.

Finally, with definition lists, one thing you often want to do is link to a specific definition, not just to the list itself. This is useful to do, since in a document with many definitions, it's helpful if the reader scrolls to the right spot or opens to the right page.

To do this, just define a span id on the element itself, and then link to it.

~~~
foo{#foo}
: This is foo.

bar{#bar}
: This is bar.
~~~

Note that if you define an id attribute above the first definition list item, what you are doing is defining an id on the entire definition list. As such, this does not work on any subsequent list item: in the following definition list, the `{#definitions}` is the id of the definition list. It is not the id of foo.

~~~
{#definitions}
foo{#foo}
: This is foo.

bar{#bar}
: This is bar.
~~~

To be clear, the following is not legal Markua:

~~~
This is not legal.

foo
: This is foo.

{#bar}
bar
: This is bar.

This is not legal.
~~~

If there was an id above foo, it would be legal, since it would be the id of the entire definition list. However, the id attribute above bar is not legal. A Markua Processor should ignore this id, and add an error to the list of errors.

# Block Elements

Broadly speaking, Markua documents consist of three things: block elements, span elements and metadata. Paragraphs, headings, figures and lists, all discussed earlier in this specification, are examples of block elements. Block elements are separated from each other by at least one blank line.

These are the remaining block elements defined by Markua.

{#scene-breaks}
## Scene Breaks (`* * *`)

In fiction, scene breaks are sometimes added between paragraphs in a chapter to denote a break in context. To add a scene break, add three or more asterisks on a line by themselves, with or without spaces between them. For example, `***`, `* * *` and `**********` on a line by themselves all produce a scene break.

Example:

~~~
This is before the scene break.

* * *

This is after the scene break.
~~~

Markua Processors can take great liberties in how they output scene breaks. They can output a set number of asterisks, or an image, or whatever else they choose. Note that typically a scene break is not followed by a page break. However, to add this, you can simply add a manual page break after it.

{#page-breaks}
## Page Breaks (`===`)

Three or more equals signs on a line by themselves, with or without spaces between them (e.g. `===`, `= = =`, `==========`, etc.), produce a page break.

Page breaks are discouraged in Markua: when you're writing, unsemantic formatting is procrastination, and most page breaks are exactly this. Much like width and height attributes on images, however, page breaks are supported in Markua due to pragmatic concerns.

Here is an example showing a page break following a paragraph, and a page break following a scene break:

~~~
This is before the page break.

===

This is on a new page, after the forced page break. It has a scene break and then a page break after it.

* * *
===

This is on a new page, after the scene break and the forced page break.
~~~

## Blockquotes (`>`)

Blockquotes in Markdown are created by prefacing lines with `> `, i.e. a greater than character followed by a space:

~~~
This is the first paragraph.

> This is a blockquote.
>
> It is outside the paragraphs.

This is the second paragraph.
~~~

Blockquotes in Markua are created in one of two ways:

1. By prefacing lines with `> `, i.e. a greater than character followed by a space.
2. By wrapping the blockquote in `{blockquote}` ... `{/blockquote}`

Option #1 is preferable for short quotes; option #2 is easier on authors for really long quotes.

Like figures and tables, blockquotes can be inserted in the middle of a paragraph or as a sibling of it.

A> For non-programmers: I'm calling these things "blockquotes", not "block quotes", since their origin is in Markdown [blockquotes](http://daringfireball.net/projects/markdown/syntax#blockquote), and since they can be inserted by typing `{blockquote}`. If I called them "block quotes", that might encourage someone to incorrectly try to insert them as `{block quote}`, which would not work.

These Markua blockquotes are siblings of the paragraphs:

~~~
This is the first paragraph.

> This is a blockquote.
>
> It is outside the paragraphs.

This is the second paragraph.

{blockquote}
This is a blockquote.

It is outside the paragraphs.
{/blockquote}

This is the third paragraph.
~~~

These Markua blockquotes are nested in the paragraph:

~~~
This is the first paragraph.

This is the second paragraph.
> This is a blockquote
>
> It is inside the second paragraph.
This is part of the second paragraph.
{blockquote}
This is a blockquote.

It is inside the second paragraph.
{/blockquote}
This is part of the second paragraph.

This is the third paragraph.
~~~

A blockquote can contain other block-level elements, most commonly paragraphs.

If you are using the `{blockquote}` ... `{/blockquote}` approach, this is trivial: just pretend you're in a normal paragraph, and the syntax is the same.

If you are using the Markdown approach of `>`, then to start a new block level element within a blockquote, just put a line starting with a `>` followed by a space, followed by the block level element. It is equivalent to placing a `>` and a space in front of every line of the paragraphs.

In Markdown, a single newline inside a blockquote (where both lines are preceded by a `>` and a space) adds a single space. In Markua, however, a single newline inside a blockquote adds a forced line break. This is identical to how single newlines inside a normal Markua paragraph function. This is discussed at length in the [Single Newlines](#single-newlines) section earlier. Note that it means you **cannot** manually wrap blockquotes to make them look nicer. Manually wrapping blockquotes is tedious and discourages editing of your own work. If you have really long blockquotes which span multiple paragraphs, the `{blockquote}` syntax is more pleasant to write in.

Blockquotes can be multi-paragraph. To create a multi-paragraph blockquote, you need to separate each paragraph with a line containing a `>` and (optionally) whitespace.

If a blockquote contains headings, these headings may be formatted by a Markua Processor differently than normal headings. Finally, if a Markua Processor is automatically generating a [Table of Contents](#toc) from chapter and section headings, any headings inside blockquotes should be ignored.

A blockquote can have a citation. This is done via the attribute list, which can include a `cite` attribute with the text of the citation and a `url` attribute with the URL of the citation. If both are specified, the text of the citation is linked to the URL. If only the `cite` attribute is specified it is shown as text; if only the `url` is specified it is inserted as text with a link to itself.

The attribute list can be used regardless of which syntax is used to insert the blockquote:

~~~
Lots of people have opinions about software.

Here's the most famous recent one:

{cite: "Marc Andreessen", url: "http://www.wsj.com/articles/SB10001424053111903480904576512250915629460"}
> Software is eating the world.

It's quoted a lot, so let's quote it again:

{blockquote, cite: "Marc Andreessen", url: "http://www.wsj.com/articles/SB10001424053111903480904576512250915629460"}
Software is eating the world.
{/blockquote}

That's it!
~~~

{#asides}
## Asides (`A>` or `{aside}`)

Since Markua is for writing books, including technical books, it needs not just a syntax for blockquotes--it also needs a syntax for asides and for blurbs. These syntaxes are very similar to the Markua syntax for blockquotes. Like blockquotes, any headings inside asides or blurbs do not show up in a Table of Contents (if one is present), and they can also be formatted differently by Markua Processors.

We will consider asides first.

Asides are typically short or long notes in books which are tangential to the main idea--sort of like footnotes, but in the body text itself. In technical books, quite often they are formatted in a box. Asides can span multiple pages.

The syntaxes for asides are very similar to blockquotes:

1. By prefacing lines with `A> `, i.e. an `A`, then a greater than character (`>`), then a space.
2. By wrapping the aside in `{aside}` ... `{/aside}`

Option #1 is preferable for short asides; option #2 is easier on authors for really long asides.

For consistency with blockquotes, asides can be siblings of paragraphs or nested in them.

Here's a short aside:

~~~
A> This is a short aside.
~~~

Here's a longer aside, which also contains a heading:

~~~
A> # A Longer Aside
A>
A> This is a longer aside.
A>
A> It can have multiple paragraphs.
A>
A> The `A> ` stuff can get tedious after a while.
A>
A> This is why the `{aside}` syntax exists.
~~~

Here's a longer aside using the `{aside}` syntax, which also contains a heading:

~~~
{aside}
# A Note About Asides

This is a longer aside.

It can have multiple paragraphs.

Asides can also have headings, like this one does.

Multi-paragraph asides are more pleasant using this syntax.
{/aside}
~~~

{#blurbs}
## Blurbs (`B>` or `{blurb}`)

Blurbs are like asides, but shorter. A blurb is not intended to span multiple pages of output.

The syntaxes for blurbs are very similar to asides:

1. By prefacing lines with `B> `, i.e. a `B`, then a greater than character (`>`), then a space.
2. By wrapping the blurb in `{blurb}` ... `{/blurb}`

Examples:

~~~
B> This is a short blurb.
~~~

~~~
B> # A Longer Blurb
B>
B> This is a longer blurb.
B>
B> It can have multiple paragraphs.
~~~

~~~
{blurb}
#A Longer Blurb

This is a longer blurb.

It can have multiple paragraphs.
{/blurb}
~~~

### Supported Attributes for Blurbs

Blurbs also have support for an attribute list, which can contain a `class` attribute as well as other implementation-specific "extension attributes".

#### Blurb `class` Types

Markua has its origin in authoring computer programming books. In computer programming books, there are a number of blurb types which are a de facto standard:

* `center`
* `discussion`
* `error`
* `information`
* `tip`
* `warning`

These blurb types can be set on a blurb as its `class` attribute. A Markua Processor can optionally style these blurbs appropriately based on the class, for example by adding custom icons for each class of blurb.

Here's how this looks with the `B> ` syntax:

~~~
{class: warning}
B> This is a warning!
~~~

Here's how this looks with the `{blurb}` syntax:

~~~
{blurb, class: warning}
This is a warning!
{/blurb}
~~~

A> The attribute list must either directly precede the `B>` with no blank line between it and the `B>`, or it must be combined with the `{blurb}` block opening. It is not legal Markua syntax to have an attribute list preceding a `{blurb}` block opening like this:
A> `{class: warning}`
A> `{blurb}`

### Syntactic Sugar for Specific Blurb Classes: `D>`, `E>`, `I>`, `Q`, `T`, `W>`, `X>`

Having to constantly type `{class: warning}` in a computer programming book with a number of warnings would get tedious, as would any of the other blurb classes listed above.

So, Markua defines a standard shorthand syntax for these classes of blurbs. With this syntax, you use a different letter than `B` in the `B>`, to create a blurb with the appropriate `class`.

These are the syntactic sugar values you can use which have a heritage in computer programming books:

| Sugar | Equivalent To a B> With |
|-------|-------------------------|
| `D>`  | `{class: discussion}`   |
| `E>`  | `{class: error}`        |
| `I>`  | `{class: information}`  |
| `Q>`  | `{class: question}`     |
| `T>`  | `{class: tip}`          |
| `W>`  | `{class: warning}`      |
| `X>`  | `{class: exercise}`     |

Examples:

~~~
D> This is a discussion blurb.

E> This is an error blurb.

I> This is an information blurb.

Q> This is a question blurb.

T> This is a tip blurb.

W> This is a warning blurb.

X> This is an exercise blurb.
~~~

These are equivalent to:

~~~
{class: discussion}
B> This is a discussion blurb.

{class: error}
B> This is an error blurb.

{class: information}
B> This is an information blurb.

{class: question}
B> This is a question blurb.

{class: tip}
B> This is a tip blurb.

{class: warning}
B> This is a warning blurb.

{class: exercise}
B> This is an exercise blurb.
~~~

These are *also* equivalent to:

~~~
{blurb, class: discussion}
This is a discussion blurb.
{/blurb}

{blurb, class: error}
This is an error blurb.
{/blurb}

{blurb, class: information}
This is an information blurb.
{/blurb}

{blurb, class: question}
This is a question blurb.
{/blurb}

{blurb, class: tip}
This is a tip blurb.
{/blurb}

{blurb, class: warning}
This is a warning blurb.
{/blurb}

{blurb, class: exercise}
This is an exercise blurb.
{/blurb}
~~~

Note that `Q>` and `X>` are a bit controversial:

* `Q>` defines a blurb which is formatted like a question, but `{quiz}` (discussed later) defines a quiz, and quizzes have actual numbered questions in them. It is unfortunate that the words `quiz` and `question` both start with the letter `Q`, and that the `question` blurb is not the same thing as a question in a quiz.
* `X>` defines a blurb which is formatted like an exercise, but `{exercise}` (discussed later) defines a structured exercise similar to a quiz. It is unfortunate that the term "exercise" is used for both.

There are issues, in both cases. However, the alternative is worse: removing the `Q>` or `X>` syntax would cause issues for every author who is familiar with, or has a manuscript formatted in, Leanpub Flavoured Markdown. This is not worth the reduced functionality, just to avoid one possible bit of confusion and one naming collision. So, the `Q>` and `X>` blurb syntactic sugar do exist, as do the `{class: question}` and `{class: exercise}` full blurb syntaxes.

Also note that nothing in this section defines what a Markua Processor must *do* with the given class of blurb. Leanpub, for example, uses it to add an appropriate icon from [Font Awesome](https://fortawesome.github.io/Font-Awesome/) at the left of the blurb, but other Markua Processors are free to do something different.

Finally, note that specifying a class in metadata overrides what the syntactic sugar does:

~~~
{class: tip}
W> This is a tip blurb, not a warning blurb.
~~~

A Markua Processor is free to either override this silently, or to raise an error if this happens.

### Using Blurbs to Center Text with `C>`

You can also use a blurb to center text.

The following two ways to do this are equivalent:

~~~
C> This is a centered blurb.

{class: center}
B> This is a centered blurb.
~~~

This is the only way to center text in Markua.

Unlike other blurb types which have their origin in technical books, centering text has a wide range of uses. So, it could have been thought of as something different than a blurb. However, in terms of its behaviour and the way it's inserted, centered text is a blurb--whether it's inserted via syntactic sugar or via a class attribute on a normal blurb element. So, it's discussed here.

### Using Extension Attributes on Blurbs to add `icon` Support

Markua Processors must ignore any attributes which they do not understand.

Because of this, Markua attribute lists can contain any number of extension attributes. An extension attribute is an attribute which is not defined in the Markua specification, but which is understood by some specific Markua Processor.

As an example of an extension attribute, Leanpub adds an `icon` attribute to blurbs. Markua does not specify that a blurb must support an `icon` attribute, or what it would mean if it did. However, Leanpub understands an `icon` attribute to reference an icon from Font Awesome. The value of this attribute is assumed to be the name of an icon in Font Awesome, without the `fa-` prefix.  So, in Leanpub, you can do this:

~~~
{icon: car}
B> You can't spell carbon without it!

{icon: leanpub}
B> Yes, we're in Font Awesome!

{icon: github}
B> So is GitHub, of course. Unicorns.
~~~

In Leanpub, this will produce a nice icon of a car, using the Font Awesome icon. In a Markua implementation that does not understand the icon attribute, nothing will be generated for that attribute--it will be functionally equivalent to the attribute not being present.

{#inserting-into-paras}
## Inserting Block Elements Inside Paragraphs

Many block elements such as lists and figures can also be inserted nested in a paragraph. The way this is done is to add single newlines instead of blank lines.

This example shows a list nested in the middle of a paragraph:

~~~
This is paragraph one.

This sentence is in paragraph two.
* this list is
* part of
* paragraph two
This sentence is also in paragraph two.

This is paragraph three.
~~~

This example shows a figure which is an inline code resource nested in the middle of a paragraph:

~~~
This is paragraph one.

This sentence is in paragraph two.
```ruby
puts "hello world"
```
This sentence is also in paragraph two.

This is paragraph three.
~~~

This example shows a figure which is a local code resource nested in the middle of a paragraph:

~~~
This is paragraph one.

This sentence is in paragraph two.
{format: ruby}
![Hello, World](hello.rb)
This sentence is also in paragraph two.

This is paragraph three.
~~~

This example shows figures which are local or web image resources nested in the middle of paragraphs. Note that as with all figures, the square bracket text in both cases is the figure caption (not alt text):

~~~
This is paragraph one.

This sentence is in paragraph two.
![A Piece of Cake](cake.jpg)
This sentence is also in paragraph two.

This sentence is in paragraph three.
{alt: "a slice of chocolate cake"}
![A Piece of Cake](http://markua.com/cake.jpg)
This sentence is also in paragraph three.

This is paragraph four.
~~~

It is possible to insert a block element as the last part of a paragraph by adding a single newline before it, but a blank line after it:

~~~
This is paragraph one.

This sentence is in paragraph two.
* this list is
* part of
* paragraph two

This is paragraph three.
~~~

This works for most block elements, like lists, figures and tables. It does **NOT** work for definition lists, since those rely on blank lines in between elements.

## Quizzes and Exercises

The final two block elements that Markua provides are quizzes and exercises. These two block elements are very special, however, in that they enable a single Markua document to construct everything from traditional textbooks and paper-based quizzes to entire online courses (or MOOCs). So, they're discussed in [their own chapter](#courses).

# Span Elements

We've already seen many examples of span elements in this specification, especially in the resources section showing resources inserted as spans. These are the rest of them...

## Links

Markua's hyperlink support is a subset of that of Markdown. The **inline** link syntax is supported, as is the **automatic link** shortcut.

### Inline Links

The normal way to create a link is as follows:

~~~
[link text](absolute_url)
~~~

Example:

~~~
Markua was developed at [Leanpub](http://leanpub.com).
~~~

### Automatic Links

To create a link where the text displayed for the link text is the URL itself, the automatic link syntax can be used. In this syntax, an absolute URL is enclosed in angle brackets.

~~~
Some text <absolute_url> some text.
~~~

Example:

~~~
Markua was developed at <http://leanpub.com>.
~~~

## Explicitly Creating Spans with `[`...`]`

Surrounding text in square brackets can be useful not just for giving it a URL to link to. If you wish to add attributes to an arbitrary span of text, you can create an arbitrary span of text using square brackets and then add an attribute list immediately afterward:

~~~
Some text [then a span]{and: an, attribute: list} attached to the span.
~~~

You can use any attribute list on this span, and you can also just use the id syntactic sugar `{#theid}` on this span. The most common uses of this are to add `id`s or index entries, which are discussed later.

Note, however, that you cannot start a normal span with a caret (`^`): this creates a `[^footnote]` instead. (Footnotes are discussed below.)

### Sometimes a Square Bracket is Just a Square Bracket

If there are no round brackets or curly braces immediately after some text in square brackets, the text in square brackets is just that: text in square brackets. In this case, the square brackets are output as normal text.

This is useful when you want to [sic.] something, etc.

## Footnotes and Endnotes

### Footnotes

Books often have footnotes.

To add a footnote, you insert a footnote tag using square brackets, a caret and the tag, like this:

~~~
This has a footnote[^thenote].
~~~

Then, you define the footnote later in the document, using the same square brackets, caret and tag, followed by a colon, a space and the footnote definition:

~~~
[^thenote]: This is the footnote content.
~~~

If you wish to write multiple paragraphs in the footnote, you must indent the subsequent paragraphs by four spaces or one tab:

~~~
This has a footnote[^thenote].

Here is some unrelated text.

[^thenote]: This is the first paragraph of footnote content.

    This is the second paragraph of footnote content.

Here is some more unrelated text.
~~~

Whether the numbering of footnotes restarts every chapter is something that can be specified by the [`restart-footnote-numbering`](#setting-keys-and-values) setting.

### Endnotes

Books often have endnotes. Sometimes these are instead of footnotes, but other times, these are in addition to footnotes. So, it makes sense for Markua to define separate syntaxes for both, rather than just defining one "footnote or endnote" syntax and letting the author pick whether the notes are footnotes or endnotes via a global setting.

To add an endnote, you insert an endnote tag using square brackets, two carets and the tag, like this:

~~~
This has an endnote[^^thenote].
~~~

Endnotes are like footnotes, but happier (`^^`).

Then, you define the endnote later in the document, using the same square brackets, two carets and tag, followed by a colon, a space and the endnote definition:

~~~
[^^thenote]: This is the endnote content.
~~~

Just as with footnotes, if you wish to write multiple paragraphs in an endnote, you must indent the subsequent paragraphs by four spaces or one tab.

Whether the numbering of endnotes restarts every chapter is something that can be specified by the [`restart-endnote-numbering`](#setting-keys-and-values) setting.

### Single Reference to Footnotes and Endnotes

You can only refer to a footnote or endnote once. You can't define a footnote or endnote in one place and refer to it multiple times in the same Markua document. If you wish to refer to a parenthetical piece of text from multiple places in a Markua document, the best approach is to put it in a section (or sub-section, sub-sub-section, etc.) or aside and refer to it from multiple places using a [crosslink](#crosslinks).

### Footnotes and Endnotes Support Required for Paragraphs Only

A Markua Processor must support footnote and endnote references inserted in normal paragraph content. However, that's it.

However, sometimes authors want to get creative with their footnotes and endnotes. Sometimes they want to add them in headings, or in footnotes or endnotes themselves. This latter style has been used on rare occasions, most notably by David Foster Wallace.

However, supporting inserting footnotes and endnotes in places other than normal paragraph content puts a hugely increased burden on implementors of Markua Processors. As such, there is no requirement for a Markua Processor to support inserting a footnote or endnote anywhere other than in normal paragraph content.

Authors should **not** assume that a particular Markua Processor supports inserting a footnote or endnote anywhere other than in normal paragraph content unless its documentation specifically states that it does. For example, Leanpub only supports inserting footnotes or endnotes in normal paragraph content.

A> In software, [abstractions leak](https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/). Leanpub uses LaTeX for its PDF generation, and presumably many other Markua Processors will as well. In LaTeX, inserting footnotes or endnotes in places like headings, footnotes or endnotes is very problematic. So, it's optional. The best thing about writing a specification for something you are implementing is that there is often a very easy solution to a very difficult implementation problem!

{#crosslinks}
## Crosslinks and ids

There are two parts to making a crosslink.

1. Define an id.
2. Reference that id with a crosslink.

### Defining an id

There are two ways to define an id:

1. Using an id attribute `{id: some-id}`
2. Using a shorter "syntactic sugar" approach: `{#some-id}`

The shorter "syntactic sugar" approach is usually preferred. However, it can look a bit odd in an attribute list with other attributes in it. So, in that case, the `{id: some-id}` syntax is preferred.

W> Note for Leanpub authors: The `{#some-id}` syntax does not currently work when there are other attributes in the attribute list. So, in that case, you must currently use the `{id: some-id}` syntax if you are adding other attributes in a larger attribute list. You currently **CANNOT** add the `{#some-id}` to an attribute list.

In terms of the value of an `id`, it has some special restrictions:

1. The first character in the `id` has to be a lowercase or uppercase letter, i.e. `[a-zA-Z]` if you think in regular expressions.
2. The remaining characters in the `id` have to be a lowercase or uppercase letter or a digit or a hyphen (-) or an underscore (_).
3. You can only define an `id` value once in an entire Markua document, even one that is split over multiple files.

These restrictions ensure that your `id`s can then be linked to by a crosslink from anywhere in the Markua document.

The id needs to be defined on either a block or span element.

A> If an id is defined with an invalid name, the Markua Processor must ignore it and log an error.

#### Defining an id on a Block Element

To define an id on a block element like a paragraph, figure, heading or even a definition list item, you simply stick the id definition on a line above the start of the block element. Note that exactly one newline must separate the attribute list from the block element--if two newlines are used, the attribute list will be interpreted as a directive, and the id won't be correctly applied.

Here's how to use the attribute list syntax to define an id attribute:

~~~
{id: some-id}
This is a paragraph with the id of `some-id`.
~~~

Here's how to use the shorter "syntactic sugar" approach to define an id attribute:

~~~
{#some-id}
This is a paragraph with the id of `some-id`.
~~~

#### Defining an id on a Span Element

To define an id on a span element you simply add the id definition immediately after the span element.

Here's how to use the attribute list syntax to define an id attribute on a span element:

~~~
The word Markua{id: markua} has an id.

Leanpub is based in **Victoria, BC, Canada**{id: victoria}.
~~~

Here's how to use the shorter "syntactic sugar" approach to define an id attribute:

~~~
The word Markua{#markua} has an id.

Leanpub is based in **Victoria, BC, Canada**{#victoria}.
~~~

Here's how to define an id on a custom span:

~~~
The [quick sly fox]{#quick_sly} jumped over the lazy dogs.
~~~

If you want to define an id on a span while also defining other attributes like index entries, the `id:` syntax must be used in a full attribute list:

~~~
The [quick sly fox]{id: quick_sly, i: "Fox, Sly and Quick"} jumped over the lazy dogs.
~~~

### Referencing an `id` With a Crosslink

Regardless of how you defined the id, you then link to it to create a crosslink. To do this, you use the `#` character and the id in a link:

~~~
[link text](#some-id)
~~~

This syntax is intended to be reminiscent of HTML anchor tags, not of `h1` titles in Markua.

Note that order of definition and use does not matter: crosslinks will work regardless of whether the `id` is defined before or after the use of it.

### Rules for `id`s and Crosslinks

* If a Markua document contains duplicate `id` attribute values, the **first** one is used and the subsequent ones are ignored. A Markua Processor should log an error about duplicate `id`s.
* Crosslinks that reference an unused `id` may either be created as a (broken, non-functional) link or be created as normal text (not a link) by a Markua Processor. The Markua Processor should also log an error.

### Referencing Chapter, Section and Figure Heading Names and Numbers in Crosslinks

W> Leanpub authors: this has not been implemented yet

Chapters, sections and figures with captions often have two useful properties for writers:

1. A name which is often short and useful to reference.
2. A number, if numbering is turned on.

Whether the numbers exist is determined by the `number-chapters`, `number-parts` and `number-figures` attributes .

In your writing, it's often desirable to refer to these figures from elsewhere in your book. When creating such a reference, it's helpful to be able to reference the title and number of the chapter, section or figure.

A> Adding a reference to the page number would also be helpful in print, but it is obviously problematic in an ebook, since certain ebook formats have resizable text and since the page displayed by PDF readers is often different than the printed page number, because of front matter Roman numerals. So, Markua doesn't provide any special magical syntax to refer to a page number, in order to discourage it--if Markua did support a reference to a page number, then the next logical step would be to only do so in certain output formats, and then writing Markua text would feel like programming. Instead of this nightmare, a really smart Markua Processor could hypothetically (and with the author's permission) automatically add page number references to these references when producing a print-ready PDF.

Here's how these references to titles and numbers work:

* `#t` is for "title"
* `#n` is for "number"
* `#d` is for "description" (e.g. "Figure", "Chapter", "Section")
* `#f` is for "full title"

So, for "Figure 8.2: Anatomy of a Squirrel", these are:

* `#t` is "Anatomy of a Squirrel"
* `#n` is "8.2"
* `#d` is "Figure"
* `#f` is "Figure 8.2: Anatomy of a Squirrel"

Note that in this example, "Anatomy of a Squirrel" was typed by the author, whereas "Figure 8.2: " was generated by the Markua Processor. It does not matter; both can be referenced.

Also, note that regardless of section level, sections referenced in `#d` or `#f` are all called "Section" (not "Sub-Section", "Sub-Sub-Section", etc.)

The expectation is that `#f` will be used by authors who don't mind verbosity, and #t and #n will be used by authors who prefer control and brevity. The #d is for very lazy authors who like saving keystrokes and/or who don't know whether their publisher will call the code samples "Listing", "Example" or some other word and want to protect themselves against extra work.

The `code-sample-names`, `figure-names` and `table-names` settings control the words used to name things.

Examples:

~~~
This is discussed in [section #n, #t](#crosslinks).

This is discussed in [#f](#crosslinks).

This is discussed in a [#d](#crosslinks) above.

See [chapter #n](#span-elements), which is the best chapter in this book.

This is in figure [#n](#fancy-diagram), arguably the fanciest diagram in this document.
~~~

The only way to reference the title and numbers is in crosslinks. There's no syntax to do so without creating a crosslink--a crosslink is more helpful, since it is clickable, and adding another syntax simply to be less helpful to the reader is a bad idea. Markua has enough syntax as it is.

Note that resources, chapters and sections all have implicit numbering. So, #n always works even if numbering is off. However, you will confuse readers if you refer to numbering they cannot see. Also, if numbering is off, the `#f` must not include either the `#d` or `#n` parts: it will be "Anatomy of a Squirrel" not "Figure 8.2: Anatomy of a Squirrel".

{#charsub}
## Character Substitution

 All Markua documents are written in UTF-8, so to produce any Unicode character, it possible to just use the proper Unicode characters. However, in certain cases, it's desirable for Markua to specify automatic replacement of certain combinations of characters with a Unicode replacement. If a Markua Processor encounters one of these combinations of characters outside of a code block, the Markua Processor must replace the combination of characters with the appropriate Unicode character in the output.

`--`
: To produce an em dash (—), what is thought of by non-typography people as a "dash" or a "long dash", you can just type two hyphens (`--`) directly after a non-space character. You can also use the proper Unicode character, U+2014, of course. The following all produce em dashes: `foo--bar, foo-- bar, foo--`.

` --`
: To produce a space followed by an en dash (–), or the kind of dash that's wider than a hyphen but narrower than an em dash, you can just type a space, followed by two hyphens (` --`). You can also use the proper Unicode character, U+2013, of course. The following both produce en dashes preceded by spaces: `foo -- bar, foo --`. (With `foo -- bar`, there's a space before and after the en dash; with `foo --`, there's no space after it (e.g. at the end of a paragraph).

`...`
: To produce a horizontal ellipsis (…), you can just type `...`. You can also use the proper Unicode character, U+2026, of course.

### Optional Automatic Curly Quotes Outside of Code Blocks and Spans

A Markua Processor may replace the `"` character with the appropriate "curly quote" at its discretion. This lets `"typography"` become `“typography”`, and `it's` become `it’s` as appropriate.

Note that this is an optional behaviour: a Markua Processor may support this fully, only in some output formats, or not at all.

Also, note that it is **NEVER** acceptable for a Markua Processor to do this, or *any* character substitution, to text inside a code block or code span. In almost all instances this would completely break the code. (If you wonder how I got curly quotes into the code spans for `“typography”` and `it’s` above, it's because I pasted them into the manuscript that way. Just as a Markua Processor doesn't make straight quotes curly in a code span, it doesn't make curly quotes straight in a code span either.)

## Escaping Special Characters with Backslash (`\`)

Curly braces and backticks are special in Markua.

A backslash can "escape" a single character, to prevent it from having any special meaning.

TODO - broaden backslash escape (see CommonMark vs Markdown).

At the beginning of a line, an opening curly brace (`{`) starts an attribute list, and two opening curly braces (`{{`) start a placeholder. In the middle of a block element, an opening curly brace starts an index entry. And, at the top of a manuscript.txt file (if the single file approach is used), an opening curly brace starts a settings block.

So, to use a curly brace as an actual curly brace character, you need to backslash-escape it like this: `\{`. (Note that this does not apply inside code or other resources: Markua does not process anything inside them.)

Similarly, a backtick is special. In text content (such as this paragraph), a backtick starts an inline span resource such as a code resource. And three backticks on a line by themselves start a code block.

## Backticks (`` ` ``)

You can create a code span by using pairs of 1, 2 or 3 backticks to surround a span of text within a paragraph, like this:

~~~
This paragraph has a Ruby `puts "hello"` code span inside it.
~~~

You cannot show a literal backtick in a normal code span, however, since you cannot backslash escape anything inside it. Inside a code span, a backslash is just a backslash.

~~~
This paragraph has a Ruby `puts "hello\tworld"` code span inside it.
~~~

So, if you want to output a backtick in a code span, you need to delimit the code span using two backticks:

~~~
This paragraph has a code span with literal backticks `` `say hello` `` in it.
~~~

{#unicode-entities}
## Unicode Entities with `\u`

Typing obscure Unicode characters is hard. So, markup and programming languages often support outputting entity references to Unicode characters. For example, consider the unicode character with the code point `U+1F602`. In HTML, this is the entity `&#x1F602;` in hexadecimal or `&#128514;` in decimal. In JavaScript and many programming languages it is `\u1F602`. These code points are specified in UTF-16, which is a hexadecimal number containing 16-bits of information.

Markua supports Unicode entity references as well. To output a Unicode character, you can type a backslash (`\`), followed by a `u`, followed by the hexadecimal value of the Unicode code point, followed by a semicolon. For example, you can type `\u1F602;` in Markua. The reason the semicolon is required is to clearly indicate the end of the Unicode hexadecimal value to the Markua Processor.

Some example unicode entities which may be useful for a Markua Processor to support include:

* Soft hyphen: \u00AD;
* Non-breaking space: \u00A0;

Now, there's no guarantee that a given Unicode character will be present in a given font.

If a Markua Processor recognizes that a given Unicode character is not present in the font it is currently using, it may switch to a font that it knows will support that character. However, it is entirely acceptable for a Markua Processor to not do anything fancy, and to just attempt to output the character in the font it is using. In this case, what will typically happen is that the font will output a box in place of the missing character. These boxes are affectionately referred to as "tofu" by font people. (You may also encounter a diamond with a question mark in it in this case.)

## Internationalization

Markua Processors may detect the language of the Markua document and output various text in the correct manner. This includes the localization of things like punctuation, the table of contents, etc.

{#emoji}
## Emoji

In 2015, emoji fully arrived. The 2015 Oxford Dictionaries Word of the Year [was](http://blog.oxforddictionaries.com/2015/11/word-of-the-year-2015-emoji/), in fact, the Face with Tears of Joy emoji. You may think of it as a smiling face with tears of joy, but you can also can think of it as `\u1F602;`, which is its Unicode code point.

However, Unicode characters aren't the only way to do emoji. Another popular syntax for emoji is `:emoji_name:` -- that is a colon (`:`), followed by the underscore-separated name of the emoji, followed by a colon.

What should Markua do?

Well, first of all, this is *fantastic* news. Emoji are the single legitimate use case for an inline span image, but any syntax I could invent to specify alt text on an inline span image was either disgusting or was inconsistent with how images are inserted as figures with figure captions.

So, now that emoji are on the rise and have two syntaxes to support them, this problem is solved: emoji can be inserted using either Unicode entities or the special emoji syntax, and the output generated by a Markua Processor is (hopefully) the emoji. So, there's no need for an inline span image syntax!

Markua handles both emoji syntaxes, but it handles them differently.

For the Unicode entity syntax, you just type the Unicode entity. For example, you could write the following sentence:

~~~
The emoji support in Markua makes me \u1F602;
~~~

Again, as discussed [above](#unicode-entities), there is no requirement for a Markua Processor to support a given Unicode character.

With the `:emoji_name:` syntax, a similar, slightly less happy, sentence would be:

~~~
The emoji support in Markua makes me :smile:.
~~~

When outputting a sentence containing emoji inserted using the `:emoji_name:` syntax, the Markua Processor can either:

1. Output the emoji as a span image (right in the flow of the text with no line breaks before or after it) with the `:emoji_name:` (including the colons) as alt text.
2. Output the emoji using an emoji-aware font, having mapped the emoji name to some Unicode code point using some canonical table somewhere. There are online resources such as <http://www.webpagefx.com/tools/emoji-cheat-sheet/> which may be a starting point for any Markua Processor wishing to do this.
3. Output the `:emoji_name:` as an inline code span showing the `:emoji_name:` verbatim.
4. Output a "missing image" character, if it does not recognize the given emoji.

Because of this, Markua's emoji support can also optionally be used by Markua Processors for a wide range of emoji. For example, a Markua Processor could output Font Awesome icons with an emoji syntax, such as `:fa-leanpub:` to output the Leanpub logo in Font Awesome. Since all Font Awesome icons have an `fa-` prefix, these are namespaced nicely.

## Placeholders

Placeholders are a simple text-replace templating system which allow you to define boilerplate in one place, and easily insert it in other places. For books like novels, these obviously have no place. However, for books, courses and other types of documents produced by large organizations, there is an absolute need for placeholders.

Since this is a fairly niche requirement, the syntax is designed in a way that authors should never inadvertently trigger it unless they intend to. It is similar to the footnote syntax.

Placeholder definitions can occur before or after the placeholder insertions. Implementors of Markua Processors are encouraged to deal with placeholders in a pre-processing step.

Placeholders can be defined and inserted as span or block elements.

### Placeholder Identifiers

The identifier for a placeholder must conform to `/[a-zA-Z][a-zA-Z0-9_-]*/`. That is, it starts with a lowercase or uppercase letter `[a-zA-Z]`, followed by 0 or more letters, numbers, underscores or hyphens `[a-zA-Z0-9_-]*`.

### Span Placeholders

#### Span Placeholder Definition

To define a span placeholder, you create a block element consisting of two opening curly braces (`{{`), followed by the placeholder identifier, followed by two closing curly braces (`}}`), followed by a colon (`:`), followed by one space, followed by the span placeholder definition:

~~~
other stuff

{{a_span_placeholder}}: This is the span placeholder definition which can have **Markua formatting** and reference {{other_span_placeholders}} but not block placeholders.

other stuff
~~~

A span placeholder definition can have Markua formatting and can reference other span placeholders.

However, block placeholder references and circular placeholder references are obviously forbidden as content of span placeholder definitions.

#### Span Placeholder Usage

A span placeholder can then be used either in a span context or in a block context.

Specifically, to insert a span placeholder, you use two opening curly braces (`{{`), followed by the placeholder identifier (composed of `a-zA-Z_-` characters), followed by two closing curly braces (`}}`).

~~~
Here's a span placeholder as the only content of a block:

{{a_span_placeholder}}

Here's the same span placeholder {{a_span_placeholder}} being used in a span context.
~~~

### Block Placeholders

#### Block Placeholder Definition

To define a block placeholder, you create a block element consisting of two opening curly braces (`{{`), followed by the placeholder identifier, followed by two closing curly braces (`}}`), followed by the block placeholder content, followed by a newline, followed by two opening curly braces (`{{`), followed by a forward slash (`/`), followed by the placeholder identifier, followed by two closing curly braces (`}}`):

~~~
other stuff

{{a_block_placeholder}}
This is the placeholder content.

It can include *any type of Markua formatting* and can **even** include {{span_placeholder_references}}.

It can also include block placeholder references:

{{some_other_block_placeholder}}

Note that circular placeholder references are obviously forbidden.
{{/a_block_placeholder}}

other stuff
~~~

#### Block Placeholder Usage

A block placeholder can then be used only in a block context. It cannot be used in a span context.

Specifically, to insert a block placeholder, you use two opening curly braces (`{{`), followed by the placeholder identifier (composed of `a-zA-Z_-` characters), followed by two closing curly braces (`}}`). The only difference is that this must be in a block context by itself, with at least one blank line above or below it.

~~~
Here's a block placeholder as the only content of a block:

{{a_block_placeholder}}

You cannot insert that block placeholder in a span context like in this paragraph.
~~~

{#criticmarkup}
## CriticMarkup

[CriticMarkup](http://criticmarkup.com/) is supported in Markua. CriticMarkup describes itself as follows:

> a way for authors and editors to track changes to documents in plain text. As with Markdown, small groups of distinctive characters allow you to highlight insertions, deletions, substitutions and comments, all without the overhead of heavy, proprietary office suites.

Basically, supporting CriticMarkup gives Markua authors the benefit of track changes in Word, but with all the benefits of using Markua. An editor can use CriticMarkup to make suggestions about text to add, delete or replace, as well as leaving comments and highlights on selected text.

The largest benefit to using the CriticMarkup syntax in Markua is that since Markua documents are in plain text, you can use proper version control (like Git or Mercurial) with them, and this includes having the comments versioned right along with the rest of the Markua document. Finding a comment that you deleted six months ago is as easy as checking out the revision that contained the comment.

If you enjoy using track changes in Word, then you'll enjoy using CriticMarkup. If you don't enjoy working with editors or getting feedback about your writing in the text itself, then CriticMarkup isn't for you! If this is the case, don't worry about it: the support for CriticMarkup has no impact on the rest of Markua. If you don't want to use it, you don't need to learn about it.

There are five types of changes supported by the markup in CriticMarkup:

|--------------|------------------------------|
| Change       | Markup                       |
|--------------|------------------------------|
| Addition     | `{++` ... `++}`              |
| Deletion     | `{--` ... `--}`              |
| Substitution | `{~~` ... `~>` ... `~~}`     |
| Comment      | `{>>` ... `<<}`              |
| Highlight    | `{==` ... `==}{>>` ... `<<}` |
|--------------|------------------------------|

These types of markup do not conflict with any Markua markup for attribute lists, since the opening curly brace is always followed by special characters.

Markua Processors can support CriticMarkup in one of two ways:

1. By outputting the additions, deletions, substitutions, comments and highlights appropriately, as defined in the very well-written [CriticMarkup spec](http://criticmarkup.com/spec.php).
2. By outputting the original text, removing all suggestions made in CriticMarkup.

Both ways are appropriate, and a Markua Processor could support both. For example, a Markua Processor could output CriticMarkup when previewing, but output only the original text when publishing.

For example, the following example shows a paragraph annotated with all five types of CriticMarkup:

~~~
If you enjoy using track changes{>>Who enjoys this?<<} in Word, then {~~you'll enjoy~>you may like~~} using
CriticMarkup {++annotations++}. If you don't enjoy working with editors{-- or getting feedback about your
writing in the text itself--}, then CriticMarkup isn't for you! If this is the case, don't worry about
it: {==the support for CriticMarkup has no impact on the rest of Markua==}{>>This sounds ambivalent.<<}.
If you don't want to use it, you don't need to learn about it.
~~~

Note that to hide an entire chapter or section, it's cleaner to use the `book` attribute, described [here](#conditional-inclusion).

{#whitespace-hack}
## A Hack for Forcing Whitespace

Inside a code span or block, whitespace must be preserved by a Markua Processor. So, if you're trying to insert a bunch of whitespace for some strange reason, there is a straightforward hack to do so.

So, there are five spaces between foo and bar here, three inside the backticks, and two outside them: foo `   ` bar. Similarly, there are five blank lines between these two paragraphs:

~~~
Yada yada yada

```



```

Yada yada yada
~~~

You can also use the poetry block syntax, if you want your whitespace to be more poetic:

~~~
Yada yada yada

---



---

Yada yada yada
~~~

Again, this is a total hack. It should not be used to accomplish pagination or otherwise format a Markua document. However, if you want to do it, now you know how to do it.

{#concatenating}
## Concatenating Files and Blank Lines

A Markua document can be written in one file or multiple manuscript files. If a manuscript is written in multiple files, these files are concatenated together by the Markua Processor to produce one temporary manuscript file, and that one file is used as the input.

Importantly, in order to avoid a number of bugs, the files are not just concatenated together unchanged--they **must** be concatenated together by Markua Processors in the following way:

1. All newlines at the beginning and the end of each file are removed.
2. Two newlines are added between the end of each file and the beginning of the next file.

So, after this process, exactly one blank line separates the contents of each manuscript file.

This prevents a number of surprises for authors, and is consistent in design: just as Markua does not support invisible formatting at the end of a line, it does not support invisible formatting at the end of a file.

Note that because of this rule, a paragraph (or any other block element) cannot span multiple manuscript files.

To see why this approach is so important, consider the following single-file Markua document:

{caption: manuscript.txt}
~~~
# Chapter One

Lorem ipsum dolor.

# Chapter Two

Yada yada yada.
~~~

Suppose instead a multiple-file approach was used, in which there were two files, ch1.txt and ch2.txt, with the following content:

{caption: ch1.txt}
~~~
# Chapter One

Lorem ipsum dolor.
~~~

{caption: ch2.txt}
~~~
# Chapter Two

Yada yada yada.
~~~

If Markua did not add any newlines between files, then these files would produce the following incorrect manuscript:

{caption: incorrect concatenation}
~~~
# Chapter One

Lorem ipsum dolor.# Chapter Two

Yada yada yada.
~~~

If Markua only added one newline when concatenating, this would produce the following incorrect manuscript:

{caption: also incorrect concatenation}
~~~
# Chapter One

Lorem ipsum dolor.
# Chapter Two

Yada yada yada.
~~~

However, since Markua requires that headings be separated by blank lines above and below them, the Chapter Two heading would not be a heading. It would be considered part of the previous paragraph! This would be very surprising and the source of a number of bugs. Worse, since a number of text editors such as Emacs have a "strip blank lines at the end of files" setting, it would be possible to introduce such a bug if Markua simply relied on blank lines being added to the end of a file by the author.

So, because of the blank line rule, concatenating the files produces the same manuscript as the single-file manuscript above:

{caption: correct concatenation}
~~~
# Chapter One

Lorem ipsum dolor.

# Chapter Two

Yada yada yada.
~~~

# Metadata

{#attributes}
## Attributes

Attributes are used to do everything from specify the language of code blocks, add ids for crosslinking and even support extensions to Markua. We have already seen attributes throughout the specification in the attribute lists we have encountered.

### Attribute List Format

An attribute list is one or more key-value, comma-separated pairs:

`{key_one: value_one, key_two: "value two", key_three: 'value three!', key_four: true, key_five: 0, key_six: 3.14, key_seven: this works}`

Note that you can skip the space between the colon and the value: the following `{format: ruby}` and `{format:ruby}` both work. However, for consistency I recommend always adding a space.

Note that attribute values can be in no quotes, in double quotes (`"`) or single quotes (`'`). Whenever an attribute contains spaces, using either double or single quotes is preferred to no quotes, but you can get away with using no quotes as long as the attribute value does not contain a comma.

The choice of double or single quotes is mostly personal taste. However, inside double quotes, a double quote must be backslash-escaped (`\"`); inside  single quotes, a single quote must be backslash-escaped (`\'`). So, if your attribute value has a lot of double quotes, then it's more convenient to wrap it in single quotes, and vice-versa.

Regardless of whether quotes are used, leading and trailing spaces are removed from all attribute values, but internal spaces within the attribute values are preserved.

An attribute list can be inserted into a Markua document in one of three ways:

1. Immediately above a block element (e.g. heading, figure, aside, blurb, quiz, etc.), with **one newline** separating it from the block element.
2. Immediately after a span element (e.g. a word, italicized phrase, etc.) in normal paragraphs and in similarly-simple contexts, with **no spaces** separating it from the span element.
3. On a line by itself, with one blank line above and below it. In this format, the attribute list contains [directives](#directives).

If there is an error in the syntax of an attribute list, or if the Markua processor does not support an attribute list in a given context, it should just ignore the attribute list and add an appropriate error.

Regarding #2 and #3: Any line outside of a code resource which starts with an opening curly brace `{` and ends with a closing curly brace `}` is assumed to be an attribute list, and will not be output by a Markua Processor. If you want to start a line with a literal opening curly brace `{` you need to preface it with a backslash (`\`).

Regarding #2: There is some deliberate ambiguity here. For example, Leanpub does not support attribute lists in headers or in captions. So, in Leanpub, you cannot do this:

~~~
# Chapter One{#one}

That doesn't work.

# Chapter{id: chapter-two} Two

That doesn't work either.

You also cannot say ![here's a horse{#horse} image](images/horse.jpg) in Leanpub.
~~~

In both cases, what you want to do is just define the attribute list on the outer element:

~~~
{#one}
# Chapter One

That works.

{id: chapter-two}
# Chapter Two

That works too.

You also can say ![here's a horse image](images/horse.jpg){#horse} in Leanpub.
~~~

### Attribute Keys

The keys of attributes must consist exclusively of lowercase letters, hyphens (`-`) and underscores (`_`). Uppercase letters are not permitted in attribute keys: a Markua Processor must treat uppercase letters in attribute keys as an error.

If a key is duplicated in an attribute list, the first key value is used and subsequent ones are ignored. A Markua Processor should add a warning in its list of warnings, which are *not* output in the output itself.

### Attribute Values

All attributes are text. Markua Processors should interpret text values of "true" and "false" as representing true and false. Quotes, by which I mean double quotes (`"`) not single quotes (`'`), are optional for attribute values, and are only needed if the attribute value contains whitespace or special characters.

If a text attribute value contains a quote, it must be "escaped" with a backslash: e.g. `{caption: "\"Fresh\" Fish"}`

### `id` Attributes

As previously discussed, there is special syntactic sugar for ids: `{#foo}` is equivalent to `{id: foo}`. However, ids are just attributes.

### `title` Attributes

Markua headings (part, chapter, section, sub-section, etc.) and figures can all have `title` attributes specified in an attribute list. This is text which overrides what is displayed for the heading or figure in the table of contents. For a heading, it is analogous to the `title` attribute on a resource inserted as a figure, which specifies the text to use for the figure in the appropriate list of figures (e.g. List of Illustrations, Table of Tables, etc.). If a heading does not have a title attribute, the text of the heading itself is used--which is quite often exactly what is desired. Use of a `title` attribute is always optional; it's only used when the default behaviour of using the heading text (or the `caption` attribute for a resource) is not appropriate, say if it's too long.

{#conditional-inclusion}
### Conditional Inclusion Attributes on Headings: `book`, `sample`, etc.

Markua headings (and *only* headings) may have various attributes which specify which output formats their content (of the part, chapter, section, sub-section, etc.) should be included in. If the given attribute is not present, the default value of it is that specified by the nearest ancestor heading. If no such attribute is present at a top-level heading, the default is given by the default value for the attribute defined of Markua.

There are eight attributes which specify conditional inclusion in output targets; four for books, and four for courses.

W> The only ones which currently work in Leanpub are `book` and `sample`.

`book`
: If `true`, include this heading and its content (including nested sections, subsections, etc.) in the book (PDF, EPUB and/or MOBI) that is being generated. If `false`, omit it. The default is `true`. Setting this to `false` is an easy way to "comment out" a section of your book.

`web`
: If `true`, include this heading and its content (including nested sections, subsections, etc.) in the web version of the book that is being generated. If `false`, omit it. If `book`, then include it or exclude it based on the value of the `book` attribute. The default is `book`, meaning that if this attribute is omitted, every section which is included in the book is included in the web version of the book.

`sample`
: If `true`, include the content under this heading (including nested sections, subsections, etc.) in the sample of the book that is being generated. If `false`, omit it. The default is `false`. Note that this attribute just governs the inclusion of the content, not the heading itself. A Markua Processor may choose to include every heading in the sample version of a book or course, in order to produce a representative Table of Contents. In a case such as this where `sample` is `false`, the Markua Processor may output special content inside the chapter, section or subsection to indicate that the content itself is being omitted from the sample. This attribute applies to both the book version (PDF, EPUB and/or MOBI) and the web version of the sample.

`instructor`
: If `true`, include this heading and its content (including nested sections, subsections, etc.) in the instructor version of the book that is being generated, if one exists. If `false`, omit it. If `book`, then include it or exclude it based on the value of the `book` attribute. The default is `book`. Note that to make some content (like an answer key) appear in the instructor version of a book only, you need to do `{instructor: true, book: false}` not just `{instructor: true}`.

`course`
: If `true`, include this heading and its content (including nested sections, subsections, etc.) in the course material that is being generated. If `false`, omit it. If `book`, then include it or exclude it based on the value of the `book` attribute. The default is `book`. The reason there is a separate attribute is in case the same version of a manuscript is powering both a book and a course. Our recommendation is to use git branches instead of this approach, however, since that is usually more flexible.

`course-web`
: If `true`, include this heading and its content (including nested sections, subsections, etc.) in the web version of the course that is being generated. If `false`, omit it. If `web`, then include it or exclude it based on the value of the `web` attribute. The default is `web`. The reason there is a separate attribute is in case the same version of a manuscript is powering both a book and a course. Our recommendation is to use git branches instead of this approach, however, since that is usually more flexible.

`course-sample`
: If `true`, include this heading and its content (including nested sections, subsections, etc.) in the sample of the course material that is being generated. If `false`, omit it. If `sample`, then include it or exclude it based on the value of the `sample` attribute. The default is `sample`. The reason there is a separate attribute is in case the same version of a manuscript is powering both a book and a course. Our recommendation is to use git branches instead of this approach, however, since that is usually more flexible.

`course-instructor`
: If `true`, include this heading and its content (including nested sections, subsections, etc.) in the instructor version of the course material that is being generated, if one exists. If `false`, omit it. If `instructor`, then include it or exclude it based on the value of the `instructor` attribute. The default is `instructor`. The reason there is a separate attribute is in case the same version of a manuscript is powering both a book and a course. Our recommendation is to use git branches instead of this approach, however, since that is usually more flexible.

This set of defaults means that by default, there is no book or course content included in the sample version of a book or course. As discussed, the headings themselves may all be included, in order to generate an appropriate Table of Contents for the sample book or course.

The reason that there are different attributes used for books and courses, instead of a course just reusing the same values that are used by a book, is that this way the same manuscript can be used to produce a book and a course. This approach is obviously not for everyone, but it may appeal to highly technical authors who wish to not repeat themselves, and who don't want to have to maintain separate git branches for a book and a course. Our assumption, however, is that most books or courses will require separate git branches, and that thus this approach merely saves some labour at the cost of some added complexity.

Note that specifying one of these attributes in a nested section overrides any value inherited from its ancestors, or from the default. This way, you can include a chapter in the sample, except for a specific section of the chapter.

Example:

~~~
{sample: true}
# Chapter One

This is included in the sample.

## Section One

This is included in the sample.

{sample: false}
## Section Two

This is *not* included in the sample.

## Section Three

This is included in the sample.

{book: false, sample: true}
# Buy the book!

What you read was just a sample. Why not buy the full book?

{web: false}
# Here's a Coupon!

This coupon will show up in the book version, but not the web book version. It will have the default values for book (true) and sample (false).

# Chapter Two

This is not included in the sample.
~~~

To be clear: ALL conditional inclusion attributes *ONLY* have meaning when used as an attribute list on headings, i.e. the things that are defined with 1-6 `#` signs followed by a space, followed by text.

For example, you can only say `{sample: true}` immediately above a heading. You can't have a blank line below it (otherwise it would be a directive, and not be valid) and you can't attach it to anything other than a heading (like a paragraph, figure, etc.).

A Markua Processor must raise an error if it encounters a conditional inclusion attribute used incorrectly, so as to help the author understand how to properly use them.

{#extension-attributes}
### Extension Attributes

Markua Processors may encounter attributes which they do not understand. If the Markua Processor is being used to output HTML or EPUB, it must output these attributes unchanged. If the Markua Processor is being used to output a different format, it must just ignore and discard the unrecognized attribute. This is true whether the attributes are inserted in an attribute list attached to a span, block or even in free-floating directives.

Because of this, Markua attribute lists can contain any number of extension attributes. An extension attribute is an attribute which is not defined in the Markua specification.

This encourages competition in the Markua ecosystem, while ensuring that Markua implementations do not choke on Markua input which goes beyond their capabilities.

Extension attributes go far beyond adding icons to blurbs: they allow for specialized uses of Markua. Since CSS is so powerful, with creative uses of custom attributes and custom CSS, Markua documents can be transformed. Some obvious uses of extension attributes include adding CSS classes which can then be styled to set fonts, adding custom types to figures for things like lemmas and theorems, etc.

This ensures that new attributes can be added to future versions of Markua without a negative effect on older Markua implementations. It also ensures that new versions of Markua can simply stop supporting attributes defined in this version of Markua without needing to specify anything special.

## Index Entries

Markua supports adding index entries via the attribute list syntax. Index entries let authors or indexers produce professional-looking indexes in Markua books.

Index entries can either be attached to block or span elements using the same attribute list syntax. In fact, index entries can just be added as part of a larger attribute list.

The actual syntax of what the value of an index entry looks like is [inspired by LaTeX](https://en.wikibooks.org/wiki/LaTeX/Indexing).

The key of an index entry is `i`, for index.

In its simplest form, an index entry is simply `{i: "hello"}`. Like any attribute list, you don't need a space between the colon and the quote--you can also do `{i:"hello"}`.

These are the various formats of an index entry:

~~~
{i: hello}
{i: "hello"}
{i: "Armstrong, Peter"}
{i: "Yahoo\!"}
{i: "*hello*"}
{i: "**hello**"}
{i: "hello!Peter"}
{i: "hello!*Peter*"}
{i: "hello!**Peter**"}
{i: "Peter|see{i:'hello'}"}
{i: "Jen|seealso{i:'Jenny'}"}
~~~

Here's what they do:

A> TODO - Leanpub: A few of these definition list items are broken, due to Leanpub bugs.

`{i: hello}`
: Adds an index entry for `hello`. If an index entry has no punctuation or formatting then it does not need quotes.

`{i: "hello"}`
: Adds an index entry for `hello`. Quotes are always fine to use, even when not required.

`{i: "Armstrong, Peter"}`
: Adds an index entry for `Armstrong, Peter`. The quotes are always omitted. Their function is to allow things like exclamation marks and other punctuation to be added without fear, in case you don't feel like learning which punctuation is safe.

`{i: "Yahoo\!"}`
: Adds an index entry for `Yahoo!`. Note that the exclamation mark must be backslash-escaped because `!` is a delimiter otherwise. The `|`, `{`, `}` and `\` characters also must be backslash-escaped.

`{i: "*hello*"}`
: Adds an index entry for `hello`, with `hello` in italics.

`{i: "**hello**"}`
: Adds an index entry for `hello`, with `hello` in bold.

`{i: "hello!Peter"}`
: Adds an index entry for `Peter` which is a sub-entry of `hello`.

`{i: "hello!*Peter*"}`
: Adds an index entry for `Peter` (with *Peter* in emphasis) which is a sub-entry of `hello`. Note that this cannot be combined with a see or seealso (the | syntax).

`{i: "hello!**Peter**"}`
: Adds an index entry for `Peter` (with **Peter** in strong emphasis) which is a sub-entry of `hello`. Note that this cannot be combined with a see or seealso (the | syntax).

`{i: "Peter|see{i:'hello'}"}`
: Adds an index entry for `Peter`, which references the index entry `hello` with the equivalent of "see" in the language of the book. Note that this cannot be combined with a sub-entry (the ! syntax).

`{i: "Jen|seealso{i:'Jenny'}"}`
: Adds an index entry for `Jen`, which references the index entry `Jenny` with the equivalent of "see also" in the language of the book. Note that this cannot be combined with a sub-entry (the ! syntax).

Index entries are case sensitive. For example, `{i: "mark"}` and `{i: "Mark"}` are distinct entries. (The first is for a result or a smudge, the second is a person's name.)

To attach an index entry to the start of a block, put it on its own line above a block:

~~~
{i: "hello"}
I just came to say hello, hello, hello, hello
~~~

To attach an index entry to a word, just add the index entry after the word:

~~~
I just came to say hello{i: "hello"}, hello, hello, hello
~~~

To attach an index entry to a span element, just add the index entry after the span element:

~~~
The first program that a programmer writes in a language is usually *Hello World*{i: "Hello World"}
~~~

Index entries can have commas and other punctuation (except colons) in their definition:

~~~
My wife read some book about a whale by Herman Melville{i: "Melville, Herman"}.
~~~

Multiple index entries can exist in a block, or even a sentence:

~~~
Supposedly the great-great-great-granduncle of the musician Moby{i: "Moby"} was Herman
Melville{i: "Melville, Herman"}, the author of a book about a whale{i: "Moby-Dick; or, The Whale"}.
~~~

Note that adding index entries is best left until the author is done writing the book. At that time, ids like {#myid} can be converted to {id: #myid, i: "blah"} if index entries are being added where ids already are.

{#directives}
## Directives

Directives are switches which affect the future behaviour of a Markua Processor.

The syntax for directives is simple: they are just contained in an attribute list. The only difference is that the attribute list is inserted an a line by itself, with one blank line above and below it. (There are two exceptions: if the directive is at the beginning of a manuscript file, you can omit the blank line above it; if it's at the end of a manuscript file, you can omit the blank line below it.)

A directive does not have any kind of "closing tag"--it simply remains in effect for the rest of the Markua document, or until the directive is overridden by another use of the same directive with a different value.

### The `lang` Directive

A book has a global `lang` [setting](#setting-keys-and-values), which defaults to `eng`, for English.

However, many books are written in more than one language. Switching between languages in accomplished using the `lang` directive.

For example, say I'm writing a book about Waka. If I want to switch to Japanese to display a poem I can do so using a `lang` directive `{lang: jpn}` and then switch back to English using `{lang: eng}`.

The value of the `lang` directive must be a valid [ISO 639-3](https://en.wikipedia.org/wiki/ISO_639-3) language code.

The two main things that the `lang` directive affects are:

1. the direction of the text (left-to-right or right-to-left)
2. the font used for the language

Since English is the default language of a Markua document, all Markua Processors must support the `eng` value of the `lang` directive. Support for all other language codes is optional. If the language code given as the value of a `lang` directive is not supported or is unrecognized, it must be interpreted as `eng` and switch the font accordingly and switch the direction to left-to-right. This way, a Markua Processor can add support for right-to-left languages such as Arabic (`{lang: ara}`) or Hebrew  (`{lang: heb}`), and know that when a different language is specified the direction will switch to left-to-right even if the given language was not supported--there are a lot of languages, but almost all of them are left-to-right languages.

{#book-section-directives}
### Book Section Directives

Most published books have three types of material in them: the front matter, the text and the back matter.

What authors write, the manuscript, is typically what goes into the text, or main matter, of the book. In style guidelines such as the [Chicago Manual of Style](http://www.chicagomanualofstyle.org/home.html) this is called the text; in formats such as TeX and LaTeX it is called main matter. It's what is numbered with Arabic numerals starting from 1.

There's a bunch of other stuff (the Dedication, Epigraph, Table of Contents, Foreword, Preface, etc.) which can come before the main text of the book. This is called "front matter". Some of the front matter comes before the Table of Contents and is not numbered; the rest of the front matter that comes after the Table of Contents gets numbered with Roman numerals.

There's also a bunch of other stuff (appendices, the index, etc.) which can come after the main matter. This is called the "back matter".

If Markua just relied on its headings support there would be no good way to accomplish the division of a manuscript into front matter, main matter and back matter. (We could try some convention about heading names, but that would be a highly objectionable, English-centric hack.) Furthermore, there would be no good way to determine which parts of the front matter got numbered and which did not.  Also, there would be no good way to give explicit hints to Markua Processors about how to style the various parts of a book.

The book `section` directive is the solution to this. You add a book `section` directive like this:

`{section: mainmatter}`

Adding multiple instances of the `section` directive throughout the book lets you indicate to Markua Processors what section of a book they are in, in order to affect numbering, formatting and other concerns like the placement of the Table of Contents.

Markua is a fairly minimalist format, so this is all accomplished with one directive. Furthermore, for authors who do not know about this directive, nothing bad or unexpected will happen.

There are three types of values of the book `section` directive: front matter values, the `mainmatter` value and back matter values. These values are named for the different book sections identified in the Chicago Manual of Style.

The following values of the `section` directive can occur in front matter:

* `half-title`
* `series-title`
* `title-page`
* `copyright`
* `dedication`
* `epigraph`
* `table-of-contents`
* `figures`
* `tables`
* `foreword`
* `preface`
* `acknowledgments`
* `introduction`
* `abbreviations`
* `chronology`

The `{section: mainmatter}` value indicates that the front matter is over. It is the start of the first numbered page of the text. Note that the `acknowledgments`, `abbreviations` and `chronology` directives can also occur after the `{section: mainmatter}` directive, as a matter of style preference.

The following values of the `section` directive can occur in back matter:

* `appendices`
* `notes`
* `glossary`
* `bibliography`
* `contributors`
* `illustration-credits`
* `index`
* `exercise-answers`
* `quiz-answers`

The `bibliography` directive allows a Markua Processor to specially format the text inside that section appropriately. The `exercise-answers` and `quiz-answers` directives are used to position the answers to any exercises or quizzes in the text of the Markua document. If neither of these directives are present, a Markua Processor should position the exercise answers somewhere near the back of the book (in the back matter, if it exists). For quiz answers, on the other hand, a Markua Processor may do whatever it wants in terms of whether the quiz answers are included in the book, regardless of the presence or position of the `quiz-answers` directive. For example, in Leanpub's online courses, the quiz answers are only provided when quizzes are completed and automatically marked, and are never output in the material book for the course.

You can write a book or document in Markua without using any directives at all, including book `section` directives. However, if you add a `section` directive with a value of any of the front matter values, the `{section: mainmatter}` directive is required.

If you're an author and this seems confusing, don't fear. Almost all of the book `section` directives will typically be added either by someone working for a publisher or automatically by book generation software. The only `section` directives that many authors will use are `{section: dedication}` and `{section: mainmatter}`.

Also, note that Markua Processors may ignore all of the book `section` directives. Book `section` directives are only hints that indicate that the Markua Processor may wish to do things like switch to hanging indents, change the font size, insert a table of contents at that location, use a custom layout, etc. based on what section of the book they are in.

While these book `section` directives are mere hints, there are strict rules about their use:

1. Each value of a book `section` directive can only appear once.
2. The book `section` directives are all optional; it is legal to have a Markua document with no book `section` directives.
3. If any book section directives with values which occur in front matter are present, a `{section: mainmatter}` directive is required.

Authors new to Markua can completely ignore all directives, including book `section` directives. Only when they wonder how to make certain sections excluded from the numbering, or to have Roman numerals etc., do they have to worry about book `section` directives. And using directives is very simple, despite how formally specified this section makes them.

{#settings}
## Settings

As discussed earlier, a Markua document can be written in one file or multiple manuscript files. If a manuscript is written in multiple files, these files are concatenated together by the Markua Processor to produce one temporary manuscript file, and that one file is used as the input.

At the very beginning of the first (or only) manuscript file, a Markua document can contain settings. The settings are just newline-separated key-value pairs which contain information about the document. This will include things like the title, subtitle, copyright, author names, etc.

These settings are enclosed in a "settings hash" in curly braces like this:

~~~
{
title: Markua Specification
authors: Peter Armstrong
contributors: Scott Patten, Braden Simpson and Len Epp
copyright: Peter Armstrong
}

# The Magical Typewriter

Imagine you owned a magical typewriter...
~~~

The format of the metadata is one entry per line, with the keys and values separated by a colon and a space. Any whitespace at the beginning or end of the keys and values will be stripped. Only the first colon is important; subsequent colons on a line will just be part of the value.

There is a blank line between the settings hash and the manuscript content.

A Markua Processor may also get settings from elsewhere, like a web interface. However, in the case of a conflict, any settings specified in the settings hash must win.

{#setting-keys-and-values}
### Markua-Defined Settings

The following settings must be supported by all Markua Processors. Markua Processors can also add their own settings, just as Markua Processors can understand their own extension attributes.

If a Markua Processor also provides a UI to define settings which are specified here, the Markua Processor should respect the settings defined in the Markua document over the settings defined in the UI. This can be phrased as "document wins", not "database wins".

`authors`
: The authors of the Markua document.

`contributors`
: Any contributors to the Markua document who are not authors.

`copyright`
: The owner of the copyright.

`default-code-language`
: The default language that code which is a local resource, web resource or inline resource inserted as a block with three backticks is interpreted as. The default value is `guess`, which means to guess at the code language based on the syntax encountered (or the file extension for external code samples), and attempt to syntax highlight appropriately. A good alternative is `text`, which means no syntax highlighting should be used, but the code should be in a monospaced font suitable for a programming language. Besides these options, you can specify a particular programming language used, such as `ruby` or `java`. If a Markua Processor does not recognize the programming language specified, it must format it as `text`. Finally, note that the value of this setting only affects local resources, web resources or inline resources inserted as a block with three backticks--it has no effect on code spans, or on inline resources inserted with tildes. The default language for inline resources delimited by three tildes is always `text`, but you can override the default on individual resources of course.

`default-code-span-language`
: The default language that code which an inline code span resource is foramtted as. The default is `text`. If you set this to `ruby`, it is the equivalent of setting `{format: ruby}` as an inline attribute list on every code span resource by default, e.g. `` `puts "hi"`{format: ruby} ``. If you need to override a specific resource to not be ruby, you would set `{format: text}`.

`html-style`
: `simple` or `markdown`. The default value is `markdown`. If this setting is `markdown`, then **bold text** should produce a `<strong>` tag, and *italic text* should produce an `<em>` tag. If this setting is `simple`, then **bold text** should produce a `<b>` tag, and *italic text* should produce an `<i>` tag. If you want to learn more, read [this](#html-style-markdown).

`italicize-underlines`{#italicize-underlines}
: `true` or `false`. The default value is `true`. If this setting is `true`, then underlined text cannot be produced by the Markua Processor: `_one underscore_` produces *italicized text* (just like one asterisk), `___three underscores___` produces ***bold + italicized text*** (just like three asterisks), and `____four underscores____` or `****four asterisks****` **also** produces ***bold + italicized text*** (again, just like three asterisks). If this setting is `false`, then underlined text **can** be produced by the Markua Processor: `_one underscore_` produces ____underlined text____, `___three underscores___` produces ____**bold + underlined text**____, and `____four underscores____` or `****four asterisks****` produces ____***bold + italic + underlined***____ text. If you want to learn more, read [this](#html-style-markdown).

`lang`
: The [IS0 639-3](https://en.wikipedia.org/wiki/ISO_639-3) three character language code of the language that the Markua document is written in. The default is `eng`.

`number-chapters`
: `true` or `false`. Default `true`. Whether the chapters are numbered.

`number-figures`
: `true` or `false`. Default `true`. Whether resources are numbered when inserted as figures. Note that different types of resources (e.g. code listings, tables, images, etc.) have different numbering.

`number-sections`
: `true` or `false`. Default `false`. Whether the sections (and sub-sections) are numbered.

`restart-endnote-numbering`
: `true` or `false`. Default `true`. Whether the endnote numbering is restarted at the end of a chapter.

`restart-footnote-numbering`
: `true` or `false`. Default `true`. Whether the footnote numbering is restarted at the end of a chapter.

`title`
: The title of the Markua document.

`version`
: The version of the Markua document. This is primarily intended for use when producing analytics for courses. The default is `0.1`.

{#course-setting-keys-and-values}
### Settings for Courses

The following settings are defined by Markua, but only make sense in the context of a course. So, a Markua Processor which is not generating a course can ignore them.

`course-attempts`
: The number of allowed attempts on the course itself. The default is `1`.

`course-completeness`
: How "done" the course itself is. Expressed as a percentage, in decimal value. The default is `0`. A value of `100` or `100.0` is the maximum. A Markua Processor may do something smart when a course which is 100% complete changes the `id` values of a quiz or quizzes, since this will affect current students.

`default-exercise-show-answers`
: This can be `all` (the default), `incorrect` or `none`. It affects how answers are shown after an exercise is completed, say in a MOOC.

`default-quiz-attempts`
: The default number of allowed attempts on a quiz. The default is `1`. Note that for quizzes, a value of `0` means the quiz cannot be taken (yet). A value of `-1` means the quiz has an unlimited number of attempts. Setting either of these as the value of `default-quiz-attempts` is a legitimate value, and has the effect of changing the default value for all quizzes. Again, an exercise always has an unlimited number of attempts, so there is no corresponding `default-exercise-attempts` value.

`default-quiz-auto-submit`
: `true` or `false`. The default is `true`. If true, an incomplete quiz is submitted when the `time-limit` is expired. If false, it is not. Either way, an incomplete quiz counts as an attempt.

`default-quiz-show-answers`
: This can be `all`, `incorrect` (the default) or `none`. It affects how answers are shown after a quiz is completed, say in a MOOC.

`default-quiz-use-result`
: `best` or `latest`. The default is `best`. Whether the best result on the quiz is used, or the latest one.

`default-random-choice-order`
: `true` or `false`. The default is `false`. This sets the default behaviour of multiple choice questions. If `true`, the choices in the multiple choice question are randomly arranged; if `false`, they are presented in the order written.

`default-random-question-order`
: `true` or `false`. The default is `false`. This sets the default behaviour of the quiz or exercise. If `true`, the questions are randomly arranged; if `false`, they are presented in the order written.

{#courses}
# Courses

Markua was initially designed for the writing of books, but it has been extended to support creating courses. For example, Leanpub authors can click a button to create a massive open online course (MOOC), complete with automated marking, entirely from a Markua document.

**To convert a Markua document from a book into a course, all you need to do is add quizzes and exercises.**

Over the past decade, there has been a steady growth of interest in courses delivered over the internet at massive scale. These Massive Open Online Courses, or MOOCs, consist of essentially four things:

1. Reading material
2. Video or audio lectures
3. Exercises, with answers provided to the student
4. Quizzes, with answers used to automatically mark the quiz

It turns out the four things in this list all work perfectly in a Markua document. So, not only can Markua be used to easily create a textbook which includes video, audio, images and quizzes, it is also an amazingly simple and flexible way of creating a MOOC. A MOOC is essentially just a textbook which is executable, plus discussion forums and credentials. For example, [Leanpub](https://leanpub.com) authors can click one button to create a massive open online course (MOOC), complete with automated marking for all the quizzes in the course, entirely from one Markua document.

Quizzes and exercises are essentially the same. The only difference is that quizzes are intended to be marked, and exercises are not. Because of their similarities, they are discussed here together.

Quizzes or exercises in a textbook consist of two things:

1. Questions, typically in the chapter itself.
2. Answers, typically at the back of the book.

The questions in the chapter essentially are placed there like any other block element, such as an aside or blurb. The answers are positioned at the back of the book, along with other elements like the index and appendices. The specific location that they are positioned can be controlled by the author using [book section directives](#book-section-directives), discussed later.

There is only one syntax to create a quiz or exercise. For a quiz, it's by wrapping the quiz in `{quiz}` ... `{/quiz}`; for an exercise, it's by wrapping the exercise in `{exercise}` ... `{/exercise}`.

Here is a brief example of a quiz:

~~~
{quiz, id: quiz1}
? How many letters are in the word Markua?

a) 5
B) 6
c) 7

? How many unique letters are in the word Markua?

! 5
{/quiz}
~~~

This quiz contains two questions: a multiple-choice question where the correct answer is b, and a fill-in-the-blank question where the correct answer is 5. Quizzes and exercises have the same question types, discussed later.

With a quiz, the `id` attribute is **required**. This is so the identity of a quiz can be preserved across generations of a course.

Here is the same example, but as an exercise:

~~~
{exercise, id: exercise1}
? How many letters are in the word Markua?

a) 5
B) 6
c) 7

? How many unique letters are in the word Markua?

! 5
{/exercise}
~~~

Just like with quiz, with an exercise the `id` attribute is **required**. This is so the identity of an exercise can be preserved across generations of a course.

{#quizzes-and-exercises}
## Quizzes and Exercises

A quiz or exercise can contain any Markua content, not just questions and answers. This is true regardless of whether the quiz or exercise is in a MOOC, an ebook or on paper. Note that video and audio resources don't work so well on paper, however.

If a quiz or exercise starts with any type of heading immediately after the `{quiz}` or `{exercise}` line, this heading's content should be considered the name of the quiz or exercise. This can be used in a list of quizzes or exercises produced by the Markua Processor. Typically the heading will be a chapter heading (`# `), but section headings (`## `) and lower headings also are supported. (The reason for this is that quizzes are sometimes top-level things, and other times are nested inside chapters, sections or sub-sections. Some course authors would correctly feel that the quiz should have the appropriate level of heading given their position in the document.

Example:

~~~
{quiz, id: quiz2}
# Markua Quiz

Watch this [video](https://www.youtube.com/watch?time_continue=1&v=VOCYL-FNbr0) of Peter explaining Markua.

? What year was that video from?

What year? Really? Did it really take that long? What was going on???

a) 2012
b) 2013
C) 2014
d) 2015

{words: 500}
? Why do you think the first version of the Markua spec took so long?

Look at the Leanpub website and read the [pricing essay](https://leanpub.com/pricing).

! Answers could include "bootstrapped startup", the spec evolving, removing HTML mapping, etc.

That's it for this quiz, and this MOOC!

**Thanks for taking my course!**
{/quiz}
~~~

### An Empty Quiz or Exercise is Not an Error

A quiz or exercise which contains no questions is not an error. Instead, a if a Markua Processor encounters a quiz or exercise with no questions it must filter the quiz or exercise from the output, optionally providing a warning to the author.

This lets authors create placeholders for quizzes or exercises in their courses before the quizzes or exercises are ready, which is potentially very useful in an in-progress course.

### A Malformed Quiz or Exercise is an Error

If a Markua Processor encounters a malformed quiz or exercise it must treat this as an error and not generate the output from the Markua document. Quizzes and exercises are not something that should ever be produced in a broken state.

However, it is also an error to parse quiz syntax outside a quiz or exercise block. A Markua Processor must not parse lines starting with ? or ! as representing questions or answers unless those are contained in a quiz or exercise block.

### Supported Attributes on Quizzes and/or Exercises

`attempts`
: The number of allowed attempts on a quiz. The default is defined by the value of `default-quiz-attempts` on the containing course, or `1` if this is not present. A value of `0` means the quiz cannot be taken (yet). A value of `-1` means the quiz has an unlimited number of attempts. Since an exercise does not count toward the mark on a course, an exercise always has an unlimited number of attempts.

`auto-submit`
: `true` or `false`. The default is `true`. If true, an incomplete quiz is submitted when the `time-limit` is expired. If false, it is not. Either way, an incomplete quiz counts as an attempt.

`case-sensitive`
: `true` or `false`. The default is `true`. This sets the default behaviour of fill in the blank questions. If `true`, the fill in the blank question answers are case-sensitive. If false, they are not.

`id`
: All Markua elements support an `id` attribute. The reason the `id` attribute is explicitly listed here is to emphasize that a Markua Processor may require an `id` attribute on a quiz or exercise. For example, Leanpub requires the `id` attribute on all quizzes, in order to determine the identity of quizzes when a course is being published in-progress. (As a student, you'd be pretty unhappy if you had to re-take an unchanged quiz simply because a professor published a new course version.)

`mark-request-url`
: If omitted, all the quiz or exercise answers are defined in the Markua document. If present, some or all of the quiz or exercise questions are externally marked via an API defined at the URL specified in this attribute. When the quiz or exercise is completed, the entire quiz or exercise should be sent to the endpoint at the `mark-request-url`. Here's how this works in Leanpub; other Markua Processors should presumably do something similar. When a quiz or exercise with this attribute defined is completed, its state is set to "pending". Leanpub then sends the quiz or exercise data as a JSON payload to the marking endpoint. This JSON contains the following attributes: `mark-response-url` (which defines where responses are sent), `quiz_id`, `quiz_version`, `quiz_hash` (an SHA hash, for an automated quiz versioning approach which does not rely on the course author updating a version attribute), `quiz_results` (an array of question data structures containing the question, the possible answers, the correct answer according to the Markua document, the answer provided by the student, and (if the question is markable) the mark determined automatically). The API endpoint should send results to the `mark-response-url`. (Even though exercises are not worth points in a course, they can be marked, for the benefit of the student. However, the expectation is that this attribute will be used primarily by quizzes.) The `mark-response-url` in the payload contains URL to respond to with the results of the marking the quiz or exercise. The format of the expected payload should be defined by the Markua Processor. For Leanpub this is a JSON payload containing the question ids and the marks for each question. The mark is a decimal number of points between 0 and the maximum number of points for the question, inclusive. The decimal supports two decimal places, so you can get 3.75 out of 4, for example. The mark response must include marks for all questions that are unmarked. It may also include marks for questions that Leanpub marked, and those will override Leanpub’s marks. Finally, note that even though exercises are not worth points in a course, they can be marked, for the benefit of the student. So, since they can be marked, they can also be externally-marked via a `mark-request-url`. However, the expectation is that this attribute will be used primarily by quizzes.

`points`
: If present, this is the total number of points the quiz or exercise is worth. (This really only matters for quizzes, but is supported for exercises as well, in case a Markua Processor wishes to display the points on exercises to make them feel more real.) If `points` is not present, the worth of the quiz is determined by summing the points of the questions. (Questions are worth 1 point each if they have no `points` attribute.) If the quiz has a `points` attribute and its questions also have `points` attributes, the worth of each question in a larger course context is determined as follows: its `points` are the numerator, and the total `points` in the quiz or exercise is the denominator.

`random-choice-order`
: `true` or `false`. The default is `false`. This sets the default behaviour of multiple choice questions. If `true`, the choices in the multiple choice question are randomly arranged; if `false`, they are presented in the order written.

`random-question-order`
: `true` or `false`. The default is `false`. This sets the default behaviour of the quiz or exercise. If `true`, the questions are randomly arranged; if `false`, they are presented in the order written.

`start-at`
: The `start-at` is the number of the first question. The default is 1. Any integer is permitted. Subsequent questions will have a number which is 1 higher than the previous question.

`show-answers`
: This can be `all`, `incorrect` or `none`. It affects how answers are shown after a quiz or exercise is completed, say in a MOOC. For exercises, the default value is determined by the value of the `default-exercise-show-answers` global setting, with `all` being the default value of that attribute. For quizzes, the default value is determined by the value of the `default-quiz-show-answers` global setting, with `incorrect` being the default value of that attribute. Global settings are discussed later.

`time-limit`
: The time limit to finish the quiz, once started. The format is `XdYhZm`. For example, 3 days, 6 hours and 45 minutes is expressed as `3d6h45m`; 7 days is expressed as `7d`. The default is `7d`.

`use-result`
: `best` or `latest`. Whether the best result on the quiz is used, or the latest one. The default is the value of `default-quiz-use-result` on the course.

`version`
: The version of the quiz. This does not replace the function of the `id`; it's more for use in analytics by the instructor. The default is `1`.

As [discussed above](#quizzes-and-exercises), there is no `title` or `caption` attribute for a quiz--you can just add a heading inside the quiz or exercise itself, using the normal Markua formatting for a chapter heading.

## Question Types: Multiple Choice, Multiple Selection, Fill In The Blank, Written

There are four types of questions supported by Markua.

1. Multiple Choice
2. Multiple Selection
3. Fill In The Blank
4. Written

These types are not specified by a `{type}` attribute. Instead, they are inferred from properties of the answers or from other attributes of the question.

### Multiple Choice Questions

A multiple choice question has 2 or more answer choices, and 1 correct answer choice.

The correct answer choice is in capital letters before the parentheses; incorrect answer choices have lowercase letters before the parentheses.

Example:

~~~
? How many letters are in the word Markua?

a) 5
B) 6
c) 7
~~~

Obviously, when generating the question in the actual quiz or exercise, a Markua Processor must make all answer choices have the same type of letter. This is usually a lowercase letter, although either all lowercase or all uppercase letters would be fine.

Unless a `choose-answers` attribute is used, the multiple choice answers all must start from a or A, and must use a right-parenthesis after the a or A. Any line starting with a) ar A) in a quiz is considered a set of multiple choice quiz answers, not a numbered list using a) or A) as a delimiter. If you want to put a numbered list in a quiz body, use periods for the delimiter.

A multiple choice question may also have a dynamic number of answer choices, including for the correct answer. This done with the special `choose-answers` attribute, shown and explained below.

~~~
{choose-answers: 4}
? How many grams are in a pound?

C) 454
C) 453
m) 451
m) 1000
o) 100
o) 150
o) 200
o) 250
o) 300
o) 500
~~~

The `choose-answers` attribute specifies how many answer choices should be shown. This includes exactly one of the correct answers (indicated with `C`), all of the mandatory incorrect answers (indicated with `m`) and as many of the optional incorrect answers (indicated with `o`) as are needed for the question to have the total number of answers as indicated by the `choose-answers` attribute.

So, in the above example, either `453` or `454` will be shown, along with the mandatory incorrect answer choices `451` (a literary joke) and `1000` (a kilogram, not a pound) and one of the optional incorrect answers (`100`, `150`, `200`, `250`, `300` or `500`).

When a `choose-answers` attribute is used, the question will always have `random-choice-order`.

The following are errors in a question where a `choose-answers` attribute is used:
- 0 correct (`C`) answers
- not enough mandatory (`m`) incorrect or optional (`o`) incorrect answers for the question to have the `choose-answers` number of answers
- if `choose-answers` is n, a number of mandatory (`m`) incorrect answers >= n (since there needs to be one correct answer shown)
- if `choose-answers` is n and the number of mandatory (`m`) answers is n - 1, then any optional (`o`) incorrect answers existing
- answers starting with something other than `C`, `m` or `o`

#### Supported Attributes on Multiple Choice Questions

`choose-answers`
: This is described above. If `choose-answers` is used, `random-choice-order` is forced to true.

`points`
: The number of points the question is worth. This number can be 0 or higher. The default is 1.

`random-choice-order`
: `true` or `false`. The default is `false`, unless `choose-answers` is used. This sets the behaviour of the specific multiple choice question. If `true`, the choices in the multiple choice question are randomly arranged; if `false`, they are presented in the order written. If this attribute is omitted, its value is determined by the `random-choice-order` attribute on the quiz itself, which defaults to `false` if absent.

### Multiple Selection Questions

A multiple selection question has 2 or more answer choices, and 1 or more `true` answer choices.

W> Leanpub authors: This question type is not yet supported in Leanpub.

The `true` answer choices are specified with `T`; `false` answer choices are specified with `F`.

To get the question 100% correct, you must select **ALL** answers which are `true` (not just one of them) and **NONE** of the answers which are `false`. As discussed later, the `mark` attribute determines whether the marking is all-or-nothing (with the `binary` value) or whether a partial credit can be earned (with the `ratio`) value.

Regardless of the value of the `mark` attribute, to get any score for a multiple selection question, at least one answer choice must be selected. Leaving a multiple selection question blank always gets zero points, even if the `mark` attribute is `ratio`. Otherwise, if a test had nothing but multiple selection questions with `ratio`-marked questions, with half the answers `true` and half the answers `false`, you could get 50% on the test by just handing it in blank!

#### Supported Attributes on Multiple Selection Questions

`mark`
: `binary` or `ratio`. The default is `binary`. This sets the marking behaviour of the specific multiple selection question. If `binary`, the question is all or nothing: you either get full points for the question, or a 0 on the question. To get full points, you must select every `true` choice and none of the `false` choices. If `ratio`, you get a fractional score defined as `(number of true choices selected + number of false choices not selected) / (total number of choices)`. This fraction is then multiplied by the `points` that the question is worth to compute the `points` that you received on the question. Note that regardless of whether the `mark` is `binary` or `ratio`, a question which is left blank is always completely wrong, earning no credit for the correctly-not-selected `false` choices.

`points`
: The number of points the question is worth. This number can be 0 or higher. The default is 1. The `mark` attribute is used to determine how the points are computed. Again, regardless of whether the `mark` is `binary` or `ratio`, a question which is left blank always earns 0 points.

`random-choice-order`
: `true` or `false`. The default is `false`. This sets the behaviour of the specific multiple selection question. If `true`, the choices in the multiple choice question are randomly arranged; if `false`, they are presented in the order written. If this attribute is omitted, its value is determined by the `random-choice-order` attribute on the quiz itself, which defaults to `false` if absent.

#### Examples of Multiple Selection Questions

~~~
? Which of these are animals?

F) apple
T) cow
F) lettuce

{mark: ratio, points: 2}
? Which of these are fruits?

T) apple
F) cow
F) lettuce
T) peach
T) pear
F) rice
~~~

Here the first question defaults to `binary` and 1 point; the second question is `ratio` and 2 points.

To get the first question correct, you must select `cow`, and neither of `apple` or `lettuce`.

To get this second question 100% correct, you must select all of `apple`, `peach` and `pear`, and none of `cow`, `lettuce` or `rice`. For this question, if the `mark` attribute had been `binary`, the only way to get any points for it would be to select `apple`, `peach` and `pear`, and to leave `cow`, `lettuce` and `rice` all unselected. However, the `mark` is not `binary`; it is `ratio`. So, if you selected `apple`, `peach` and `rice`, then the score would be computed as follows: ((2 correctly-selected true choices + 2 correctly-not-selected false choices) / 6 choices) * 2 points = (4/6) * 2 points = 1.5 points. Since at least one choice was selected, you get just as much credit for correctly not selecting `cow` and `lettuce` as you do for correctly selecting `apple` and `peach`. If an instructor thinks this is too lenient, then `binary` is the choice for them!

### Fill In The Blank Questions

A fill in the blank question consists of a question and a set of answers. Each answer is specified by `!`, an optional points value, a space, and then a semicolon-separated list of the acceptable values of that answer. Each answer value can be a text string (quoted or not) or a regular expression (regex). If a points value is not specified for an answer, the answer is worth full points.

Support for regular expression answer values is optional. However, a Markua Processor which supports regular expression marking must interpret any answer which starts with a forward slash (`/`) and ends with a forward slash followed by some word characters (e.g. `i`) as being a regular expression. Note that the particular format of the regular expression used is implementation-specific. For example, Leanpub uses Ruby regular expressions. Other Markua Processors could, for example, use Perl or JavaScript regular expressions.

Finally, note that you can separate regular expressions with semicolons, just like any other answer value. There's no reason not to support this, and it may lead to simpler regular expressions. However, if you're good at regular expressions, you can also combine them into one regular expression, of course.

Note that since a semicolon is used to separate answer values, to provide an actual semicolon as part of an answer value you must either put the answer value in quotes, use a backslash-escape `\;` or make the semicolon part of a regular expression.

Examples:

~~~
? How many unique letters are in the word Markua?

! 5

? What's the global capital of investment banking?

! New York ; London

? What's the global capital of investment banking?

! "New York" ; "London"

? What's the global capital of investment banking?

! New York
! London

? What's the global capital of investment banking?

! "New York"
! "London"

{case-sensitive: false}
? What's pi?

! "The ratio of a circle's circumference to its diameter" ; 3.14 ... 3.1416 ; an irrational number

{case-sensitive: false}
? What's pi?

! "The ratio of a circle's circumference to its diameter"
! 3.14 ... 3.1416
! an irrational number

? Where's the Eiffel Tower?

! /(Paris|France)/i

? Where's the Eiffel Tower?

! /Paris/i ; /France/i

{points: 2}
? Where's the Eiffel Tower?

! /Paris/i
! /France/i

{points: 2}
? Where's the Eiffel Tower?

!2 /Paris/
!1 /paris/i
!.5 /France/i

{points: 2}
? Where's the Eiffel Tower?

! /Paris/
!1 /paris/i
!.5 /France/i

{points: 2}
? Where's the global capital of investment banking?

!2 New York ; London
!1 USA ; UK
~~~

As shown by the answer (`"The ratio of a circle's circumference to its diameter" ; 3.14 ... 3.1416; an irrational number`), acceptable answer values in a fill in the blank question can be of completely different types, and numeric answer values can be expressed as ranges (min <= x <= max), expressed as `min ... max`. Also, this answer shows that quotes are optional around text strings. The reason to use quotes is for clarity, or to ensure that any semicolons used are treated as semicolons instead of as answer choice delimiters. Semicolons inside quotes are just semicolons and do not need to be backslash-escaped. You do, however, need to backslash-escape a quote if you want it to be treated as a literal quote, instead of the start or end of a string.

If there are multiple answers to a fill in the blank question and an answer key is being output by the Markua Processor for use by human markers, the acceptable values should be clearly distinguished from each other. The recommendation is to use a bulleted list of acceptable values, one per line, but there are no requirements here.

If you're a programmer, you may wonder what number types and formats are supported. Are they integers? Floating point numbers? Can you use scientific notation? And how are the numbers formatted? Are they US or Canadian numbers (`123,456.78`) or EU numbers (`123 456,78`)?  What if there's a number that means something different in the US and EU--does `123,456` mean `123456` or `123.456`?

These questions are made worse by the fact that Markua can be used to create human-marked paper quizzes as well as automatically-marked MOOCs. So, specifying rules which made the syntax unambiguous for MOOCs would mean that the answers for human-marked paper quizzes could not be specified with a tolerable amount of ambiguity. So, the format of the answer values in a fill in the blank question is out of scope of the Markua Specification.

#### Supported Attributes on Fill In The Blank Questions

`points`
: The number of points the question is worth. This number can be 0 or higher. The default is the 1. The answers must either not specify points (in which case they are worth the full value of points that the question is worth), or they must specify points between 0 and the `points` value.

`case-sensitive`
: `true` or `false`. The default is `true`. This sets the behaviour of the specific fill in the blank question. If `true`, the fill in the blank question answer is case-sensitive. If false, it is not. In the case of multiple acceptable answer values, this attribute applies to all of them. Note that this only applies to text string answers, not to regular expressions. For a regular expression to be case-insensitive, you must end it with an `i` after the closing backtick.

### Written Questions

A written question corresponds to short answer, long answer or essay questions in traditional tests. It looks the same as a fill in the blank question, except the answer is optional.

A question is interpreted as a written question if either the `words`, `lines` or `pages` attribute is specified, if there is no answer provided, or if an answer is provided using the `{answer}` syntax discussed shortly.

Note that an answer may be provided in a written question. If this is done, the answer is not split into answer choices and values like a fill in the blank answer. Instead, the answer is essentially a "note to markers", whether those markers are underpaid graduate students or unpaid AIs. Markua does not specify any microformat for this note to markers: it is just Markua text, kind of like a blockquote (but with each line starting with `!` not `>`).

A Markua Processor generating a MOOC may handle written questions at its own discretion, including not including them or giving them a `points` value of 0.

Examples:

~~~
{quiz, id: "quiz3"}

{pages: 2, points: 10}
? Why is 2019 like *1984*?

! If the student mentions Newspeak, give them an extra mark.

{words: 100, points: 2}
? Why is doubleplusungood the worst?

{lines: 10}
? Can you have multiple line answers in a written question?

! You bet you can!
!
! You can separate them with blank lines,
! and without blank lines.
!
! This is like a blockquote, which uses `>` characters.
~~~

Since a written question can have long answers, this increases the likelihood that typing these answers after a bunch of `! ` delimiters will be a pain. So, written questions (and **only** written questions) also support answers in the form of `{answer} ... {/answer}`, like this:

~~~
{quiz, points: 0, id: "quiz3"}

{lines: 10}
? Write a function in Ruby that takes an argument and returns three times that argument.

{answer}
The most straightforward way to do this is like this, since the last value evaluated in the function is returned:

```ruby
def triple(y)
  y*3
end
```

However, you can also explicitly say `return` if you like:

```ruby
def triple(y)
  return y*3
end
```
{/answer}
{/quiz}
~~~

#### Supported Attributes on Written Questions

Note that only one of `words`, `lines` or `pages` may be provided. Providing more than one is an error. Providing none of them means that the question is a fill in the blank question, not a written question.

`points`
: The number of points the question is worth. This number can be 0 or higher. The default is 1. A Markua Processor generating a MOOC may override this. For example, when generating a MOOC, Leanpub overrides all written questions to have a points attribute of 0, regardless of what (if anything) is specified for this attribute by the author.

`words`
: The maximum number of words the answer can be. Obviously this is more useful for online quizzes than paper ones.

`lines`
: The maximum number of lines the answer can be. Obviously this is more useful for paper quizzes than online ones. On paper, this is most useful for a short or long answer question.

`pages`
: The maximum number of pages the answer can be. Obviously this is more useful for paper quizzes than online ones. On paper, this is most useful for an essay question.

### Hints on Questions

Any question can contain a hint, regardless of question type or whether an answer is provided.

The hint starts on a line with a percent sign (`%`) followed by a single space. It must follow the question, but it can come either before or after the answer choices.

Hints can span multiple lines, if each line starts with a `%` sign. This is similar to Markdown handles block quotes with `>`.

The hint can be used by a Markua processor to show to students at appropriate times, such as when they get the answer wrong or leave it blank. The exact specifics are implementation-dependent. Hint support is optional in a Markua processor. However, if it's not supported, it must be ignored.

~~~
? What's 1 + 2?

% In a multiple choice question, if you're not sure, `c` is usually a good guess.

a) 1
b) 2
C) 3
d) 4

? Explain the meaning of *The Myth of Sisyphus*.

% Not the actual myth, the essay by Camus.
%
% For bonus points, speculate about Camus' life, death, and what he would have thought about autonomous cars.

? Where's the Eiffel Tower?

! /(Paris|France)/i

% The answer must contain the city and/or country.
~~~

The hint can be a useful feature for a Markua Processor. There is a lot of discretion here for Markua Processors to compete on features.

For example, here's how Leanpub handles hints:

1. We will show the hint as a popup next to the question in the web and mobile quiz views.
2. We will track if the student looked at the hint.
3. We will not subtract points for looking at hints for Leanpub-marked questions.
4. Whether the hint was used will be provided in the analytics, such as a CSV download that we make available to professors.
5. We will also output the hints for exercises in the "material book" for a course, in a section near the end of the book. This will be linked to via crosslinks from each exercise.
6. The answers page for a quiz or exercise will show the question, hint and answers for each question.

## Markua Processor Behaviour

A Markua Processor has many degrees of freedom in terms of whether, and how, to output quizzes and exercises.

For example, when outputting an online course or MOOC, the Markua Processor can basically do whatever it wants. It can choose to output an ebook of the course material only, and put all quizzes and exercises only in the online version. Or it can choose to put all the quizzes only in the online version, and include the exercises in the ebook version as well. Or it can include the quizzes and exercises in the ebook version, but only include the answers for the exercises in the ebook version.

If, on the other hand, a Markua Processor is outputting a textbook, it may choose to output the quizzes in an entirely separate ebook or print-ready PDF, for use in physical classrooms.

If a Markua Processor does output a quiz or exercise, it needs to do so in a medium-appropriate way. This includes outputting multiple-choice questions without showing their answers, of course. The display of fill in the blank and essay questions varies greatly based on whether the question is in an online quiz or exercise, in an ebook or on paper.

Markua Processors are encouraged to be creative here.

However, there are some rules. If a given quiz or exercise is output by a Markua Processor in an ebook or a physical book, the following things must occur:

1. The quiz or exercise must be output as questions-only, in the place in the document where the quiz was defined.
2. The questions must be numbered sequentially, incrementing by 1 for each question.
3. The questions must be numbered starting from the number specified by the `start-at` attribute if specified, or 1 if no `start-at` attribute is specified.
4. The multiple choice options in any question must be converted into a set of choices which all look the same, so that the correct answer is not indicated. Converting all choice letters to lowercase is sufficient here.
5. The answers, if provided, must be positioned somewhere separate from the questions, typically at the back of the book. This position can be controlled by the author using [book section directives](#book-section-directives), discussed later.

## Question Alternates

The fact that a Markua document can be used to create an online course or MOOC means that certain aspects of the syntax for quizzes and exercises are more robust than they would otherwise. One example of this is question alternates.

In an online course or MOOC, some professors might not want every question the same, despite the fact that question order and answer order can be randomized. So, Markua supports question alternates, using a simple (if slightly ugly) syntax. Question alternates are only supported in quizzes, since they make no sense to include in exercises.

To create question alternates, every question in the quiz (not just those with alternates) must be numbered sequentially, starting from 1, using a `?#` syntax. This is a question mark followed by the number of the question, e.g. `?1, ?2, ?3`. The questions in a quiz are numbered using sequential positive integers starting from 1: 1, 2, 3, etc.

The alternates are specified by providing the same number for multiple questions, e.g. `?1, ?1, ?1, ?2, ?3, ?4, ?4, ?5`. When the actual quiz is given, only one of the questions for the given question number is used.

Note that only the first question with a given number may have a `points` attribute--since all other alternates must use the same points value, specifying it would be pointless.

The following is an example of a quiz which uses question alternates. This ensures that to ensure that students get randomly selected versions of questions 1 and 4. Also, since `random-question-order: true` is used, the actual position of the questions is randomized after the specific questions are selected from the alternates.

~~~
{quiz, id: "midterm", random-question-order: true}
?1 What's 2 + 2?

! 4

?1 What's 2.2 + 2.2?

! 4.4

?2 what's 3 + 3?

! 6

?3 What's 4 + 4?

! 8

{points: 2}
?4 What's 5 + 5?

! 10

?4 What's 6 + 6?

! 12

?5 What's 7 + 7?

! 14
{/quiz}
~~~

Note that the syntax for question alternates is very strict. Every question must have a number, and these numbers must be in ascending order (except for the alternates, which have the same number as each other).

Question alternates can also be grouped by a `choose-questions` attribute attached to the first question alternate. In this case, the Markua Processor must choose the number of questions `m` specified from the given alternates with that number `n`, or `n choose m`. Note that in this scenario, the numbering after the alternates increases by `m`: for example, if a quiz starts with a `choose: 3`, the next question is numbered 4, not 2. This ensures that the person constructing the quiz knows what they are doing, and saves them from having to keep track in a scenario where there are multiple questions with a `choose-questions` attribute.

~~~
{quiz, id: "midterm", random-question-order: true}

{choose-questions: 3}
?1 What's 2 + 2?

! 4

?1 What's 2.2 + 2.2?

! 4.4

?1 what's 3 + 3?

! 6

?1 What's 4 + 4?

! 8

?1 What's 5 + 5?

! 10

{points: 2}
?4 What's 6 + 6?

! 12

?5 What's 7 + 7?

! 14
{/quiz}
~~~

A Markua Processor must treat any error in the numbering of question alternates (and the questions which follow) as an error, and not generate the quiz if there is any error. This is preferable to a Markua Processor of trying to guess at what the author meant, and trying to do the right thing. Fixing a syntax error takes a couple minutes of editing and a few minutes to publish the book or course again. However, fixing the consequences of a quiz being administered to hundreds--or thousands, or tens of thousands--of people with an incorrect number of questions, or with questions incorrectly used as alternates for each other, would be much more difficult.

# Appendices

{#handling-errors-and-warnings}
## Handling Errors and Warnings

Markua is very easy to write in. However, it is possible (especially when creating a course) to make mistakes.

There are three types of issues which can occur:

Warning
: This is a situation where the author is not making a mistake according to the Markua Specification, but the Markua Processor may not be able to do what is intended. This includes things like unrecognized or unsupported attributes, or Markua features which have not been implemented by the Markua Processor. When a Markua Processor encounters content which produces a warning, it should format the text block which contains the warning-producing content as well as possible.

Error
: This is an error made by the author which should not prevent the book or course from being produced. This describes almost every error that can be made by an author. This can be as simple as too many consecutive asterisks in formatting text, to as complex as bugs with list indentation or table formatting. When a Markua Processor encounters an error, it should format the text block which contains the error as plain paragraph text.

Fatal error
: This is an error made by the author which should prevent the book or course from being produced. This basically never happens when creating a book in Markua, but it can happen when creating a course, if a quiz or exercise is invalid. (Since quizzes and exercises can be used by Markua Processors such as Leanpub to create MOOCs which students take for marks, it's crucial for them to be valid. It would do an author a disservice to publish a course with invalid quizzes or exercises.) When a Markua Processor encounters a fatal error, it should not generate a book or course from the Markua document.

Throughout the Markua Specification, you will encounter the phrases "is a fatal error", "is an error" or "should produce a warning" to describe these cases.

Whenever a Markua Processor encounters something which is an error (fatal or not) or should produce a warning, it should also add an error or warning message to a list of error and warning messages. The content of this message should ideally be helpful, and indicate the position of the error or warning in the Markua document, whether it is an error or a warning, and as much information about the error or warning as is helpful.

The Markua Processor should keep going whenever possible, to continue processing the remainder of the Markua document. It would be really annoying for authors to only get one error or warning at a time from a Markua Processor. You want to find as many errors and warnings as possible.

When a Markua Processor is done processing a Markua document, it should provide the list of errors and warnings to the author via the appropriate channels. For a web-based tool, this can be a web page and/or an email message. For a command-line tool, this can be command-line output and/or an error log file.

Finally, a Markua Processor is NOT allowed to output the list of errors and warnings in the output format(s) (such as PDF, EPUB, MOBI or HTML) which it is producing.

## Acknowledgments

I ([Peter Armstrong](https://twitter.com/peterarmstrong)) am the creator of Markua, but I'm getting lots of help, especially from my Leanpub cofounders Scott Patten, Len Epp and Braden Simpson.

First, a huge thanks to [Scott Patten](https://twitter.com/scott_patten). Scott is the lead developer of Leanpub's book generation engine. Leanpub Flavoured Markdown would not have existed without Scott's code. Furthermore, Scott provided lots of valuable feedback in the development of the Markua specification, as well as adding Markua support to Leanpub's book generation engine. Scott gave me opinionated feedback on the Markua syntax, just as Aaron Swartz gave John Gruber feedback on the Markdown syntax. In many instances, e.g. the poetry syntax, what happens is that I come up with an idea which is good but flawed, Scott points the flaws out and suggests an alternative which often feels like giving into the status quo or feels too much like programming, I get really mad, and then I come up with something better than I would have otherwise. So, Markua probably also wouldn't exist if I couldn't--repeatedly and productively--get mad at Scott. (This sums up much of Leanpub's development, actually!)

Second, I'd like to thank [Len Epp](https://twitter.com/lenepp). Len has been instrumental in the development of Leanpub. He joined in the very early days, and has greatly helped our customer development process, helping (as he likes to tease me) grow Leanpub over 100x before Scott and I made him a co-founder. Besides giving the Markua spec a thorough copy edit, he has been a strong advocate for the way a non-programmer thinks about writing. For example, Len got me to change my mind about the three-or-more newline handling case--so, if you enjoy using extra newlines, you have Len to thank!

Third, I'd like to thank [Braden Simpson](https://twitter.com/bradensimpson). Braden has given me great feedback on crucial design decisions such as the image syntax.

I'd like to thank my father, who has read the manuscript and given me feedback more than once. I'd also like to thank a number of people, alphabetically, who have given me feedback or helped in some way: Assaf Arkin, Alberto De Lucca, André Bacci, Ann Chia-hui Tai, Axel Rauschmayer, Dave Warnock, Iva Cheung, Jacob Evelyn, Joseph Harfouch, Justin Damer, Ken Pratt, Matt Fikowski and Michael Müller.

Perhaps most important, Markua is built on Markdown. So, Markua literally would not exist without John Gruber and Aaron Swartz. Markua is now also using the CommonMark spec as the basis for specifying the HTML mapping, so I am really grateful to John MacFarlane and the team behind CommonMark. Markua is also benefitting from years of feedback about Leanpub Flavoured Markdown from many Leanpub authors. If it wasn't for these authors, there would be no Leanpub, and no Markua.

Finally, I would like to thank my wife Caroline and my son Evan: while this is not as long as my other books, a lot of thought and effort went into it, and a lot of sacrifice. Thanks very much.

{#markua-specification-status}
## Markua Specification Status

This is an in-progress, beta-quality specification. It is being constantly updated at <https://leanpub.com/markua>. To read the specification in PDF, EPUB, MOBI or HTML format, go there.

To read the specification manuscript in Markua, see <https://github.com/markuadoc/markua>.

To stay current on Markua progress, follow [@peterarmstrong](https://twitter.com/peterarmstrong) or [@leanpub](https://twitter.com/leanpub) on Twitter.

{#leanpub-markua-implementation-status}
## Leanpub's Markua Implementation Status

Markua support is currently in beta on Leanpub.

Some portions of the Markua specification have not yet been implemented in Leanpub. Most of these portions have no corresponding syntax in [Leanpub Flavoured Markdown](https://leanpub.com/help/manual). Leanpub Flavoured Markdown has been used in Leanpub for over 8 years.

I'm publishing the Markua spec in-progress, since I believe in [Lean Publishing](https://leanpub.com/lean). (Lean Publishing is the act of publishing an in-progress book using lightweight tools and many iterations to get reader feedback, pivot until you have the right book and build traction once you do.)

Here's a list of what still needs to be implemented in Leanpub's Markua implementation, organized according to the same structure as the Markua spec itself. Note that if there is nothing that is known to be wrong with a given aspect of Leanpub's Markua support, then *(works)* will be shown. Also, if a given section only has issues which are explained in subsections, then *(any issues are discussed in the specific elements below)* will be shown

Text Formatting
*(works)*

Headings for Parts, Chapters and Sections
: A header without a blank line after it should result in plain text, not a header

Paragraphs and Blank Lines
: *(works)*

Resources
: Code and images basically work, but many other types of resources have issues. See below for details.

Resource Insertion Methods
: The `class` attribute is not used.

Resource Types and Formats
: Support type attribute on resources

Images
: SVG support is not implemented yet (external or inline)
: Some attributes are not supported fully
: Support image attributes align, cite, url
: Support inline resources (e.g. inline SVG images)
: Fully support fullbleed attribute, not just in PDF
: Prevent fullbleed attribute from leaking into EPUB (whitelist?)
: Fix bugs with height attribute
: Support image attributes cite, url

Video
: Support video attributes embed, fullbleed, height, width
: Specifically forbid local video resources

Audio
: This is not implemented fully yet. Currently local audio does not work, and the only supported audio is a web resource.

Code
: Support dashed attributes for code resources line-numbers, number-from, crop-start, crop-end
: Support three-tildes defaults to text, backticks default to guess approach better. (There seem to be issues with guessing.)
: The amounth of space after code figures should be more configurable.
: Support inline local code resources, which are output as a span or figure based on 1 or n lines
: Support syntax highlighting of inline code spans
: We should not be collapsing spaces in code spans in HTML and EPUB.

Poetry
: This is not implemented yet.

Tables
: For simple tables, ensure that separators have at least three dashes and that other restrictions are enforced
: Support external tables
: Support table of tables (like table of contents)
: Table caption issue with unquoted captions
: Support table widths attributes on columns
: For complex tables, column alignment is interpreted as on a cell, not the whole column

Math
: Support AsciiMath
: Support MathML
: Support the `{format: blah}` format of attribute on math blocks and spans
: Support inline math resources

Whitespace: Spaces, Tabs and Newlines
: *(works)*

Newlines
: *(works)*

Spaces and Tabs
: *(works)*

Lists
: *(works)*

Bulleted Lists
: *(works)*

Numbered Lists
: *(works)*

Simple Lists
: *(works)*

Flat Lists
: *(works)*

Complex Lists
: *(works)*

Definition Lists
: Our definition lists sometimes don't force newlines after the term in the PDF output, e.g. “type This is the resource type..."

Block Elements
: *(any issues are discussed in the specific elements below)*

Scene Breaks (`* * *`)
: *(works)*

Page Breaks (`===`)
: *(works)*

Blockquotes (`>`)
: Support cite and url attributes
: Support blockquotes inside of a paragraph (currently they force new paragraphs before and after them)

Asides (`A>` or `{aside}`)
: *(works)*

Blurbs (`B>` or `{blurb}`)
: Blurbs separated with blank lines are incorrectly combined

Inserting Block Elements Inside Paragraphs
: Sometimes paragraph breaks are created incorrectly (such as inserting lists into paragraphs)

Quizzes and Exercises
: Figure out correct behaviour for the TOC

Span Elements
: Any specific issues with particular block elements are discussed in the specific elements below.

Links
: Add warning about relative URLs

Explicitly Creating Spans with `[`...`]`
: *(works)*

Footnotes and Endnotes
: Need to allow carets (`^`) in link text which are not in footnotes
: Endnotes do not show up in EPUB
: Do more testing on footnotes to ensure they work when nested inside nested block elements etc.

Crosslinks and ids
: Support "Referencing Chapter, Section and Figure Heading Names and Numbers in Crosslinks" section
: Support crosslinks on spans
: The `{#some-id}` syntax does not currently work when there are other attributes in the attribute list. So, in that case, you must currently use the `{id: some-id}` syntax if you are adding other attributes in a larger attribute list. You currently **CANNOT** add the `{#some-id}` to an attribute list. (This is also mentioned in the body of the spec. Once this works, remove it from both places.)

Character Substitution
: Support updates to en dashes, em dashes: currently `foo -- bar` and `foo--bar` both make en dashes.

Escaping Special Characters with Backslash (`\`)
: More testing is needed, and the specific spec section needs to be written better.

Backticks (`` ` ``)
: Support "if you want to output a backtick in a code span, you need to delimit the code span using two backticks"

Unicode Entities with `\u`
: This is not implemented yet.

Internationalization
: We need to use the correct type of quotation marks for Polish, Swedish, etc.
: In books whose main language is English, there are display issues with characters from other languages (e.g. Tamil)

Nesting Formatting
: When text formatting is incorrectly nested we need to output all the `*` and `_` characters

Emoji
: This is not implemented yet.
: Support Font Awesome in emoji syntax, such as `:fa-leanpub:`

Placeholders
: This is not implemented yet.

CriticMarkup
: This is not implemented yet.

A Hack for Forcing Whitespace
: *(works)*

Concatenating Files and Blank Lines
: *(works)*

Metadata
: Need to change the default value of `italicize-underlines` to `true`
: Need to change the default value of `html-style` to `markdown`
: Many features here are unimplemented. See below for details.
: We need to support Markua span formatting on custom copyright messages

Attributes
: Support ids and other attributes on span elements
: Raise user-visible errors for illegal attribute values
: Support `web` and `course-web` conditional inclusion attributes

Index Entries
: This is not implemented yet.

Directives
: Many directives are not implemented yet.
: Add section directives to Leanpub
: Remove the `{frontmatter}`, `{mainmatter}` and `{backmatter}` LFM directives once Markua section directives (e.g. `{section: mainmatter}`) are supported.
: Support `exercise-answers` and `quiz-answers`.
: Ensure that the `toc` directive is used to position the Table of Contents, so that people can add things like endorsement pages in advance of it, etc.
: Use `table-of-contents` not `toc`.
: Support language directives
: Support Conditional Inclusion Attributes on Headings (all that works right now is `book` and `sample`)
: Remove the `{pagebreak}` directive in Markua mode (this is from LFM)

Settings
: Many settings are not implemented yet.
: Get rid of code that treats Settings.txt as a special file in Markua books
: Handle curly braces in settings block

Courses
: *(any issues are discussed in the specific elements below)*

Quizzes and Exercises
: Need to prevent two consecutive exercises from being combined into one
: Support `show-answers`, `default-exercise-show-answers` and `default-quiz-show-answers`
: In an answer, semicolons inside of quotes should be treated as plain text
: Option to show {answer}...{/answer} content for Exercise questions in the back of a book
: Implement auto-submit and time-limit for quizzes

Question Types: Multiple Choice, Multiple Selection, Fill In The Blank, Written
: Multiple Selection questions are not implemented yet
: Written questions are not supported yet

Markua Processor Behaviour
: Quizzes and exercises are currently supported a lot better on the web (where the course is actually taken) than in the downloadable material books (which are just for reference).

Question Alternates
: *(works)*

If you find any issues which are not listed above, please email <mailto:hello@leanpub.com>.

{#copyright-ccby-commonmark}
## Copyright, CC BY-SA License, and CC Attribution of CommonMark

The Markua Specification is copyright © 2014 - 2019 Peter Armstrong.

The Markua Specification is available under the Creative Commons Attribution-ShareAlike 4.0 International ([CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/)) license.

Portions of the Markua Specification related to the parsing of Markua and the mapping of Markua to HTML, are taken from or are based on version 0.29 of the [CommonMark Spec](https://spec.commonmark.org/0.29/), which is licensed CC BY-SA 4.0 and is copyright John MacFarlane. These portions are used under the terms of the CC BY-SA 4.0 license. These portions are almost entirely contained in the [Parsing Markua](#parsing-markua) part, which is the second part of the Markua Specification.

Markua is different from CommonMark, but both have their origins in Markdown, as [originally defined by John Gruber](https://daringfireball.net/projects/markdown/syntax). The reason that the parts of the CommonMark Spec were incorporated into the Markua Specification is that the CommonMark Spec is that it is the best specification of Markdown, and for someone implementing a Markua Processor it is helpful to understand exactly how Markua differs from Markdown. So, the best way to do that is to show how Markua differs from CommonMark, and the best way to do that is to incorporate and adapt the parts of the CommonMark Spec which apply.

{#differences-with-markdown}
## Differences with Markdown

Markua has a number of differences from Markdown as defined by John Gruber. These are the main ones, at a high-level. For a detailed description of the the differences between Markua and CommonMark, compare the Mapping section of this specification to the CommonMark Spec.

{#no-inline-html}
### No Inline HTML

Inline HTML, in which HTML is inserted directly in the content of a Markua document, is not supported in Markua.

HTML is just one possible output format, and other possible Markua output formats (such as PDF) are not based on HTML. If inline HTML was supported, a Markua Processor would have to support parsing and meaningfully outputting all of HTML syntax as well as all of Markua syntax.

Markua and Markdown have different use cases. Markdown is a better way to write HTML; Markua is a better way to write a book. Since Markdown's only output format target is HTML, it might as well support inline HTML: generating HTML from HTML is as simple as passing the HTML through. From an implementation perspective, Markdown gets inline HTML support for free.

By not supporting inline HTML, Markua imposes more constraints on writers who would be tempted to use inline HTML for layout purposes. Since Markua does not support inline HTML, attempting to do complex layout in Markua using HTML is just not possible. And since it's not possible, the temptation to procrastinate by doing formatting is reduced.

Now, one design benefit of the support for inline HTML in Markdown is that Markdown's syntax can stay artificially small--since Markdown authors can always fall back to using HTML directly, Markdown does not need to be able to produce all of HTML. Since Markua does not support inline HTML, Markua must contain all concepts that it supports directly expressed using Markua syntax. For example, there is no official table syntax in Markdown, and Markdown authors can just use inline HTML tables. Since Markua does not support inline HTML, and since books often require tables, Markua needs to add a table syntax.

### No Reference Links

Markdown's reference link syntax and its implicit link name shortcuts are not supported in Markua. Markdown is a way of writing HTML designed by bloggers, and links are so plentiful in that medium that it makes some sense to support four syntaxes to create links. In ebooks, however, links are not as prevalent, so it makes sense to be opinionated here. Furthermore, in something as large as a book, the potential for id collisions in link definitions using the reference link syntax is a lot higher than in a blog post.

### No Relative URLs

In Markdown links, a URL can be either absolute (starting with `http://` or `https://`) or relative (just referring to a path like `/foo/bar.html`), since relative URLs can make sense when writing blog posts which live on web servers. In Markua, however, all URLs must be absolute (starting with `http://` or `https://`). (Yes, crosslinks can be thought of as relative URLs, but that's not what the point is.)

{#markdown-newlines}
### Newlines

In Markdown, you can manually wrap headings, paragraphs, lists and blockquotes with single newlines with no effect on the HTML output. Markdown, like HTML, treats single newlines as equivalent to single spaces.

In Markua, however, a forced line break in the input is a forced line break in all output formats. This is true for paragraphs, lists, blockquotes, asides and blurbs.

The decision in Markua to treat single newlines as forced line breaks means that Markua does not need to use the horrible hack that Markdown uses to output forced line breaks. In Markdown, to output a forced line break (a `<br/>` tag in HTML), you need to add two spaces at the end of the line, followed by a single newline. This means that it is impossible to look at a Markdown document with single newlines in it and understand what they mean: you need to find out if there are invisible formatting characters at the end of the line to find out if the newlines mean "newline" or "single space". Really.

Worse, some text editors (like Emacs, the editor I use) can be configured to remove trailing spaces at the ends of lines automatically when a file is saved. So, it's possible for me to dramatically modify a Markdown document by simply opening it and saving it unedited. Yikes!

Note that Markua handles two or more consecutive newlines identically to Markdown: they produce exactly one blank line, which separates block elements like paragraphs from each other.

### Headings

Markdown is a way of writing HTML, and HTML has 6 heading levels: `h1`, `h2`, `h3`, `h4`, `h5` and `h6`. In Markdown, you can create the 6 HTML heading levels using Markdown syntax.

What Markua does is to use a subset of the Markdown heading syntax, and then reinterpret those headings as specifying the heading levels that define the structure of the book.

Markua is also a lot more strict about heading syntax than Markdown. In Markdown, not only are there two syntaxes (atx and Setext) for making headings, what's worse is that [both of them can take many forms](http://daringfireball.net/projects/markdown/syntax#header). However, in Markua there is exactly one way of making every type of heading. It is a subset of the atx headings in Markdown; Setext headings are not supported.

To understand Markua headings and the differences with Markdown headings, it's helpful to understand the atx and Setext headings of Markdown.

{#setext_headings}
#### Setext Headings in Markdown

In the Setext-style of Markdown headings, top level headings can be made by adding a row of equals signs `========` below the heading, and second level headings can be made by adding a row of minus signs `--------` below the heading.

These are some Setext headers in Markdown:

~~~
This is an h1
=============

This is also an h1 (really)
=

This is an h2
-------------

This is also an h2 (really)
-
~~~

There are two main issues with this style of heading in Markdown:

1. It is inconsistent: It only supports defining `h1` and `h2`; to define h3 and below, the atx style of heading must be used.
2. It is confusing: Authors are confused about how many equals or minus signs you need to use. (As we saw above, the answer is 1, which looks disgusting.) Also, it's unclear whether you need to add a blank line below the row of equals signs or minus signs, and whether a heading is still produced if this is not done.

{#atx_headings}
#### atx Headings in Markdown

In Markdown, the other heading syntax is "atx" headers. The [atx format](http://www.aaronsw.com/2002/atx/intro) was created by Aaron Swartz in 2002, and is an important predecessor to Markdown. To create an atx heading, you put the following on a line by itself, with a blank line above and below it: between one and six pound signs (`#`), followed by one or more spaces or tabs, followed by text, followed optionally by whitespace and any number of `#` characters. The number of `#` characters determines the level of heading.

These are some atx headers in Markdown:

~~~
# This is an h1

# This is also an h1 ####################

## This is an h2

## This is also an h2 ###################

### This is an h3

### This is also an h3 ##################
~~~

Note that all the trailing `#` characters are ignored and are not part of the heading text.

#### Design Goals of Markua Headings

From reading the above discussion, you'll recognize that Markua headings are a subset of Markdown's atx headers. Since this is a meaningful difference, I want to explain the design goals of Markua headings:

1. From looking at a heading in a Markua document, an author must be able to know exactly what it is. It's not acceptable to need to reference metadata to know what the headings mean.
2. Only existing Markdown syntax can be used, to ensure that Markdown-aware tooling will work unchanged in essentially the correct way.
3. The number of leading pound signs must match the level of heading used in HTML. (So, part and chapter should both be h1, but with a different class.)
4. For a book with chapters only (no parts), the chapter headings must feel "top-level".
5. The syntax to create parts must be as economical as possible, while still feeling "higher level" than chapters.
6. There must be only one way to create every level of heading. Headings structure Markua documents, and must be clear, unambiguous and consistent.
7. It must be possible to switch back and forth between having parts in your book without having to modify all existing headings.
8. Books with parts and chapters must be able to have the same number of levels of sub-sections, without arbitrarily losing the ability to create a sub-sub-sub-sub-section.

The design of Markua headings meets these requirements, in what I think is an optimal way.

{#html-style-markdown}
### The `html-style` Setting

In Markua, there is an `html-style` setting, which can be `simple` or `markdown`.

The default value is `markdown`.

If this setting is `markdown`, then **bold text** should produce a `<strong>` tag, and *italic text* should produce an `<em>` tag.

If this setting is `simple`, then **bold text** should produce a `<b>` tag, and *italic text* should produce an `<i>` tag.

Markua is a plain text format designed for the writing of books. Books contain bold and italicized text--and have done so for centuries. Because of this, you'd think that the notion of making text bold or italic would be well understood.

If you think this, you are clearly not familiar with the work of the W3C. The notion of making something bold or italic is very controversial in HTML: first the `<b>` and `<i>` tags were used to do this, then they were deprecated in favour of `<strong>` and `<em>`, and now there are four main ways of adding emphasis to text in HTML5: [`<strong>`](http://www.w3.org/TR/html5/text-level-semantics.html#the-strong-element), [`<b>`](http://www.w3.org/TR/html5/text-level-semantics.html#the-b-element), [`<em>`](http://www.w3.org/TR/html5/text-level-semantics.html#the-em-element) and [`<i>`](http://www.w3.org/TR/html5/text-level-semantics.html#the-i-element).

The `<strong>` and `<b>` tags can wrap a span of text and add bold-esque emphasis to it, while the `<em>` and `<i>` tags can wrap a span of text and add italic-esque emphasis to it.

I say "esque" since there is no guarantee that any of the four tags will actually make anything bold or italic. Seriously.

Anyway, the state of the world is that there are intelligent people who think that `<strong>` and `<em>` are the only two legitimate ways to bold and italicize text. There are other intelligent people who just want to italicize or bold text in their sentences. For these people, sometimes italics are just italics, and not just when referring to [the name of a ship](https://www.w3.org/TR/html5/textlevel-semantics.html#the-i-element).

So, it is the position of Markua that there is no one correct answer about what HTML should always be produced by the bolding or italicizing of text. (If there was one correct answer, and if that answer was `<strong>` and `<em>`, then presumably the `<b>` and `<i>` tags would not exist.)

So, Markua has an `html-style` setting, which can be `simple` or `markdown`.

The default value of the setting is `markdown`, not `simple`. This is a pragmatic decision, for increased compatibility between Markua and Markdown implementations.

{#italicize-underlines-markdown}
### The `italicize-underlines` Setting

TODO

In Markdown, `*one asterisk*` and `_one underscore_` both produce *italics*. In Markua, `*one asterisk*` produces *italics*, and `_one underscore_` can produce either *italics* or an _underline_ based on the `italicize-underlines` global setting.

The default value of `italicize-underlines` is `true`, which means that by default, Markua behaves like Markdown and italicizes underlines.

If this setting is `false`, then underlined text **can** be produced by the Markua Processor: `_one underscore_` produces ____underlined text____, `___three underscores___` produces ____**bold + underlined text**____, and `____four underscores____` or `****four asterisks****` produces ____***bold + italic + underlined***____ text.

If this setting is `true`, then underlined text cannot be produced by the Markua Processor: `_one underscore_` produces *italicized text* (just like one asterisk), `___three underscores___` produces ***bold + italicized text*** (just like three asterisks), and `____four underscores____` or `****four asterisks****` **also** produces ***bold + italicized text*** (again, just like three asterisks).

Arguably, `false` would have been a better choice, since it will surprise

There are two reasons that the default value of this setting is `true`. First, and foremost, it's a better choice. Being able to underline text is better than not being able to do so, and the behaviour of the Markua Processor when this setting is `true` is surprising. Second, it enables authors learning Markua to learn the syntax to produce underlines, before needing to learn about global settings. The reason that this setting exists at all is for increased Markdown compatibility, as in Markdown all single `*asterisks*` and  `_underscores_` both produce *italicized text*. If you are coming from Markdown, your fingers may have learned the `_one underscore_` version. In that case, you may want to set this setting to `true`, either permanently to keep typing underscores for italics, or just while you get used to typing asterisks for italics. Finally, this setting also supports the use case in which an author has chosen to underline words, but the publisher chooses to print italics in all such cases: doing this requires changing one setting, rather than every use of underscores in the entire manuscript.
is set to `true`. The reason for this is simple: _underline_ is not always just a typewriter version of *italics*. In some languages and in some contexts, underlining serves a distinct, legitimate purpose.

### Lists

Markdown allows top-level lists to be indented by up to three spaces before the list delimiter. Markua does not allow this.

Markdown allows list markers to be followed by one or more spaces or a tab. Markua only allows single spaces.

Markua splits lists simple and complex lists, and defines indentation rules about the use of tabs and spaces accordingly. Markdown has a number of fairly loose rules about lists and indentation.

### Numbered Lists

Note that Markua calls numbered lists "numbered", whereas in Markdown they are called "ordered".

First and foremost, unlike in Markdown, in Markua the number that begins the list in the manuscript is the number that begins the list in the output.

Next, Markua lets you use closing parentheses (`)`) as list item delimiters; Markdown does not.

Finally, Markua defines many more types of numbered list numbering than Markdown. In Markdown, the only type of numbering supported is decimal numbering starting from 1. If you need any more features, you need to use inline HTML. However, since Markua does not support inline HTML, Markua provides more list types and features.

### Bulleted Lists

Note that Markua calls bulleted lists "bulleted", whereas in Markdown they are called "unordered".

First, and most important: in Markdown, lists and other block elements cannot be nested inside a paragraph; in Markua they can. Markdown inherits this incorrect decision from HTML; Markua inherits this correct decision from the way that books can be written.

Next, both Markua and Markdown let you start items in a bulleted list with an asterisk (`*`) or hyphen (`-`). Markdown also lets you use a plus sign (`+`), but Markua does not. Having three syntaxes is just overkill, so Markua drops the plus--it's far less common than the asterisk and hyphen. This is the same decision made by GitHub Flavored Markdown, which also [supports](https://help.github.com/articles/markdown-basics/) `*` and `-` but not `+`.

### Definition Lists

Markua supports definition lists; Markdown does not (except via inline HTML).

### Tables

Markdown does not specify a table syntax. Since Markdown supports inline HTML, it does not need to--if you want a table, you can simply use an inline HTML table. Since Markua does not support inline HTML, Markua defines a [table syntax](#tables).

### Code Blocks

The backtick syntax of adding inline code resources as spans is identical to the code span syntax of Markdown, however the optional attribute list is Markua-specific.

The syntax for inline code resource figures is similar to the "fenced code blocks" syntax of many Markdown extensions, such as PHP Markdown Extra and GitHub Flavoured Markdown.

The "four space indent" method of creating code blocks in Markdown is not supported in Markua. You cannot create an inline code figure this way. It may be slightly more pleasant to read, but it's obnoxious as hell to write, and it has terrible effects on the rest of the specification.

### Code Spans

Finally, unlike in CommonMark, code spans cannot contain newlines in Markua. CommonMark needs to support this because it supports "soft" line breaks (which turn into single spaces). Markua only supports hard line breaks (which turn into break tags), so the main requirement to support code spans is gone. What you're left with is something which is highly confusing in how newlines within a code span would be handled, compared to how they are handled in code blocks. So, they are not supported.

### Horizontal Rules and Scene Breaks

In Markdown, there are three types of ways of producing horizontal rules in HTML: by putting three or more asterisks (`***`), hyphens (`---`) or underscores (`___`) on a line by themselves, with or without spaces between them. Markua isn't in the business of producing HTML or horizontal rules. The `***` is used for scene breaks, `___` starts poetry, and `---` starts monospaced poetry.

### Images

Images in Markua are inserted in essentially the same way they are in Markdown for what Markdown calls "inline images". Markdown's inline images are not to be confused with Markua's inline image support, which means to define an SVG image in the text of a Markua document. Markdown's reference style image syntax is not supported in Markua for *any* type of resource--including images. There are two main reasons for not supporting reference style resource syntax in Markua. First, resources in Markua are complex enough without also having a reference syntax for them. Second, in something as large as a book, the potential for id collisions in link definitions using the reference link syntax is a lot higher than in the blog post length of typical Markdown documents.

### Inserting Block Elements Inside Paragraphs

In Markdown, lists and other block elements cannot be nested inside a paragraph. Instead, they all function like top-level siblings to a paragraph. This makes sense since Markdown is a way of producing HTML, and in HTML5 the W3C has [told anyone who wants to embed a list inside a paragraph to go pound sand](http://www.w3.org/TR/html5/grouping-content.html#the-p-element):

> "The solution is to realise that a paragraph, in HTML terms, is not a logical concept, but a structural one. In the fantastic example above, there are actually five paragraphs as defined by this specification: one before the list, one for each bullet, and one after the list."

So, basically, you can't embed a `<ul>` or `<ol>` inside a `<p>` tag in HTML5. Since Markdown is a way of producing HTML, you can't do it in Markdown either.

In Markdown, a block element like a list or figure is a sibling of the paragraphs before or after it:

~~~
This is paragraph one.

* this is a
* sibling of
* paragraphs one and two

This is paragraph two.
~~~

Markua supports this method of inserting block elements.

However, Markua is more than just a way of producing HTML. Markua is a way of authoring books. HTML is just one of the many output formats of Markua. And in books, there is a long history of embedding lists, code samples and figures in the middle of a paragraph--not in a separate top-level element, in the actual middle of the paragraph. So, Markua [supports this too](#inserting-into-paras).

{#differences-with-lfm}
## Differences with Leanpub Flavoured Markdown (LFM)

Besides differences with Markdown in general, Markua also has a number of specific differences with Leanpub Flavoured Markdown (LFM).

These are the top 10 differences between Markua and LFM:

1. In LFM, parts are created with `-# Part`. In Markua, parts are created with `# Part #`.
2. In LFM, there is a special syntax for inserting code samples: `<<[Optional Title](code/some_code_file.rb)`. In Markua, however, code is just a resource, and the LFM syntax is not supported.
3. In LFM, to mark code as added or removed, the magic words were `leanpub-start-insert`, `leanpub-end-insert`, `leanpub-start-delete` and `leanpub-end-delete`. In Markua, the magic words are `markua-start-insert`, `markua-end-insert`, `markua-start-delete` and `markua-end-delete`.
4. In LFM, there is a special syntax for inserting math: `{$$}...{/$$}`. This looks nice to people who like LaTeX, and looks like nothing else in Markdown. In Markua, however, math is just another resource, and that LaTeX-inspired syntax for wrapping math resources is not supported.
5. In LFM, there are `G>` "generic boxes". In Markua, these are replaced with blurbs (`B>`).
6. LFM had the `C>` syntax to center text, but we didn't have the same effect on generic boxes, and blurbs did not exist. In Markua, a `C>` syntax is just syntactic sugar for a centered blurb, for greater consistency. Because of this, the blurb also gets the ability to be centered by adding a {class: center} attribute.
7. LFM had `{rtl}` and `{ltr}` directives. These are not supported in Markua, and neither is a `{dir}` attribute in general: any given language is either a left-to-right or a right-to-left language, so specifying the language is sufficient.
8. LFM had a `{pagebreak}` directive. This is replaced by `===`.
9. LFM used Sample.txt to define the sample content. Markua moves the definition of what constitutes sample content into a `{sample: true}` attribute on parts, chapters and sections. So, in Markua, inclusion in the sample is at the content level, not the file level. This helps avoid a number of bugs that could happen with including at the file level, if a file did not clearly break at a chapter boundary. (So, in Leanpub, the Sample.txt approach is not supported for books which use Markua.)
10. LFM used Book.txt to define the book content. In Markua, the way that the list of manuscript files is defined is considered out of scope of the Markua specification itself. (Leanpub still uses the Book.txt approach to specify which files are in a book, but other Markua Processors could use other approaches.)

Besides these 10 differences, there are a number of smaller ones, which you will discover if you compare the Markua Specification to the [Leanpub Flavoured Markdown Manual](https://leanpub.com/leanpubflavouredmarkdownmanual/).

{#parsing-markua}
# Parsing Markua #

If you are an author who is looking to write a book or course in Markua, you can stop reading now. This part is not for you; it's just for people who are writing code to build a Markua Processor. Stop reading this and go write your book or course!

As discussed in the section [Copyright, CC BY-SA License, and CC Attribution of CommonMark](#copyright-ccby-commonmark), portions of this part are taken from or are based on version 0.29 of the [CommonMark Spec](https://spec.commonmark.org/0.29/), which is licensed CC BY-SA 4.0 and is copyright John MacFarlane. These portions are used under the terms of the CC BY-SA 4.0 license.

W> This part is an in-progress mess, compared to the previous part, Markua for Authors(#markua-for-authors). I'm publishing the Markua spec in this state for three reasons:
W>
W> 1. The content in this part is only useful for people building Markua parsers, which is less than 1% of the audience of this spec.
W> 2. The Markua for Authors content is far better now than it was previously, and I don't want to block that part on this one.
W> 3. I believe in [Lean Publishing](https://leanpub.com/lean). (Lean Publishing is the act of publishing an in-progress book using lightweight tools and many iterations to get reader feedback, pivot until you have the right book and build traction once you do.)

# Introduction

This part contains two things:

1. A discussion of concerns which only apply to people building Markua Processors.
2. The specification of the mapping of much of Markua to HTML.

A Markua Processor must be able to properly parse a Markua document and output HTML, as well as any other suitable output formats. (`/dev/null` may be web scale, but it is not a good output format for a Markua Processor.)

For example, the output formats which Leanpub produces from a single Markua document are: PDF, EPUB, MOBI, HTML, InDesign and (if applicable) a course with quizzes, exercises and automated marking.

The Markua Specification does not precisely define all output formats or the content of those output formats. Instead, the only required output format of a Markua Processor is HTML. Also, HTML is the only output format where any specification is provided. The reason that HTML is a required output format for a Markua Processor to be able to help ensure conformance to the Markua Specification.

For ease of comparison with CommonMark, this part is organized as much like the CommonMark Spec as possible.

## Format of the HTML Output Fragments

Please note that this is not a complete specification of the HTML documents produced by Markua Processors. It is only a specification of the parts of the HTML mapping where there is no need to have flexibility on the part of the Markua Processor. The HTML mapping should be thought of specifying HTML fragments, not documents. In all of the examples, a Markua Processor may add more HTML before and after the relevant content. The test is that the HTML produced contains the specified output, not that it is identical to the specified output.

Every Markua text example is a complete Markua document. If it is processed by a Markua Processor, the HTML which is produced should include the output. Now, since Markua does not specify the exact content of the HTML, the boilerplate before and after the HTML Output is not specified or included.

It can, however, be as simple as the following:

```
<html><head></head><body>
(...the HTML output...)
</body></html>
```

Every example uses the default Markua document settings, unless otherwise specified. Any custom settings are specified in a settings hash in the top of the example.

## Running the Tests

This chapter contains many examples with Markua and the corresponding HTML. Some of these examples are based on the CommonMark Spec, as [discussed earlier](#copyright-ccby-commonmark). These examples are intended to double as conformance tests. An accompanying script can be used to run the tests against any Markua Processor which outputs HTML:

```
python test/spec_tests.py --spec spec.txt --program PROGRAM
```

W> TODO - update the `spec_tests` script or provide a new one to do this based on the Markua spec.

## CSS Notes

Markua does not specify any CSS. However, advice will sometimes be offered in "CSS Note" sections. This is because certain semantically meaningful formatting (like strikethrough) is only done in HTML via CSS.

## Global Settings

The HTML which is output by a Markua Processor can be affected by certain global settings.

These are the default values of these settings:

~~~
{
html-style: default
italicize-underlines: false
}
~~~

If you want to make the HTML which is output by Markua as close to Markdown as possible, you will want to use a settings block which contains the following settings:

~~~
{
html-style: markdown
italicize-underlines: true
}
~~~

In the examples in this part, the global settings will be set to these values (`html-style: markdown` and `italicize-underlines: true`) unless otherwise indicated by the presence of a settings block. The reason for this is simple: this part incorporates many examples from the CommonMark Spec, and rewriting them all would be painful and pointless.

# Preliminaries

## Definitions of Characters and Lines

The following is the precise definition of characters, lines, etc in a Markua document. For compatibility with CommonMark, **this definition is identical to that used in the CommonMark specification**, and is taken verbatim from it.

Any sequence of [characters](#def-character) is a valid Markua document.

A [character]{#def-character} is a Unicode code point. Although some code points (for example, combining accents) do not correspond to characters in an intuitive sense, all code points count as characters for purposes of this spec.

This spec does not specify an encoding; it thinks of lines as composed of [characters](#character) rather than bytes. A conforming parser may be limited to a certain encoding.

A [line]{#def-line} is a sequence of zero or more [characters] other than newline (`U+000A`) or carriage return (`U+000D`), followed by a [line ending] or by the end of file.

A [line ending]{#def-line-ending} is a newline (`U+000A`), a carriage return (`U+000D`) not followed by a newline, or a carriage return and a following newline.

A line containing no characters, or a line containing only spaces (`U+0020`) or tabs (`U+0009`), is called a [blank line](@).

The following definitions of character classes will be used in this spec:

A [whitespace character]{#def-whitespace-character} is a space (`U+0020`), tab (`U+0009`), newline (`U+000A`), line tabulation (`U+000B`), form feed (`U+000C`), or carriage return (`U+000D`).

[Whitespace]{#def-whitespace} is a sequence of one or more [whitespace characters].

A [Unicode whitespace character]{#def-unicode-whitespace-character} is any code point in the Unicode `Zs` general category, or a tab (`U+0009`), carriage return (`U+000D`), newline (`U+000A`), or form feed (`U+000C`).

[Unicode whitespace]{#def-unicode-whitespace} is a sequence of one or more [Unicode whitespace characters](#def-unicode-whitespace-character).

A [space]{#def-space} is `U+0020`.
A [non-whitespace character]{#def-non-whitespace-character} is any character that is not a [whitespace character](#def-whitespace-character).

An [ASCII punctuation character]{#ascii-punctuation-character} is `!`, `"`, `#`, `$`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `-`, `.`, `/` (U+0021–2F), `:`, `;`, `<`, `=`, `>`, `?`, `@` (U+003A–0040), `[`, `\`, `]`, `^`, `_`, `` ` `` (U+005B–0060), `{`, `|`, `}`, or `~` (U+007B–007E).

A [punctuation character]{#punctuation-character} is an [ASCII punctuation character](#ascii-punctuation-character) or anything in the general Unicode categories  `Pc`, `Pd`, `Pe`, `Pf`, `Pi`, `Po`, or `Ps`.

## Tabs

Tabs are different from spaces.

In all the examples which follow, the `→` character is used to represent tabs.

There are two reasons for this:

1. It makes it clear whether tabs or spaces are being used.
2. It makes the examples closer to those of CommonMark, and enables some reuse between them.

This does mean, however, that the test script must convert the `→` characters into tabs before the inputs are passed to the Markua Processor. Similarly, if you are going to try any of these examples yourself with a Markua Processor like Leanpub, you need to replace all `→` characters with tabs.

Note that since Markua does not support indented code blocks, much of the discussion you would find in the equivalent section of the CommonMark Spec does not apply here. Tabs are discussed in Markua primarily in the context of simple lists.

## Insecure characters

For security reasons, the Unicode character `U+0000` must be replaced with the REPLACEMENT CHARACTER (`U+FFFD`).

# Blocks and inlines

We can think of a document as a sequence of [blocks](@)---structural elements like paragraphs, block quotations, lists, headings, rules, and code blocks.  Some blocks (like block quotes and list items) contain other blocks; others (like headings and paragraphs) contain [inline](@) content---text, links, emphasized text, images, code spans, and so on.

## Precedence

Indicators of block structure always take precedence over indicators of inline structure.  So, for example, the following is a list with two items, not a list with one item containing a code span:

```example
- `one
- two`
.
<ul>
<li>`one</li>
<li>two`</li>
</ul>
```

This means that parsing can proceed in two steps:  first, the block structure of the document can be discerned; second, text lines inside paragraphs, headings, and other block constructs can be parsed for inline structure.  The second step requires information about link reference definitions that will be available only at the end of the first step.  Note that the first step requires processing lines in sequence, but the second can be parallelized, since the inline parsing of one block element does not affect the inline parsing of any other.

## Container blocks and leaf blocks

We can divide blocks into two types: [container blocks](@), which can contain other blocks, and [leaf blocks](@),
which cannot.

# Leaf blocks

This section describes the different kinds of leaf block that make up a Markua document.

### Scene Breaks (`* * *`)

View the [specification](#scene-breaks).

In HTML, scene breaks are always mapped to `<hr/>`. Book designers can use CSS to replace th e `<hr/>` with whatever they want: there are no other ways to produce an `<hr/>` in Markua, so an `<hr/>` always means scene break.

##### Example SB-1

###### Markua Document

{#input-scene-break-1}
~~~
Paragraph one

* * *

Paragraph two

***

Paragraph three

*********

Paragraph four

*  *   *

Paragraph five
~~~

###### HTML Output

{#output-scene-break-1}
~~~
<p>Paragraph one</p>
<hr/>
<p>Paragraph two</p>
<hr/>
<p>Paragraph three</p>
<hr/>
<p>Paragraph four</p>
<hr/>
<p>Paragraph five</p>
~~~

##### Example SB-2

Note that scene breaks require blank lines above and below them. Also, note that you cannot add scene breaks inside list items.

Failing to meet either constraint will result in the scene break asterisks being inserted as text.

Also, note that `---` or `___` on a line by itself starts a poetry block (using monospaced or proportional fonts, respectively), instead of inserting a scene break. So, these are not shown here.

###### Markua Document

{#input-scene-break-2}
~~~
Paragraph one

* *

Paragraph two

**

Paragraph three
***
Paragraph four

* foo
* ***
* bar
~~~

###### HTML Output

{#output-scene-break-2}
~~~
<p>Paragraph one</p>
<p>* *</p>
<p>Paragraph two</p>
<p>**</p>
<p>Paragraph three</p>
<p>***</p>
<p>Paragraph four</p>
<ul>
  <li>foo</li>
  <li>***</li>
  <li>bar</li>
</ul>
~~~

### Page Breaks (`===`)

Markua does not specify how page breaks are mapped to HTML. A Markua Processor may do whatever it wants here.

## Code Blocks

View the [specification](#scene-breaks).



A [code fence](@) is a sequence
of at least three consecutive backtick characters (`` ` ``) or
tildes (`~`).  (Tildes and backticks cannot be mixed.)
A [fenced code block](@)
begins with a code fence, indented no more than three spaces.

The line with the opening code fence may optionally contain some text
following the code fence; this is trimmed of leading and trailing
whitespace and called the [info string](@). If the [info string] comes
after a backtick fence, it may not contain any backtick
characters.  (The reason for this restriction is that otherwise
some inline code would be incorrectly interpreted as the
beginning of a fenced code block.)

The content of the code block consists of all subsequent lines, until
a closing [code fence] of the same type as the code block
began with (backticks or tildes), and with at least as many backticks
or tildes as the opening code fence.  If the leading code fence is
indented N spaces, then up to N spaces of indentation are removed from
each line of the content (if present).  (If a content line is not
indented, it is preserved unchanged.  If it is indented less than N
spaces, all of the indentation is removed.)

The closing code fence may be indented up to three spaces, and may be
followed only by spaces, which are ignored.  If the end of the
containing block (or document) is reached and no closing code fence
has been found, the code block contains all of the lines after the
opening code fence until the end of the containing block (or
document).  (An alternative spec would require backtracking in the
event that a closing code fence is not found.  But this makes parsing
much less efficient, and there seems to be no real down side to the
behavior described here.)

A fenced code block may interrupt a paragraph, and does not require
a blank line either before or after.

The content of a code fence is treated as literal text, not parsed
as inlines.  The first word of the [info string] is typically used to
specify the language of the code sample, and rendered in the `class`
attribute of the `code` tag.  However, this spec does not mandate any
particular treatment of the [info string].

Here is a simple example with backticks:

```example
```
<
 >
```
.
<pre><code>&lt;
 &gt;
</code></pre>
```


With tildes:

```example
~~~
<
 >
~~~
.
<pre><code>&lt;
 &gt;
</code></pre>
```

Fewer than three backticks is not enough:

```example
``
foo
``
.
<p><code>foo</code></p>
```

The closing code fence must use the same character as the opening
fence:

```example
```
aaa
~~~
```
.
<pre><code>aaa
~~~
</code></pre>
```


```example
~~~
aaa
```
~~~
.
<pre><code>aaa
```
</code></pre>
```


The closing code fence must be at least as long as the opening fence:

```example
````
aaa
```
``````
.
<pre><code>aaa
```
</code></pre>
```


```example
~~~~
aaa
~~~
~~~~
.
<pre><code>aaa
~~~
</code></pre>
```


Unclosed code blocks are closed by the end of the document
(or the enclosing [block quote][block quotes] or [list item][list items]):

```example
```
.
<pre><code></code></pre>
```


```example
`````

```
aaa
.
<pre><code>
```
aaa
</code></pre>
```


```example
> ```
> aaa

bbb
.
<blockquote>
<pre><code>aaa
</code></pre>
</blockquote>
<p>bbb</p>
```


A code block can have all empty lines as its content:

```example
```


```
.
<pre><code>

</code></pre>
```


A code block can be empty:

```example
```
```
.
<pre><code></code></pre>
```


Fences can be indented.  If the opening fence is indented,
content lines will have equivalent opening indentation removed,
if present:

```example
 ```
 aaa
aaa
```
.
<pre><code>aaa
aaa
</code></pre>
```


```example
  ```
aaa
  aaa
aaa
  ```
.
<pre><code>aaa
aaa
aaa
</code></pre>
```


```example
   ```
   aaa
    aaa
  aaa
   ```
.
<pre><code>aaa
 aaa
aaa
</code></pre>
```


Four spaces indentation produces an indented code block:

```example
    ```
    aaa
    ```
.
<pre><code>```
aaa
```
</code></pre>
```


Closing fences may be indented by 0-3 spaces, and their indentation
need not match that of the opening fence:

```example
```
aaa
  ```
.
<pre><code>aaa
</code></pre>
```


```example
   ```
aaa
  ```
.
<pre><code>aaa
</code></pre>
```


This is not a closing fence, because it is indented 4 spaces:

```example
```
aaa
    ```
.
<pre><code>aaa
    ```
</code></pre>
```



Code fences (opening and closing) cannot contain internal spaces:

```example
``` ```
aaa
.
<p><code> </code>
aaa</p>
```


```example
~~~~~~
aaa
~~~ ~~
.
<pre><code>aaa
~~~ ~~
</code></pre>
```


Fenced code blocks can interrupt paragraphs, and can be followed
directly by paragraphs, without a blank line between:

```example
foo
```
bar
```
baz
.
<p>foo</p>
<pre><code>bar
</code></pre>
<p>baz</p>
```


Other blocks can also occur before and after fenced code blocks
without an intervening blank line:

```example
foo
---
~~~
bar
~~~
# baz
.
<h2>foo</h2>
<pre><code>bar
</code></pre>
<h1>baz</h1>
```


An [info string] can be provided after the opening code fence.
Although this spec doesn't mandate any particular treatment of
the info string, the first word is typically used to specify
the language of the code block. In HTML output, the language is
normally indicated by adding a class to the `code` element consisting
of `language-` followed by the language name.

```example
```ruby
def foo(x)
  return 3
end
```
.
<pre><code class="language-ruby">def foo(x)
  return 3
end
</code></pre>
```


```example
~~~~    ruby startline=3 $%@#$
def foo(x)
  return 3
end
~~~~~~~
.
<pre><code class="language-ruby">def foo(x)
  return 3
end
</code></pre>
```


```example
````;
````
.
<pre><code class="language-;"></code></pre>
```


[Info strings] for backtick code blocks cannot contain backticks:

```example
``` aa ```
foo
.
<p><code>aa</code>
foo</p>
```


[Info strings] for tilde code blocks can contain backticks and tildes:

```example
~~~ aa ``` ~~~
foo
~~~
.
<pre><code class="language-aa">foo
</code></pre>
```


Closing code fences cannot have [info strings]:

```example
```
``` aaa
```
.
<pre><code>``` aaa
</code></pre>
```

# Paragraphs

A sequence of non-blank lines that cannot be interpreted as other
kinds of blocks forms a [paragraph](@).
The contents of the paragraph are the result of parsing the
paragraph's raw content as inlines.  The paragraph's raw content
is formed by concatenating the lines and removing initial and final
[whitespace].

A simple example with two paragraphs:

```example
aaa

bbb
.
<p>aaa</p>
<p>bbb</p>
```


Paragraphs can contain multiple lines, but no blank lines:

```example
aaa
bbb

ccc
ddd
.
<p>aaa
bbb</p>
<p>ccc
ddd</p>
```


Multiple blank lines between paragraph have no effect:

```example
aaa


bbb
.
<p>aaa</p>
<p>bbb</p>
```


Leading spaces are skipped:

```example
  aaa
 bbb
.
<p>aaa
bbb</p>
```


Lines after the first may be indented any amount, since indented
code blocks cannot interrupt paragraphs.

```example
aaa
             bbb
                                       ccc
.
<p>aaa
bbb
ccc</p>
```


However, the first line may be indented at most three spaces,
or an indented code block will be triggered:

```example
   aaa
bbb
.
<p>aaa
bbb</p>
```


```example
    aaa
bbb
.
<pre><code>aaa
</code></pre>
<p>bbb</p>
```

## Blank Lines

[Blank lines] between block-level elements are ignored, except for the role they play in determining whether a [list] is [tight] or [loose].

Blank lines at the beginning and end of the document are also ignored.

##### Example BL-1

###### Markua Document

{#input-bl-1}
~~~


aaa


# aaa


~~~

###### HTML Output

{#output-bl-1}
~~~
<p>aaa</p>
<h1>aaa</h1>
~~~

##### Example BL-2

###### Markua Document

{#input-bl-2}
~~~
I'm paragraph one. Yay!

This is paragraph two.

This is paragraph three.
~~~

###### HTML Output

{#output-bl-2}
~~~
<p>I'm paragraph one. Yay!</p>
<p>This is paragraph two.</p>
<p>This is paragraph three.</p>
~~~



# Container blocks

A [container block](#container-blocks) is a block that has other blocks as its contents.  There are two basic kinds of container blocks:
[block quotes] and [list items].
[Lists] are meta-containers for [list items].

We define the syntax for container blocks recursively.  The general
form of the definition is:

> If X is a sequence of blocks, then the result of
> transforming X in such-and-such a way is a container of type Y
> with these blocks as its content.

So, we explain what counts as a block quote or list item by explaining
how these can be *generated* from their contents. This should suffice
to define the syntax, although it does not give a recipe for *parsing*
these constructions.  (A recipe is provided below in the section entitled
[A parsing strategy](#appendix-a-parsing-strategy).)

## Block quotes

A [block quote marker](@)
consists of 0-3 spaces of initial indent, plus (a) the character `>` together
with a following space, or (b) a single character `>` not followed by a space.

The following rules define [block quotes]:

1.  **Basic case.**  If a string of lines *Ls* constitute a sequence
    of blocks *Bs*, then the result of prepending a [block quote
    marker] to the beginning of each line in *Ls*
    is a [block quote](#block-quotes) containing *Bs*.

2.  **Laziness.**  If a string of lines *Ls* constitute a [block
    quote](#block-quotes) with contents *Bs*, then the result of deleting
    the initial [block quote marker] from one or
    more lines in which the next [non-whitespace character] after the [block
    quote marker] is [paragraph continuation
    text] is a block quote with *Bs* as its content.
    [Paragraph continuation text](@) is text
    that will be parsed as part of the content of a paragraph, but does
    not occur at the beginning of the paragraph.

3.  **Consecutiveness.**  A document cannot contain two [block
    quotes] in a row unless there is a [blank line] between them.

Nothing else counts as a [block quote](#block-quotes).

Here is a simple example:

```example
> # Foo
> bar
> baz
.
<blockquote>
<h1>Foo</h1>
<p>bar
baz</p>
</blockquote>
```


The spaces after the `>` characters can be omitted:

```example
># Foo
>bar
> baz
.
<blockquote>
<h1>Foo</h1>
<p>bar
baz</p>
</blockquote>
```


The `>` characters can be indented 1-3 spaces:

```example
   > # Foo
   > bar
 > baz
.
<blockquote>
<h1>Foo</h1>
<p>bar
baz</p>
</blockquote>
```


Four spaces gives us a code block:

```example
    > # Foo
    > bar
    > baz
.
<pre><code>&gt; # Foo
&gt; bar
&gt; baz
</code></pre>
```


The Laziness clause allows us to omit the `>` before
[paragraph continuation text]:

```example
> # Foo
> bar
baz
.
<blockquote>
<h1>Foo</h1>
<p>bar
baz</p>
</blockquote>
```


A block quote can contain some lazy and some non-lazy
continuation lines:

```example
> bar
baz
> foo
.
<blockquote>
<p>bar
baz
foo</p>
</blockquote>
```


Laziness only applies to lines that would have been continuations of
paragraphs had they been prepended with [block quote markers].
For example, the `> ` cannot be omitted in the second line of

```
> foo
> ---
```

without changing the meaning:

```example
> foo
---
.
<blockquote>
<p>foo</p>
</blockquote>
<hr />
```


Similarly, if we omit the `> ` in the second line of

```
> - foo
> - bar
```

then the block quote ends after the first line:

```example
> - foo
- bar
.
<blockquote>
<ul>
<li>foo</li>
</ul>
</blockquote>
<ul>
<li>bar</li>
</ul>
```


For the same reason, we can't omit the `> ` in front of
subsequent lines of an indented or fenced code block:

```example
>     foo
    bar
.
<blockquote>
<pre><code>foo
</code></pre>
</blockquote>
<pre><code>bar
</code></pre>
```


```example
> ```
foo
```
.
<blockquote>
<pre><code></code></pre>
</blockquote>
<p>foo</p>
<pre><code></code></pre>
```


Note that in the following case, we have a [lazy
continuation line]:

```example
> foo
    - bar
.
<blockquote>
<p>foo
- bar</p>
</blockquote>
```


To see why, note that in

```markdown
> foo
>     - bar
```

the `- bar` is indented too far to start a list, and can't
be an indented code block because indented code blocks cannot
interrupt paragraphs, so it is [paragraph continuation text].

A block quote can be empty:

```example
>
.
<blockquote>
</blockquote>
```


```example
>
>
>
.
<blockquote>
</blockquote>
```


A block quote can have initial or final blank lines:

```example
>
> foo
>
.
<blockquote>
<p>foo</p>
</blockquote>
```


A blank line always separates block quotes:

```example
> foo

> bar
.
<blockquote>
<p>foo</p>
</blockquote>
<blockquote>
<p>bar</p>
</blockquote>
```


(Most current Markdown implementations, including John Gruber's
original `Markdown.pl`, will parse this example as a single block quote
with two paragraphs.  But it seems better to allow the author to decide
whether two block quotes or one are wanted.)

Consecutiveness means that if we put these block quotes together,
we get a single block quote:

```example
> foo
> bar
.
<blockquote>
<p>foo
bar</p>
</blockquote>
```


To get a block quote with two paragraphs, use:

```example
> foo
>
> bar
.
<blockquote>
<p>foo</p>
<p>bar</p>
</blockquote>
```


Block quotes can interrupt paragraphs:

```example
foo
> bar
.
<p>foo</p>
<blockquote>
<p>bar</p>
</blockquote>
```


In general, blank lines are not needed before or after block
quotes:

```example
> aaa
***
> bbb
.
<blockquote>
<p>aaa</p>
</blockquote>
<hr />
<blockquote>
<p>bbb</p>
</blockquote>
```


However, because of laziness, a blank line is needed between
a block quote and a following paragraph:

```example
> bar
baz
.
<blockquote>
<p>bar
baz</p>
</blockquote>
```


```example
> bar

baz
.
<blockquote>
<p>bar</p>
</blockquote>
<p>baz</p>
```


```example
> bar
>
baz
.
<blockquote>
<p>bar</p>
</blockquote>
<p>baz</p>
```


It is a consequence of the Laziness rule that any number
of initial `>`s may be omitted on a continuation line of a
nested block quote:

```example
> > > foo
bar
.
<blockquote>
<blockquote>
<blockquote>
<p>foo
bar</p>
</blockquote>
</blockquote>
</blockquote>
```


```example
>>> foo
> bar
>>baz
.
<blockquote>
<blockquote>
<blockquote>
<p>foo
bar
baz</p>
</blockquote>
</blockquote>
</blockquote>
```


When including an indented code block in a block quote,
remember that the [block quote marker] includes
both the `>` and a following space.  So *five spaces* are needed after
the `>`:

```example
>     code

>    not code
.
<blockquote>
<pre><code>code
</code></pre>
</blockquote>
<blockquote>
<p>not code</p>
</blockquote>
```



## List items

A [list marker](@) is a
[bullet list marker] or an [ordered list marker].

A [bullet list marker](@)
is a `-`, `+`, or `*` character.

An [ordered list marker](@)
is a sequence of 1--9 arabic digits (`0-9`), followed by either a
`.` character or a `)` character.  (The reason for the length
limit is that with 10 digits we start seeing integer overflows
in some browsers.)

The following rules define [list items]:

1.  **Basic case.**  If a sequence of lines *Ls* constitute a sequence of
    blocks *Bs* starting with a [non-whitespace character], and *M* is a
    list marker of width *W* followed by 1 ≤ *N* ≤ 4 spaces, then the result
    of prepending *M* and the following spaces to the first line of
    *Ls*, and indenting subsequent lines of *Ls* by *W + N* spaces, is a
    list item with *Bs* as its contents.  The type of the list item
    (bullet or ordered) is determined by the type of its list marker.
    If the list item is ordered, then it is also assigned a start
    number, based on the ordered list marker.

    Exceptions:

    1. When the first list item in a [list] interrupts
       a paragraph---that is, when it starts on a line that would
       otherwise count as [paragraph continuation text]---then (a)
       the lines *Ls* must not begin with a blank line, and (b) if
       the list item is ordered, the start number must be 1.
    2. If any line is a [thematic break][thematic breaks] then
       that line is not a list item.

For example, let *Ls* be the lines

```example
A paragraph
with two lines.

    indented code

> A block quote.
.
<p>A paragraph
with two lines.</p>
<pre><code>indented code
</code></pre>
<blockquote>
<p>A block quote.</p>
</blockquote>
```


And let *M* be the marker `1.`, and *N* = 2.  Then rule #1 says
that the following is an ordered list item with start number 1,
and the same contents as *Ls*:

```example
1.  A paragraph
    with two lines.

        indented code

    > A block quote.
.
<ol>
<li>
<p>A paragraph
with two lines.</p>
<pre><code>indented code
</code></pre>
<blockquote>
<p>A block quote.</p>
</blockquote>
</li>
</ol>
```


The most important thing to notice is that the position of
the text after the list marker determines how much indentation
is needed in subsequent blocks in the list item.  If the list
marker takes up two spaces, and there are three spaces between
the list marker and the next [non-whitespace character], then blocks
must be indented five spaces in order to fall under the list
item.

Here are some examples showing how far content must be indented to be
put under the list item:

```example
- one

 two
.
<ul>
<li>one</li>
</ul>
<p>two</p>
```


```example
- one

  two
.
<ul>
<li>
<p>one</p>
<p>two</p>
</li>
</ul>
```


```example
 -    one

     two
.
<ul>
<li>one</li>
</ul>
<pre><code> two
</code></pre>
```


```example
 -    one

      two
.
<ul>
<li>
<p>one</p>
<p>two</p>
</li>
</ul>
```


It is tempting to think of this in terms of columns:  the continuation
blocks must be indented at least to the column of the first
[non-whitespace character] after the list marker. However, that is not quite right.
The spaces after the list marker determine how much relative indentation
is needed.  Which column this indentation reaches will depend on
how the list item is embedded in other constructions, as shown by
this example:

```example
   > > 1.  one
>>
>>     two
.
<blockquote>
<blockquote>
<ol>
<li>
<p>one</p>
<p>two</p>
</li>
</ol>
</blockquote>
</blockquote>
```


Here `two` occurs in the same column as the list marker `1.`,
but is actually contained in the list item, because there is
sufficient indentation after the last containing blockquote marker.

The converse is also possible.  In the following example, the word `two`
occurs far to the right of the initial text of the list item, `one`, but
it is not considered part of the list item, because it is not indented
far enough past the blockquote marker:

```example
>>- one
>>
  >  > two
.
<blockquote>
<blockquote>
<ul>
<li>one</li>
</ul>
<p>two</p>
</blockquote>
</blockquote>
```


Note that at least one space is needed between the list marker and
any following content, so these are not list items:

```example
-one

2.two
.
<p>-one</p>
<p>2.two</p>
```


A list item may contain blocks that are separated by more than
one blank line.

```example
- foo


  bar
.
<ul>
<li>
<p>foo</p>
<p>bar</p>
</li>
</ul>
```


A list item may contain any kind of block:

```example
1.  foo

    ```
    bar
    ```

    baz

    > bam
.
<ol>
<li>
<p>foo</p>
<pre><code>bar
</code></pre>
<p>baz</p>
<blockquote>
<p>bam</p>
</blockquote>
</li>
</ol>
```


A list item that contains an indented code block will preserve
empty lines within the code block verbatim.

```example
- Foo

      bar


      baz
.
<ul>
<li>
<p>Foo</p>
<pre><code>bar


baz
</code></pre>
</li>
</ul>
```

Note that ordered list start numbers must be nine digits or less:

```example
123456789. ok
.
<ol start="123456789">
<li>ok</li>
</ol>
```


```example
1234567890. not ok
.
<p>1234567890. not ok</p>
```


A start number may begin with 0s:

```example
0. ok
.
<ol start="0">
<li>ok</li>
</ol>
```


```example
003. ok
.
<ol start="3">
<li>ok</li>
</ol>
```


A start number may not be negative:

```example
-1. not ok
.
<p>-1. not ok</p>
```



2.  **Item starting with indented code.**  If a sequence of lines *Ls*
    constitute a sequence of blocks *Bs* starting with an indented code
    block, and *M* is a list marker of width *W* followed by
    one space, then the result of prepending *M* and the following
    space to the first line of *Ls*, and indenting subsequent lines of
    *Ls* by *W + 1* spaces, is a list item with *Bs* as its contents.
    If a line is empty, then it need not be indented.  The type of the
    list item (bullet or ordered) is determined by the type of its list
    marker.  If the list item is ordered, then it is also assigned a
    start number, based on the ordered list marker.

An indented code block will have to be indented four spaces beyond
the edge of the region where text will be included in the list item.
In the following case that is 6 spaces:

```example
- foo

      bar
.
<ul>
<li>
<p>foo</p>
<pre><code>bar
</code></pre>
</li>
</ul>
```


And in this case it is 11 spaces:

```example
  10.  foo

           bar
.
<ol start="10">
<li>
<p>foo</p>
<pre><code>bar
</code></pre>
</li>
</ol>
```


If the *first* block in the list item is an indented code block,
then by rule #2, the contents must be indented *one* space after the
list marker:

```example
    indented code

paragraph

    more code
.
<pre><code>indented code
</code></pre>
<p>paragraph</p>
<pre><code>more code
</code></pre>
```


```example
1.     indented code

   paragraph

       more code
.
<ol>
<li>
<pre><code>indented code
</code></pre>
<p>paragraph</p>
<pre><code>more code
</code></pre>
</li>
</ol>
```


Note that an additional space indent is interpreted as space
inside the code block:

```example
1.      indented code

   paragraph

       more code
.
<ol>
<li>
<pre><code> indented code
</code></pre>
<p>paragraph</p>
<pre><code>more code
</code></pre>
</li>
</ol>
```


Note that rules #1 and #2 only apply to two cases:  (a) cases
in which the lines to be included in a list item begin with a
[non-whitespace character], and (b) cases in which
they begin with an indented code
block.  In a case like the following, where the first block begins with
a three-space indent, the rules do not allow us to form a list item by
indenting the whole thing and prepending a list marker:

```example
   foo

bar
.
<p>foo</p>
<p>bar</p>
```


```example
-    foo

  bar
.
<ul>
<li>foo</li>
</ul>
<p>bar</p>
```


This is not a significant restriction, because when a block begins
with 1-3 spaces indent, the indentation can always be removed without
a change in interpretation, allowing rule #1 to be applied.  So, in
the above case:

```example
-  foo

   bar
.
<ul>
<li>
<p>foo</p>
<p>bar</p>
</li>
</ul>
```


3.  **Item starting with a blank line.**  If a sequence of lines *Ls*
    starting with a single [blank line] constitute a (possibly empty)
    sequence of blocks *Bs*, not separated from each other by more than
    one blank line, and *M* is a list marker of width *W*,
    then the result of prepending *M* to the first line of *Ls*, and
    indenting subsequent lines of *Ls* by *W + 1* spaces, is a list
    item with *Bs* as its contents.
    If a line is empty, then it need not be indented.  The type of the
    list item (bullet or ordered) is determined by the type of its list
    marker.  If the list item is ordered, then it is also assigned a
    start number, based on the ordered list marker.

Here are some list items that start with a blank line but are not empty:

```example
-
  foo
-
  ```
  bar
  ```
-
      baz
.
<ul>
<li>foo</li>
<li>
<pre><code>bar
</code></pre>
</li>
<li>
<pre><code>baz
</code></pre>
</li>
</ul>
```

When the list item starts with a blank line, the number of spaces
following the list marker doesn't change the required indentation:

```example
-
  foo
.
<ul>
<li>foo</li>
</ul>
```


A list item can begin with at most one blank line.
In the following example, `foo` is not part of the list
item:

```example
-

  foo
.
<ul>
<li></li>
</ul>
<p>foo</p>
```


Here is an empty bullet list item:

```example
- foo
-
- bar
.
<ul>
<li>foo</li>
<li></li>
<li>bar</li>
</ul>
```


It does not matter whether there are spaces following the [list marker]:

```example
- foo
-
- bar
.
<ul>
<li>foo</li>
<li></li>
<li>bar</li>
</ul>
```


Here is an empty ordered list item:

```example
1. foo
2.
3. bar
.
<ol>
<li>foo</li>
<li></li>
<li>bar</li>
</ol>
```


A list may start or end with an empty list item:

```example
*
.
<ul>
<li></li>
</ul>
```

However, an empty list item cannot interrupt a paragraph:

```example
foo
*

foo
1.
.
<p>foo
*</p>
<p>foo
1.</p>
```


4.  **Indentation.**  If a sequence of lines *Ls* constitutes a list item
    according to rule #1, #2, or #3, then the result of indenting each line
    of *Ls* by 1-3 spaces (the same for each line) also constitutes a
    list item with the same contents and attributes.  If a line is
    empty, then it need not be indented.

Indented one space:

```example
 1.  A paragraph
     with two lines.

         indented code

     > A block quote.
.
<ol>
<li>
<p>A paragraph
with two lines.</p>
<pre><code>indented code
</code></pre>
<blockquote>
<p>A block quote.</p>
</blockquote>
</li>
</ol>
```


Indented two spaces:

```example
  1.  A paragraph
      with two lines.

          indented code

      > A block quote.
.
<ol>
<li>
<p>A paragraph
with two lines.</p>
<pre><code>indented code
</code></pre>
<blockquote>
<p>A block quote.</p>
</blockquote>
</li>
</ol>
```


Indented three spaces:

```example
   1.  A paragraph
       with two lines.

           indented code

       > A block quote.
.
<ol>
<li>
<p>A paragraph
with two lines.</p>
<pre><code>indented code
</code></pre>
<blockquote>
<p>A block quote.</p>
</blockquote>
</li>
</ol>
```


Four spaces indent gives a code block:

```example
    1.  A paragraph
        with two lines.

            indented code

        > A block quote.
.
<pre><code>1.  A paragraph
    with two lines.

        indented code

    &gt; A block quote.
</code></pre>
```



5.  **Laziness.**  If a string of lines *Ls* constitute a [list
    item](#list-items) with contents *Bs*, then the result of deleting
    some or all of the indentation from one or more lines in which the
    next [non-whitespace character] after the indentation is
    [paragraph continuation text] is a
    list item with the same contents and attributes.  The unindented
    lines are called
    [lazy continuation line](@)s.

Here is an example with [lazy continuation lines]:

```example
  1.  A paragraph
with two lines.

          indented code

      > A block quote.
.
<ol>
<li>
<p>A paragraph
with two lines.</p>
<pre><code>indented code
</code></pre>
<blockquote>
<p>A block quote.</p>
</blockquote>
</li>
</ol>
```


Indentation can be partially deleted:

```example
  1.  A paragraph
    with two lines.
.
<ol>
<li>A paragraph
with two lines.</li>
</ol>
```


These examples show how laziness can work in nested structures:

```example
> 1. > Blockquote
continued here.
.
<blockquote>
<ol>
<li>
<blockquote>
<p>Blockquote
continued here.</p>
</blockquote>
</li>
</ol>
</blockquote>
```


```example
> 1. > Blockquote
> continued here.
.
<blockquote>
<ol>
<li>
<blockquote>
<p>Blockquote
continued here.</p>
</blockquote>
</li>
</ol>
</blockquote>
```



6.  **That's all.** Nothing that is not counted as a list item by rules
    #1--5 counts as a [list item](#list-items).

The rules for sublists follow from the general rules
[above][List items].  A sublist must be indented the same number
of spaces a paragraph would need to be in order to be included
in the list item.

So, in this case we need two spaces indent:

```example
- foo
  - bar
    - baz
      - boo
.
<ul>
<li>foo
<ul>
<li>bar
<ul>
<li>baz
<ul>
<li>boo</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
```


One is not enough:

```example
- foo
 - bar
  - baz
   - boo
.
<ul>
<li>foo</li>
<li>bar</li>
<li>baz</li>
<li>boo</li>
</ul>
```


Here we need four, because the list marker is wider:

```example
10) foo
    - bar
.
<ol start="10">
<li>foo
<ul>
<li>bar</li>
</ul>
</li>
</ol>
```


Three is not enough:

```example
10) foo
   - bar
.
<ol start="10">
<li>foo</li>
</ol>
<ul>
<li>bar</li>
</ul>
```


A list may be the first block in a list item:

```example
- - foo
.
<ul>
<li>
<ul>
<li>foo</li>
</ul>
</li>
</ul>
```


```example
1. - 2. foo
.
<ol>
<li>
<ul>
<li>
<ol start="2">
<li>foo</li>
</ol>
</li>
</ul>
</li>
</ol>
```

## Lists

A [list](@) is a sequence of one or more
list items [of the same type].  The list items
may be separated by any number of blank lines.

Two list items are [of the same type](@)
if they begin with a [list marker] of the same type.
Two list markers are of the
same type if (a) they are bullet list markers using the same character
(`-`, `+`, or `*`) or (b) they are ordered list numbers with the same
delimiter (either `.` or `)`).

A list is an [ordered list](@)
if its constituent list items begin with
[ordered list markers], and a
[bullet list](@) if its constituent list
items begin with [bullet list markers].

The [start number](@)
of an [ordered list] is determined by the list number of
its initial list item.  The numbers of subsequent list items are
disregarded.

A list is [loose](@) if any of its constituent
list items are separated by blank lines, or if any of its constituent
list items directly contain two block-level elements with a blank line
between them.  Otherwise a list is [tight](@).
(The difference in HTML output is that paragraphs in a loose list are
wrapped in `<p>` tags, while paragraphs in a tight list are not.)

Changing the bullet or ordered list delimiter starts a new list:

```example
- foo
- bar
+ baz
.
<ul>
<li>foo</li>
<li>bar</li>
</ul>
<ul>
<li>baz</li>
</ul>
```


```example
1. foo
2. bar
3) baz
.
<ol>
<li>foo</li>
<li>bar</li>
</ol>
<ol start="3">
<li>baz</li>
</ol>
```


In Markua, a list can be nested inside a paragraph.

```example
Foo
- bar
- baz
.
<p>Foo</p>
<ul>
<li>bar</li>
<li>baz</li>
</ul>
```

In Markua, we do allow lists to interrupt paragraphs, for
two reasons.  First, it is natural and not uncommon for people
to start lists without blank lines:

```
I need to buy
- new shoes
- a coat
- a plane ticket
```

Second, we are attracted to a

> [principle of uniformity](@):
> if a chunk of text has a certain
> meaning, it will continue to have the same meaning when put into a
> container block (such as a list item or blockquote).

(Indeed, the spec for [list items] and [block quotes] presupposes
this principle.) This principle implies that if

```
  * I need to buy
    - new shoes
    - a coat
    - a plane ticket
```

is a list item containing a paragraph followed by a nested sublist,
as all Markdown implementations agree it is (though the paragraph
may be rendered without `<p>` tags, since the list is "tight"),
then

```
I need to buy
- new shoes
- a coat
- a plane ticket
```

by itself should be a paragraph followed by a nested sublist.

Since it is well established Markdown practice to allow lists to
interrupt paragraphs inside list items, the [principle of
uniformity] requires us to allow this outside list items as
well.  ([reStructuredText](http://docutils.sourceforge.net/rst.html)
takes a different approach, requiring blank lines before lists
even inside other list items.)

In order to solve of unwanted lists in paragraphs with
hard-wrapped numerals, we allow only lists starting with `1` to
interrupt paragraphs.  Thus,

```example
The number of windows in my house is
14.  The number of doors is 6.
.
<p>The number of windows in my house is
14.  The number of doors is 6.</p>
```

We may still get an unintended result in cases like

```example
The number of windows in my house is
1.  The number of doors is 6.
.
<p>The number of windows in my house is</p>
<ol>
<li>The number of doors is 6.</li>
</ol>
```

but this rule should prevent most spurious list captures.

There can be any number of blank lines between items:

```example
- foo

- bar


- baz
.
<ul>
<li>
<p>foo</p>
</li>
<li>
<p>bar</p>
</li>
<li>
<p>baz</p>
</li>
</ul>
```

```example
- foo
  - bar
    - baz


      bim
.
<ul>
<li>foo
<ul>
<li>bar
<ul>
<li>
<p>baz</p>
<p>bim</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
```


To separate consecutive lists of the same type, or to separate a
list from an indented code block that would otherwise be parsed
as a subparagraph of the final list item, you can insert a blank HTML
comment:

```example
- foo
- bar

<!-- -->

- baz
- bim
.
<ul>
<li>foo</li>
<li>bar</li>
</ul>
<!-- -->
<ul>
<li>baz</li>
<li>bim</li>
</ul>
```


```example
-   foo

    notcode

-   foo

<!-- -->

    code
.
<ul>
<li>
<p>foo</p>
<p>notcode</p>
</li>
<li>
<p>foo</p>
</li>
</ul>
<!-- -->
<pre><code>code
</code></pre>
```


List items need not be indented to the same level.  The following
list items will be treated as items at the same list level,
since none is indented enough to belong to the previous list
item:

```example
- a
 - b
  - c
   - d
  - e
 - f
- g
.
<ul>
<li>a</li>
<li>b</li>
<li>c</li>
<li>d</li>
<li>e</li>
<li>f</li>
<li>g</li>
</ul>
```


```example
1. a

  2. b

   3. c
.
<ol>
<li>
<p>a</p>
</li>
<li>
<p>b</p>
</li>
<li>
<p>c</p>
</li>
</ol>
```

Note, however, that list items may not be indented more than
three spaces.  Here `- e` is treated as a paragraph continuation
line, because it is indented more than three spaces:

```example
- a
 - b
  - c
   - d
    - e
.
<ul>
<li>a</li>
<li>b</li>
<li>c</li>
<li>d
- e</li>
</ul>
```

And here, `3. c` is treated as in indented code block,
because it is indented four spaces and preceded by a
blank line.

```example
1. a

  2. b

    3. c
.
<ol>
<li>
<p>a</p>
</li>
<li>
<p>b</p>
</li>
</ol>
<pre><code>3. c
</code></pre>
```


This is a loose list, because there is a blank line between
two of the list items:

```example
- a
- b

- c
.
<ul>
<li>
<p>a</p>
</li>
<li>
<p>b</p>
</li>
<li>
<p>c</p>
</li>
</ul>
```


So is this, with a empty second item:

```example
* a
*

* c
.
<ul>
<li>
<p>a</p>
</li>
<li></li>
<li>
<p>c</p>
</li>
</ul>
```


These are loose lists, even though there is no space between the items,
because one of the items directly contains two block-level elements
with a blank line between them:

```example
- a
- b

  c
- d
.
<ul>
<li>
<p>a</p>
</li>
<li>
<p>b</p>
<p>c</p>
</li>
<li>
<p>d</p>
</li>
</ul>
```


```example
- a
- b

  [ref]: /url
- d
.
<ul>
<li>
<p>a</p>
</li>
<li>
<p>b</p>
</li>
<li>
<p>d</p>
</li>
</ul>
```


This is a tight list, because the blank lines are in a code block:

```example
- a
- ```
  b


  ```
- c
.
<ul>
<li>a</li>
<li>
<pre><code>b


</code></pre>
</li>
<li>c</li>
</ul>
```


This is a tight list, because the blank line is between two
paragraphs of a sublist.  So the sublist is loose while
the outer list is tight:

```example
- a
  - b

    c
- d
.
<ul>
<li>a
<ul>
<li>
<p>b</p>
<p>c</p>
</li>
</ul>
</li>
<li>d</li>
</ul>
```


This is a tight list, because the blank line is inside the
block quote:

```example
* a
  > b
  >
* c
.
<ul>
<li>a
<blockquote>
<p>b</p>
</blockquote>
</li>
<li>c</li>
</ul>
```


This list is tight, because the consecutive block elements
are not separated by blank lines:

```example
- a
  > b
  ```
  c
  ```
- d
.
<ul>
<li>a
<blockquote>
<p>b</p>
</blockquote>
<pre><code>c
</code></pre>
</li>
<li>d</li>
</ul>
```


A single-paragraph list is tight:

```example
- a
.
<ul>
<li>a</li>
</ul>
```


```example
- a
  - b
.
<ul>
<li>a
<ul>
<li>b</li>
</ul>
</li>
</ul>
```


This list is loose, because of the blank line between the
two block elements in the list item:

```example
1. ```
   foo
   ```

   bar
.
<ol>
<li>
<pre><code>foo
</code></pre>
<p>bar</p>
</li>
</ol>
```


Here the outer list is loose, the inner list tight:

```example
* foo
  * bar

  baz
.
<ul>
<li>
<p>foo</p>
<ul>
<li>bar</li>
</ul>
<p>baz</p>
</li>
</ul>
```


```example
- a
  - b
  - c

- d
  - e
  - f
.
<ul>
<li>
<p>a</p>
<ul>
<li>b</li>
<li>c</li>
</ul>
</li>
<li>
<p>d</p>
<ul>
<li>e</li>
<li>f</li>
</ul>
</li>
</ul>
```


# Inlines

Inlines are parsed sequentially from the beginning of the character stream to the end (left to right, in left-to-right languages). Thus, for example, in

```example
`hi`lo`
.
<p><code>hi</code>lo`</p>
```

`hi` is parsed as code, leaving the backtick at the end as a literal backtick.

{#text-formatting-html}
## Text Formatting

View the [specification](#text-formatting).



## CSS Note

The following CSS rule is recommended for strikethrough, since CSS is how strikethrough is done in HTML:

~~~
.strikethrough {
  text-decoration: line-through;
}
~~~

##### Example TF-1

Note that this example, like all examples where a settings hash is not provided, uses the default settings, which includes `html-style: default` and `italicize-underlines: false`. (If you like your emphasis `<strong>` and `<em>`, you set `html-style: markdown`. See below for examples of this.)

###### Markua Document

{#input-tf-1}
~~~
* Italic: *one asterisk*
* Underlined: _one underscore_
* Bold: **two asterisks** or __two underscores__
* Bold + Italic: ***three asterisks***
* Bold + Underlined: ___three underscores___
* Bold + Italic + Underlined: ____four underscores____ or ****four asterisks****
* Strikethrough: ~~two tildes~~
* Superscript: 5^3^ = 125
* Subscript: H~2~O
~~~

###### HTML Output

{#output-tf-1}
~~~
<ul>
  <li>Italic: <i>one asterisk</i></li>
  <li>Underlined: <u>one underscore</u></li>
  <li>Bold: <b>two asterisks</b> or <b>two underscores</b></li>
  <li>Bold + Italic: <b><i>three asterisks</i></b></li>
  <li>Bold + Underlined: <b><u>three underscores</u></b></li>
  <li>Bold + Italic + Underlined: <b><i><u>four underscores</u></i></b> or <b><i><u>four asterisks</u></i></b></li>
  <li>Strikethrough: <span class="strikethrough">two tildes</span></li>
  <li>Superscript: 5<sup>3</sup> = 125</li>
  <li>Subscript: H<sub>2</sub>O</li>
</ul>
~~~

##### Example TF-2

This example makes the default settings explicitly specified. The output is the same as the previous example.

###### Markua Document

{#input-tf-2}
~~~
{
html-style: default
italicize-underlines: false
}
* Italic: *one asterisk*
* Underlined: _one underscore_
* Bold: **two asterisks** or __two underscores__
* Bold + Italic: ***three asterisks***
* Bold + Underlined: ___three underscores___
* Bold + Italic + Underlined: ____four underscores____ or ****four asterisks****
* Strikethrough: ~~two tildes~~
* Superscript: 5^3^ = 125
* Subscript: H~2~O
~~~

###### HTML Output

{#output-tf-2}
~~~
<ul>
  <li>Italic: <i>one asterisk</i></li>
  <li>Underlined: <u>one underscore</u></li>
  <li>Bold: <b>two asterisks</b> or <b>two underscores</b></li>
  <li>Bold + Italic: <b><i>three asterisks</i></b></li>
  <li>Bold + Underlined: <b><u>three underscores</u></b></li>
  <li>Bold + Italic + Underlined: <b><i><u>four underscores</u></i></b> or <b><i><u>four asterisks</u></i></b></li>
  <li>Strikethrough: <span class="strikethrough">two tildes</span></li>
  <li>Superscript: 5<sup>3</sup> = 125</li>
  <li>Subscript: H<sub>2</sub>O</li>
</ul>
~~~

##### Example TF-3

This example overrides italicize-underlines to `true`.

###### Markua Document

{#input-tf-3}
~~~
{
html-style: default
italicize-underlines: true
}
* Italic: *one asterisk*
* Italic: _one underscore_
* Bold: **two asterisks** or __two underscores__
* Bold + Italic: ***three asterisks***
* Bold + Italic: ___three underscores___
* Bold + Italic: ____four underscores____ or ****four asterisks****
* Strikethrough: ~~two tildes~~
* Superscript: 5^3^ = 125
* Subscript: H~2~O
~~~

###### HTML Output

{#output-tf-3}
~~~
<ul>
  <li>Italic: <i>one asterisk</i></li>
  <li>Italic: <i>one underscore</i></li>
  <li>Bold: <b>two asterisks</b> or <b>two underscores</b></li>
  <li>Bold + Italic: <b><i>three asterisks</i></b></li>
  <li>Bold + Italic: <b><i>three underscores</i></b></li>
  <li>Bold + Italic: <b><i>four underscores</i></b> or <b><i>four asterisks</i></b></li>
  <li>Strikethrough: <span class="strikethrough">two tildes</span></li>
  <li>Superscript: 5<sup>3</sup> = 125</li>
  <li>Subscript: H<sub>2</sub>O</li>
</ul>
~~~

##### Example TF-4

This example overrides italicize-underlines to `true` and html-style to `markdown`.

###### Markua Document

{#input-tf-4}
~~~
{
html-style: markdown
italicize-underlines: true
}
* Italic: *one asterisk*
* Italic: _one underscore_
* Bold: **two asterisks** or __two underscores__
* Bold + Italic: ***three asterisks***
* Bold + Italic: ___three underscores___
* Bold + Italic: ____four underscores____ or ****four asterisks****
* Strikethrough: ~~two tildes~~
* Superscript: 5^3^ = 125
* Subscript: H~2~O
~~~

###### HTML Output

{#output-tf-4}
~~~
<ul>
  <li>Italic: <i>one asterisk</i></li>
  <li>Italic: <i>one underscore</i></li>
  <li>Bold: <b>two asterisks</b> or <b>two underscores</b></li>
  <li>Bold + Italic: <b><i>three asterisks</i></b></li>
  <li>Bold + Italic: <b><i>three underscores</i></b></li>
  <li>Bold + Italic: <b><i>four underscores</i></b> or <b><i>four asterisks</i></b></li>
  <li>Strikethrough: <span class="strikethrough">two tildes</span></li>
  <li>Superscript: 5<sup>3</sup> = 125</li>
  <li>Subscript: H<sub>2</sub>O</li>
</ul>
~~~


## Backslash escapes

Any ASCII punctuation character may be backslash-escaped:

```example
\!\"\#\$\%\&\'\(\)\*\+\,\-\.\/\:\;\<\=\>\?\@\[\\\]\^\_\`\{\|\}\~
.
<p>!&quot;#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~</p>
```


Backslashes before other characters are treated as literal backslashes:

```example
\→\A\a\ \3\φ\«
.
<p>\→\A\a\ \3\φ\«</p>
```


Escaped characters are treated as regular characters and do not have their usual Markdown meanings:

```example
\*not emphasized*
\<br/> not a tag
\[not a link](/foo)
\`not code`
1\. not a list
\* not a list
\# not a heading
\[foo]: /url "not a reference"
\&ouml; not a character entity
.
<p>*not emphasized*
&lt;br/&gt; not a tag
[not a link](/foo)
`not code`
1. not a list
* not a list
# not a heading
[foo]: /url &quot;not a reference&quot;
&amp;ouml; not a character entity</p>
```


If a backslash is itself escaped, the following character is not:

```example
\\*emphasis*
.
<p>\<em>emphasis</em></p>
```


A backslash at the end of the line is a [hard line break]:

```example
foo\
bar
.
<p>foo<br />
bar</p>
```


Backslash escapes do not work in code blocks, code spans, autolinks, or
raw HTML:

```example
`` \[\` ``
.
<p><code>\[\`</code></p>
```


```example
    \[\]
.
<pre><code>\[\]
</code></pre>
```


```example
~~~
\[\]
~~~
.
<pre><code>\[\]
</code></pre>
```


```example
<http://example.com?find=\*>
.
<p><a href="http://example.com?find=%5C*">http://example.com?find=\*</a></p>
```


```example
<a href="/bar\/)">
.
<a href="/bar\/)">
```


But they work in all other contexts, including URLs and link titles,
link references, and [info strings] in [fenced code blocks]:

```example
[foo](/bar\* "ti\*tle")
.
<p><a href="/bar*" title="ti*tle">foo</a></p>
```


```example
[foo]

[foo]: /bar\* "ti\*tle"
.
<p><a href="/bar*" title="ti*tle">foo</a></p>
```


```example
``` foo\+bar
foo
```
.
<pre><code class="language-foo+bar">foo
</code></pre>
```



## Entity and numeric character references

Valid HTML entity references and numeric character references
can be used in place of the corresponding Unicode character,
with the following exceptions:

- Entity and character references are not recognized in code
  blocks and code spans.

- Entity and character references cannot stand in place of
  special characters that define structural elements in
  Markua.  For example, although `&#42;` can be used
  in place of a literal `*` character, `&#42;` cannot replace
  `*` in emphasis delimiters, bullet list markers, or thematic
  breaks.

Conforming Markua parsers need not store information about
whether a particular character was represented in the source
using a Unicode character or an entity reference.

[Entity references](@) consist of `&` + any of the valid
HTML5 entity names + `;`. The
document <https://html.spec.whatwg.org/multipage/entities.json>
is used as an authoritative source for the valid entity
references and their corresponding code points.

```example
&nbsp; &amp; &copy; &AElig; &Dcaron;
&frac34; &HilbertSpace; &DifferentialD;
&ClockwiseContourIntegral; &ngE;
.
<p>  &amp; © Æ Ď
¾ ℋ ⅆ
∲ ≧̸</p>
```


[Decimal numeric character
references](@)
consist of `&#` + a string of 1--7 arabic digits + `;`. A
numeric character reference is parsed as the corresponding
Unicode character. Invalid Unicode code points will be replaced by
the REPLACEMENT CHARACTER (`U+FFFD`).  For security reasons,
the code point `U+0000` will also be replaced by `U+FFFD`.

```example
&#35; &#1234; &#992; &#0;
.
<p># Ӓ Ϡ �</p>
```


[Hexadecimal numeric character
references](@) consist of `&#` +
either `X` or `x` + a string of 1-6 hexadecimal digits + `;`.
They too are parsed as the corresponding Unicode character (this
time specified with a hexadecimal numeral instead of decimal).

```example
&#X22; &#XD06; &#xcab;
.
<p>&quot; ആ ಫ</p>
```


Here are some nonentities:

```example
&nbsp &x; &#; &#x;
&#87654321;
&#abcdef0;
&ThisIsNotDefined; &hi?;
.
<p>&amp;nbsp &amp;x; &amp;#; &amp;#x;
&amp;#87654321;
&amp;#abcdef0;
&amp;ThisIsNotDefined; &amp;hi?;</p>
```


Although HTML5 does accept some entity references
without a trailing semicolon (such as `&copy`), these are not
recognized here, because it makes the grammar too ambiguous:

```example
&copy
.
<p>&amp;copy</p>
```


Strings that are not on the list of HTML5 named entities are not
recognized as entity references either:

```example
&MadeUpEntity;
.
<p>&amp;MadeUpEntity;</p>
```


Entity and numeric character references are recognized in any
context besides code spans or code blocks, including
URLs, [link titles], and [fenced code block][] [info strings]:

```example
<a href="&ouml;&ouml;.html">
.
<a href="&ouml;&ouml;.html">
```


```example
[foo](/f&ouml;&ouml; "f&ouml;&ouml;")
.
<p><a href="/f%C3%B6%C3%B6" title="föö">foo</a></p>
```


```example
[foo]

[foo]: /f&ouml;&ouml; "f&ouml;&ouml;"
.
<p><a href="/f%C3%B6%C3%B6" title="föö">foo</a></p>
```


```example
``` f&ouml;&ouml;
foo
```
.
<pre><code class="language-föö">foo
</code></pre>
```


Entity and numeric character references are treated as literal
text in code spans and code blocks:

```example
`f&ouml;&ouml;`
.
<p><code>f&amp;ouml;&amp;ouml;</code></p>
```


```example
    f&ouml;f&ouml;
.
<pre><code>f&amp;ouml;f&amp;ouml;
</code></pre>
```


Entity and numeric character references cannot be used
in place of symbols indicating structure in Markua
documents.

```example
&#42;foo&#42;
*foo*
.
<p>*foo*
<em>foo</em></p>
```

```example
&#42; foo

* foo
.
<p>* foo</p>
<ul>
<li>foo</li>
</ul>
```

```example
foo&#10;&#10;bar
.
<p>foo

bar</p>
```

```example
&#9;foo
.
<p>→foo</p>
```


```example
[a](url &quot;tit&quot;)
.
<p>[a](url &quot;tit&quot;)</p>
```

## Code spans

A [backtick string](@) is a string of one or more backtick characters (`` ` ``) that is neither preceded nor followed by a backtick.

Code spans cannot contain [line endings] in Markua.

A [code span](@) begins with a backtick string and ends with a backtick string of equal length.  The contents of the code span are the characters between the two backtick strings, normalized in the following way:

If the resulting string both begins *and* ends with a [space] character, but does not consist entirely of [space] characters, a single [space] character is removed from the front and back.  This allows you to include code that begins or ends with backtick characters, which must be separated by whitespace from the opening or closing backtick strings.

This is a simple code span:

```example
`foo`
.
<p><code>foo</code></p>
```


Here two backticks are used, because the code contains a backtick.
This example also illustrates stripping of a single leading and
trailing space:

```example
`` foo ` bar ``
.
<p><code>foo ` bar</code></p>
```


This example shows the motivation for stripping leading and trailing
spaces:

```example
` `` `
.
<p><code>``</code></p>
```

Note that only *one* space is stripped:

```example
`  ``  `
.
<p><code> `` </code></p>
```

The stripping only happens if the space is on both
sides of the string:

```example
` a`
.
<p><code> a</code></p>
```

Only [spaces], and not [unicode whitespace] in general, are
stripped in this way:

```example
` b `
.
<p><code> b </code></p>
```

No stripping occurs if the code span contains only spaces:

```example
` `
`  `
.
<p><code> </code>
<code>  </code></p>
```


[Line endings] are treated like spaces:

```example
``
foo
bar
baz
``
.
<p><code>foo bar   baz</code></p>
```

```example
``
foo
``
.
<p><code>foo </code></p>
```


Interior spaces are not collapsed:

```example
`foo   bar
baz`
.
<p><code>foo   bar  baz</code></p>
```

Note that backslash escapes do not work in code spans. All backslashes
are treated literally:

```example
`foo\`bar`
.
<p><code>foo\</code>bar`</p>
```


Backslash escapes are never needed, because one can always choose a
string of *n* backtick characters as delimiters, where the code does
not contain any strings of exactly *n* backtick characters.

```example
``foo`bar``
.
<p><code>foo`bar</code></p>
```

```example
` foo `` bar `
.
<p><code>foo `` bar</code></p>
```


Code span backticks have higher precedence than any other inline
constructs except HTML tags and autolinks.  Thus, for example, this is
not parsed as emphasized text, since the second `*` is part of a code
span:

```example
*foo`*`
.
<p>*foo<code>*</code></p>
```


And this is not parsed as a link:

```example
[not a `link](/foo`)
.
<p>[not a <code>link](/foo</code>)</p>
```


Code spans, HTML tags, and autolinks have the same precedence.
Thus, this is code:

```example
`<a href="`">`
.
<p><code>&lt;a href=&quot;</code>&quot;&gt;`</p>
```


But this is an HTML tag:

```example
<a href="`">`
.
<p><a href="`">`</p>
```


And this is code:

```example
`<http://foo.bar.`baz>`
.
<p><code>&lt;http://foo.bar.</code>baz&gt;`</p>
```


But this is an autolink:

```example
<http://foo.bar.`baz>`
.
<p><a href="http://foo.bar.%60baz">http://foo.bar.`baz</a>`</p>
```


When a backtick string is not closed by a matching backtick string,
we just have literal backticks:

```example
```foo``
.
<p>```foo``</p>
```


```example
`foo
.
<p>`foo</p>
```

The following case also illustrates the need for opening and
closing backtick strings to be equal in length:

```example
`foo``bar``
.
<p>`foo<code>bar</code></p>
```

## Emphasis and strong emphasis

A> The rules that Markua follows for emphasis are as close to those in the CommonMark Spec as possible, for compatibility with CommonMark. Also, the text in this section is almost entirely from the CommonMark Spec, to emphasize this point.
A>
A> The only difference between Markua and CommonMark in terms of emphasis and strong emphasis is that Markua can be configured (and is configured by default) to produce `<b>` instead of `<strong>`, `<i>` instead of `<em>` and `<u>` instead of `<i>`. So, a settings block is shown for every example, to be clear which settings are in use.

John Gruber's original [Markdown syntax description](http://daringfireball.net/projects/markdown/syntax#em) says:

> Markdown treats asterisks (`*`) and underscores (`_`) as indicators of emphasis. Text wrapped with one `*` or `_` will be wrapped with an HTML `<em>` tag; double `*`'s or `_`'s will be wrapped with an HTML `<strong>` tag.

This is enough for most users, but these rules leave much undecided, especially when it comes to nested emphasis. The original `Markdown.pl` test suite makes it clear that triple `***` and `___` delimiters can be used for strong emphasis, and most implementations have also allowed the following patterns:

```
***strong emph***
***strong** in emph*
***emph* in strong**
**in strong *emph***
*in emph **strong***
```

The following patterns are less widely supported, but the intent is clear and they are useful (especially in contexts like bibliography entries):

```
*emph *with emph* in it*
**strong **with strong** in it**
```

Many implementations have also restricted intraword emphasis to the `*` forms, to avoid unwanted emphasis in words containing internal underscores. (It is best practice to put these in code spans, but users often do not.)

```
internal emphasis: foo*bar*baz
no emphasis: foo_bar_baz
```

The rules given below capture all of these patterns, while allowing for efficient parsing strategies that do not backtrack.

First, some definitions. A [delimiter run](@) is either a sequence of one or more `*` characters that is not preceded or followed by a non-backslash-escaped `*` character, or a sequence of one or more `_` characters that is not preceded or followed by a non-backslash-escaped `_` character.

A [left-flanking delimiter run](@) is a [delimiter run] that is (1) not followed by [Unicode whitespace], and either (2a) not followed by a [punctuation character], or (2b) followed by a [punctuation character] and preceded by [Unicode whitespace] or a [punctuation character]. For purposes of this definition, the beginning and the end of the line count as Unicode whitespace.

A [right-flanking delimiter run](@) is a [delimiter run] that is (1) not preceded by [Unicode whitespace], and either (2a) not preceded by a [punctuation character], or (2b) preceded by a [punctuation character] and followed by [Unicode whitespace] or a [punctuation character]. For purposes of this definition, the beginning and the end of the line count as Unicode whitespace.

Here are some examples of delimiter runs:

- left-flanking but not right-flanking:

  ```
  ***abc
    _abc
  **"abc"
   _"abc"
  ```

- right-flanking but not left-flanking:

  ```
  abc***
  abc_
  "abc"**
  "abc"_
  ```

- Both left and right-flanking:

  ```
  abc***def
  "abc"_"def"
  ```

- Neither left nor right-flanking:

  ```
  abc *** def
  a _ b
  ```

(The idea of distinguishing left-flanking and right-flanking delimiter runs based on the character before and the character after comes from Roopesh Chander's [vfmd](http://www.vfmd.org/vfmd-spec/specification/#procedure-for-identifying-emphasis-tags). vfmd uses the terminology "emphasis indicator string" instead of "delimiter run," and its rules for distinguishing left- and right-flanking runs are a bit more complex than the ones given here.)

The following rules define emphasis and strong emphasis:

1. A single `*` character [can open emphasis](@) iff (if and only if) it is part of a [left-flanking delimiter run].

2. A single `_` character [can open emphasis] iff it is part of a [left-flanking delimiter run] and either (a) not part of a [right-flanking delimiter run] or (b) part of a [right-flanking delimiter run] preceded by punctuation.

3. A single `*` character [can close emphasis](@) iff it is part of a [right-flanking delimiter run].

4. A single `_` character [can close emphasis] iff it is part of a [right-flanking delimiter run] and either (a) not part of a [left-flanking delimiter run] or (b) part of a [left-flanking delimiter run] followed by punctuation.

5. A double `**` [can open strong emphasis](@) iff it is part of a [left-flanking delimiter run].

6. A double `__` [can open strong emphasis] iff it is part of a [left-flanking delimiter run] and either (a) not part of a [right-flanking delimiter run] or (b) part of a [right-flanking delimiter run] preceded by punctuation.

7. A double `**` [can close strong emphasis](@) iff it is part of a [right-flanking delimiter run].

8. A double `__` [can close strong emphasis] iff it is part of a [right-flanking delimiter run] and either (a) not part of a [left-flanking delimiter run] or (b) part of a [left-flanking delimiter run] followed by punctuation.

9. Emphasis begins with a delimiter that [can open emphasis] and ends with a delimiter that [can close emphasis], and that uses the same character (`_` or `*`) as the opening delimiter. The opening and closing delimiters must belong to separate [delimiter runs]. If one of the delimiters can both open and close emphasis, then the sum of the lengths of the delimiter runs containing the opening and closing delimiters must not be a multiple of 3 unless both lengths are multiples of 3.

10. Strong emphasis begins with a delimiter that [can open strong emphasis] and ends with a delimiter that [can close strong emphasis], and that uses the same character (`_` or `*`) as the opening delimiter. The opening and closing delimiters must belong to separate [delimiter runs]. If one of the delimiters can both open and close strong emphasis, then the sum of the lengths of the delimiter runs containing the opening and closing delimiters must not be a multiple of 3 unless both lengths are multiples of 3.

11. A literal `*` character cannot occur at the beginning or end of `*`-delimited emphasis or `**`-delimited strong emphasis, unless it is backslash-escaped.

12. A literal `_` character cannot occur at the beginning or end of `_`-delimited emphasis or `__`-delimited strong emphasis, unless it is backslash-escaped.

Where rules 1--12 above are compatible with multiple parsings, the following principles resolve ambiguity:

13. The number of nestings should be minimized. Thus, for example, an interpretation `<strong>...</strong>` is always preferred to `<em><em>...</em></em>`.

14. An interpretation `<em><strong>...</strong></em>` is always preferred to `<strong><em>...</em></strong>`.

15. When two potential emphasis or strong emphasis spans overlap, so that the second begins before the first ends and ends after the first ends, the first takes precedence. Thus, for example, `*foo _bar* baz_` is parsed as `<em>foo _bar</em> baz_` rather than `*foo <em>bar* baz</em>`.

16. When there are two potential emphasis or strong emphasis spans with the same closing delimiter, the shorter one (the one that opens later) takes precedence. Thus, for example, `**foo **bar baz**` is parsed as `**foo <strong>bar baz</strong>` rather than `<strong>foo **bar baz</strong>`.

17. Inline code spans, links, images, and HTML tags group more tightly than emphasis. So, when there is a choice between an interpretation that contains one of these elements and one that does not, the former always wins. Thus, for example, `*[foo*](bar)` is parsed as `*<a href="bar">foo*</a>` rather than as `<em>[foo</em>](bar)`.

These rules can be illustrated through a series of examples.

##### Example SB-1

Rule 1:

###### Markua Document

{#input-es-1}
~~~
{
html-style: markdown
italicize-underlines: true
}
*foo bar*
~~~

###### HTML Output

{#output-es-1}
~~~
<p><em>foo bar</em></p>
~~~

##### Example SB-1

Rule 1:

###### Markua Document

{#input-es-1}
~~~
{
html-style: default
italicize-underlines: true
}
*foo bar*
~~~

###### HTML Output

{#output-es-1}
~~~
<p><em>foo bar</em></p>
~~~

##### Example SB-1

Rule 1:

###### Markua Document

{#input-es-1}
~~~
{
html-style: markdown
italicize-underlines: true
}
*foo bar*
~~~

###### HTML Output

{#output-es-1}
~~~
<p><em>foo bar</em></p>
~~~







This is not emphasis, because the opening `*` is followed by
whitespace, and hence not part of a [left-flanking delimiter run]:

```example
a * foo bar*
.
<p>a * foo bar*</p>
```


This is not emphasis, because the opening `*` is preceded
by an alphanumeric and followed by punctuation, and hence
not part of a [left-flanking delimiter run]:

```example
a*"foo"*
.
<p>a*&quot;foo&quot;*</p>
```


Unicode nonbreaking spaces count as whitespace, too:

```example
* a *
.
<p>* a *</p>
```


Intraword emphasis with `*` is permitted:

```example
foo*bar*
.
<p>foo<em>bar</em></p>
```


```example
5*6*78
.
<p>5<em>6</em>78</p>
```


Rule 2:

```example
_foo bar_
.
<p><em>foo bar</em></p>
```


This is not emphasis, because the opening `_` is followed by
whitespace:

```example
_ foo bar_
.
<p>_ foo bar_</p>
```


This is not emphasis, because the opening `_` is preceded
by an alphanumeric and followed by punctuation:

```example
a_"foo"_
.
<p>a_&quot;foo&quot;_</p>
```


Emphasis with `_` is not allowed inside words:

```example
foo_bar_
.
<p>foo_bar_</p>
```


```example
5_6_78
.
<p>5_6_78</p>
```


```example
пристаням_стремятся_
.
<p>пристаням_стремятся_</p>
```


Here `_` does not generate emphasis, because the first delimiter run
is right-flanking and the second left-flanking:

```example
aa_"bb"_cc
.
<p>aa_&quot;bb&quot;_cc</p>
```


This is emphasis, even though the opening delimiter is
both left- and right-flanking, because it is preceded by
punctuation:

```example
foo-_(bar)_
.
<p>foo-<em>(bar)</em></p>
```


Rule 3:

This is not emphasis, because the closing delimiter does
not match the opening delimiter:

```example
_foo*
.
<p>_foo*</p>
```


This is not emphasis, because the closing `*` is preceded by
whitespace:

```example
*foo bar *
.
<p>*foo bar *</p>
```


A newline also counts as whitespace:

```example
*foo bar
*
.
<p>*foo bar
*</p>
```


This is not emphasis, because the second `*` is
preceded by punctuation and followed by an alphanumeric
(hence it is not part of a [right-flanking delimiter run]:

```example
*(*foo)
.
<p>*(*foo)</p>
```


The point of this restriction is more easily appreciated
with this example:

```example
*(*foo*)*
.
<p><em>(<em>foo</em>)</em></p>
```


Intraword emphasis with `*` is allowed:

```example
*foo*bar
.
<p><em>foo</em>bar</p>
```



Rule 4:

This is not emphasis, because the closing `_` is preceded by
whitespace:

```example
_foo bar _
.
<p>_foo bar _</p>
```


This is not emphasis, because the second `_` is
preceded by punctuation and followed by an alphanumeric:

```example
_(_foo)
.
<p>_(_foo)</p>
```


This is emphasis within emphasis:

```example
_(_foo_)_
.
<p><em>(<em>foo</em>)</em></p>
```


Intraword emphasis is disallowed for `_`:

```example
_foo_bar
.
<p>_foo_bar</p>
```


```example
_пристаням_стремятся
.
<p>_пристаням_стремятся</p>
```


```example
_foo_bar_baz_
.
<p><em>foo_bar_baz</em></p>
```


This is emphasis, even though the closing delimiter is
both left- and right-flanking, because it is followed by
punctuation:

```example
_(bar)_.
.
<p><em>(bar)</em>.</p>
```


Rule 5:

```example
**foo bar**
.
<p><strong>foo bar</strong></p>
```


This is not strong emphasis, because the opening delimiter is
followed by whitespace:

```example
** foo bar**
.
<p>** foo bar**</p>
```


This is not strong emphasis, because the opening `**` is preceded
by an alphanumeric and followed by punctuation, and hence
not part of a [left-flanking delimiter run]:

```example
a**"foo"**
.
<p>a**&quot;foo&quot;**</p>
```


Intraword strong emphasis with `**` is permitted:

```example
foo**bar**
.
<p>foo<strong>bar</strong></p>
```


Rule 6:

```example
__foo bar__
.
<p><strong>foo bar</strong></p>
```


This is not strong emphasis, because the opening delimiter is
followed by whitespace:

```example
__ foo bar__
.
<p>__ foo bar__</p>
```


A newline counts as whitespace:
```example
__
foo bar__
.
<p>__
foo bar__</p>
```


This is not strong emphasis, because the opening `__` is preceded
by an alphanumeric and followed by punctuation:

```example
a__"foo"__
.
<p>a__&quot;foo&quot;__</p>
```


Intraword strong emphasis is forbidden with `__`:

```example
foo__bar__
.
<p>foo__bar__</p>
```


```example
5__6__78
.
<p>5__6__78</p>
```


```example
пристаням__стремятся__
.
<p>пристаням__стремятся__</p>
```


```example
__foo, __bar__, baz__
.
<p><strong>foo, <strong>bar</strong>, baz</strong></p>
```


This is strong emphasis, even though the opening delimiter is
both left- and right-flanking, because it is preceded by
punctuation:

```example
foo-__(bar)__
.
<p>foo-<strong>(bar)</strong></p>
```



Rule 7:

This is not strong emphasis, because the closing delimiter is preceded
by whitespace:

```example
**foo bar **
.
<p>**foo bar **</p>
```


(Nor can it be interpreted as an emphasized `*foo bar *`, because of
Rule 11.)

This is not strong emphasis, because the second `**` is
preceded by punctuation and followed by an alphanumeric:

```example
**(**foo)
.
<p>**(**foo)</p>
```


The point of this restriction is more easily appreciated
with these examples:

```example
*(**foo**)*
.
<p><em>(<strong>foo</strong>)</em></p>
```


```example
**Gomphocarpus (*Gomphocarpus physocarpus*, syn.
*Asclepias physocarpa*)**
.
<p><strong>Gomphocarpus (<em>Gomphocarpus physocarpus</em>, syn.
<em>Asclepias physocarpa</em>)</strong></p>
```


```example
**foo "*bar*" foo**
.
<p><strong>foo &quot;<em>bar</em>&quot; foo</strong></p>
```


Intraword emphasis:

```example
**foo**bar
.
<p><strong>foo</strong>bar</p>
```


Rule 8:

This is not strong emphasis, because the closing delimiter is
preceded by whitespace:

```example
__foo bar __
.
<p>__foo bar __</p>
```


This is not strong emphasis, because the second `__` is
preceded by punctuation and followed by an alphanumeric:

```example
__(__foo)
.
<p>__(__foo)</p>
```


The point of this restriction is more easily appreciated
with this example:

```example
_(__foo__)_
.
<p><em>(<strong>foo</strong>)</em></p>
```


Intraword strong emphasis is forbidden with `__`:

```example
__foo__bar
.
<p>__foo__bar</p>
```


```example
__пристаням__стремятся
.
<p>__пристаням__стремятся</p>
```


```example
__foo__bar__baz__
.
<p><strong>foo__bar__baz</strong></p>
```


This is strong emphasis, even though the closing delimiter is
both left- and right-flanking, because it is followed by
punctuation:

```example
__(bar)__.
.
<p><strong>(bar)</strong>.</p>
```


Rule 9:

Any nonempty sequence of inline elements can be the contents of an
emphasized span.

```example
*foo [bar](/url)*
.
<p><em>foo <a href="/url">bar</a></em></p>
```


```example
*foo
bar*
.
<p><em>foo
bar</em></p>
```


In particular, emphasis and strong emphasis can be nested
inside emphasis:

```example
_foo __bar__ baz_
.
<p><em>foo <strong>bar</strong> baz</em></p>
```


```example
_foo _bar_ baz_
.
<p><em>foo <em>bar</em> baz</em></p>
```


```example
__foo_ bar_
.
<p><em><em>foo</em> bar</em></p>
```


```example
*foo *bar**
.
<p><em>foo <em>bar</em></em></p>
```


```example
*foo **bar** baz*
.
<p><em>foo <strong>bar</strong> baz</em></p>
```

```example
*foo**bar**baz*
.
<p><em>foo<strong>bar</strong>baz</em></p>
```

Note that in the preceding case, the interpretation

```
<p><em>foo</em><em>bar<em></em>baz</em></p>
```


is precluded by the condition that a delimiter that
can both open and close (like the `*` after `foo`)
cannot form emphasis if the sum of the lengths of
the delimiter runs containing the opening and
closing delimiters is a multiple of 3 unless
both lengths are multiples of 3.


For the same reason, we don't get two consecutive
emphasis sections in this example:

```example
*foo**bar*
.
<p><em>foo**bar</em></p>
```


The same condition ensures that the following
cases are all strong emphasis nested inside
emphasis, even when the interior spaces are
omitted:


```example
***foo** bar*
.
<p><em><strong>foo</strong> bar</em></p>
```


```example
*foo **bar***
.
<p><em>foo <strong>bar</strong></em></p>
```


```example
*foo**bar***
.
<p><em>foo<strong>bar</strong></em></p>
```


When the lengths of the interior closing and opening
delimiter runs are *both* multiples of 3, though,
they can match to create emphasis:

```example
foo***bar***baz
.
<p>foo<em><strong>bar</strong></em>baz</p>
```

```example
foo******bar*********baz
.
<p>foo<strong><strong><strong>bar</strong></strong></strong>***baz</p>
```


Indefinite levels of nesting are possible:

```example
*foo **bar *baz* bim** bop*
.
<p><em>foo <strong>bar <em>baz</em> bim</strong> bop</em></p>
```


```example
*foo [*bar*](/url)*
.
<p><em>foo <a href="/url"><em>bar</em></a></em></p>
```


There can be no empty emphasis or strong emphasis:

```example
** is not an empty emphasis
.
<p>** is not an empty emphasis</p>
```


```example
**** is not an empty strong emphasis
.
<p>**** is not an empty strong emphasis</p>
```



Rule 10:

Any nonempty sequence of inline elements can be the contents of an
strongly emphasized span.

```example
**foo [bar](/url)**
.
<p><strong>foo <a href="/url">bar</a></strong></p>
```


```example
**foo
bar**
.
<p><strong>foo
bar</strong></p>
```


In particular, emphasis and strong emphasis can be nested
inside strong emphasis:

```example
__foo _bar_ baz__
.
<p><strong>foo <em>bar</em> baz</strong></p>
```


```example
__foo __bar__ baz__
.
<p><strong>foo <strong>bar</strong> baz</strong></p>
```


```example
____foo__ bar__
.
<p><strong><strong>foo</strong> bar</strong></p>
```


```example
**foo **bar****
.
<p><strong>foo <strong>bar</strong></strong></p>
```


```example
**foo *bar* baz**
.
<p><strong>foo <em>bar</em> baz</strong></p>
```


```example
**foo*bar*baz**
.
<p><strong>foo<em>bar</em>baz</strong></p>
```


```example
***foo* bar**
.
<p><strong><em>foo</em> bar</strong></p>
```


```example
**foo *bar***
.
<p><strong>foo <em>bar</em></strong></p>
```


Indefinite levels of nesting are possible:

```example
**foo *bar **baz**
bim* bop**
.
<p><strong>foo <em>bar <strong>baz</strong>
bim</em> bop</strong></p>
```


```example
**foo [*bar*](/url)**
.
<p><strong>foo <a href="/url"><em>bar</em></a></strong></p>
```


There can be no empty emphasis or strong emphasis:

```example
__ is not an empty emphasis
.
<p>__ is not an empty emphasis</p>
```


```example
____ is not an empty strong emphasis
.
<p>____ is not an empty strong emphasis</p>
```



Rule 11:

```example
foo ***
.
<p>foo ***</p>
```


```example
foo *\**
.
<p>foo <em>*</em></p>
```


```example
foo *_*
.
<p>foo <em>_</em></p>
```


```example
foo *****
.
<p>foo *****</p>
```


```example
foo **\***
.
<p>foo <strong>*</strong></p>
```


```example
foo **_**
.
<p>foo <strong>_</strong></p>
```


Note that when delimiters do not match evenly, Rule 11 determines
that the excess literal `*` characters will appear outside of the
emphasis, rather than inside it:

```example
**foo*
.
<p>*<em>foo</em></p>
```


```example
*foo**
.
<p><em>foo</em>*</p>
```


```example
***foo**
.
<p>*<strong>foo</strong></p>
```


```example
****foo*
.
<p>***<em>foo</em></p>
```


```example
**foo***
.
<p><strong>foo</strong>*</p>
```


```example
*foo****
.
<p><em>foo</em>***</p>
```



Rule 12:

```example
foo ___
.
<p>foo ___</p>
```


```example
foo _\__
.
<p>foo <em>_</em></p>
```


```example
foo _*_
.
<p>foo <em>*</em></p>
```


```example
foo _____
.
<p>foo _____</p>
```


```example
foo __\___
.
<p>foo <strong>_</strong></p>
```


```example
foo __*__
.
<p>foo <strong>*</strong></p>
```


```example
__foo_
.
<p>_<em>foo</em></p>
```


Note that when delimiters do not match evenly, Rule 12 determines
that the excess literal `_` characters will appear outside of the
emphasis, rather than inside it:

```example
_foo__
.
<p><em>foo</em>_</p>
```


```example
___foo__
.
<p>_<strong>foo</strong></p>
```


```example
____foo_
.
<p>___<em>foo</em></p>
```


```example
__foo___
.
<p><strong>foo</strong>_</p>
```


```example
_foo____
.
<p><em>foo</em>___</p>
```


Rule 13 implies that if you want emphasis nested directly inside
emphasis, you must use different delimiters:

```example
**foo**
.
<p><strong>foo</strong></p>
```


```example
*_foo_*
.
<p><em><em>foo</em></em></p>
```


```example
__foo__
.
<p><strong>foo</strong></p>
```


```example
_*foo*_
.
<p><em><em>foo</em></em></p>
```


However, strong emphasis within strong emphasis is possible without
switching delimiters:

```example
****foo****
.
<p><strong><strong>foo</strong></strong></p>
```


```example
____foo____
.
<p><strong><strong>foo</strong></strong></p>
```



Rule 13 can be applied to arbitrarily long sequences of
delimiters:

```example
******foo******
.
<p><strong><strong><strong>foo</strong></strong></strong></p>
```


Rule 14:

```example
***foo***
.
<p><em><strong>foo</strong></em></p>
```


```example
_____foo_____
.
<p><em><strong><strong>foo</strong></strong></em></p>
```


Rule 15:

```example
*foo _bar* baz_
.
<p><em>foo _bar</em> baz_</p>
```


```example
*foo __bar *baz bim__ bam*
.
<p><em>foo <strong>bar *baz bim</strong> bam</em></p>
```


Rule 16:

```example
**foo **bar baz**
.
<p>**foo <strong>bar baz</strong></p>
```


```example
*foo *bar baz*
.
<p>*foo <em>bar baz</em></p>
```


Rule 17:

```example
*[bar*](/url)
.
<p>*<a href="/url">bar*</a></p>
```


```example
_foo [bar_](/url)
.
<p>_foo <a href="/url">bar_</a></p>
```


```example
*<img src="foo" title="*"/>
.
<p>*<img src="foo" title="*"/></p>
```


```example
**<a href="**">
.
<p>**<a href="**"></p>
```


```example
__<a href="__">
.
<p>__<a href="__"></p>
```


```example
*a `*`*
.
<p><em>a <code>*</code></em></p>
```


```example
_a `_`_
.
<p><em>a <code>_</code></em></p>
```


```example
**a<http://foo.bar/?q=**>
.
<p>**a<a href="http://foo.bar/?q=**">http://foo.bar/?q=**</a></p>
```


```example
__a<http://foo.bar/?q=__>
.
<p>__a<a href="http://foo.bar/?q=__">http://foo.bar/?q=__</a></p>
```



## Links

A link contains [link text] (the visible text), a [link destination]
(the URI that is the link destination), and optionally a [link title].
There are two basic kinds of links in Markdown.  In [inline links] the
destination and title are given immediately after the link text.  In
[reference links] the destination and title are defined elsewhere in
the document.

A [link text](@) consists of a sequence of zero or more
inline elements enclosed by square brackets (`[` and `]`).  The
following rules apply:

- Links may not contain other links, at any level of nesting. If
  multiple otherwise valid link definitions appear nested inside each
  other, the inner-most definition is used.

- Brackets are allowed in the [link text] only if (a) they
  are backslash-escaped or (b) they appear as a matched pair of brackets,
  with an open bracket `[`, a sequence of zero or more inlines, and
  a close bracket `]`.

- Backtick [code spans], [autolinks], and raw [HTML tags] bind more tightly
  than the brackets in link text.  Thus, for example,
  `` [foo`]` `` could not be a link text, since the second `]`
  is part of a code span.

- The brackets in link text bind more tightly than markers for
  [emphasis and strong emphasis]. Thus, for example, `*[foo*](url)` is a link.

A [link destination](@) consists of either

- a sequence of zero or more characters between an opening `<` and a
  closing `>` that contains no line breaks or unescaped
  `<` or `>` characters, or

- a nonempty sequence of characters that does not start with
  `<`, does not include ASCII space or control characters, and
  includes parentheses only if (a) they are backslash-escaped or
  (b) they are part of a balanced pair of unescaped parentheses.
  (Implementations may impose limits on parentheses nesting to
  avoid performance issues, but at least three levels of nesting
  should be supported.)

A [link title](@)  consists of either

- a sequence of zero or more characters between straight double-quote
  characters (`"`), including a `"` character only if it is
  backslash-escaped, or

- a sequence of zero or more characters between straight single-quote
  characters (`'`), including a `'` character only if it is
  backslash-escaped, or

- a sequence of zero or more characters between matching parentheses
  (`(...)`), including a `(` or `)` character only if it is
  backslash-escaped.

Although [link titles] may span multiple lines, they may not contain
a [blank line].

An [inline link](@) consists of a [link text] followed immediately
by a left parenthesis `(`, optional [whitespace], an optional
[link destination], an optional [link title] separated from the link
destination by [whitespace], optional [whitespace], and a right
parenthesis `)`. The link's text consists of the inlines contained
in the [link text] (excluding the enclosing square brackets).
The link's URI consists of the link destination, excluding enclosing
`<...>` if present, with backslash-escapes in effect as described
above.  The link's title consists of the link title, excluding its
enclosing delimiters, with backslash-escapes in effect as described
above.

Here is a simple inline link:

```example
[link](/uri "title")
.
<p><a href="/uri" title="title">link</a></p>
```


The title may be omitted:

```example
[link](/uri)
.
<p><a href="/uri">link</a></p>
```


Both the title and the destination may be omitted:

```example
[link]()
.
<p><a href="">link</a></p>
```


```example
[link](<>)
.
<p><a href="">link</a></p>
```

The destination can only contain spaces if it is
enclosed in pointy brackets:

```example
[link](/my uri)
.
<p>[link](/my uri)</p>
```

```example
[link](</my uri>)
.
<p><a href="/my%20uri">link</a></p>
```

The destination cannot contain line breaks,
even if enclosed in pointy brackets:

```example
[link](foo
bar)
.
<p>[link](foo
bar)</p>
```

```example
[link](<foo
bar>)
.
<p>[link](<foo
bar>)</p>
```

The destination can contain `)` if it is enclosed
in pointy brackets:

```example
[a](<b)c>)
.
<p><a href="b)c">a</a></p>
```

Pointy brackets that enclose links must be unescaped:

```example
[link](<foo\>)
.
<p>[link](&lt;foo&gt;)</p>
```

These are not links, because the opening pointy bracket
is not matched properly:

```example
[a](<b)c
[a](<b)c>
[a](<b>c)
.
<p>[a](&lt;b)c
[a](&lt;b)c&gt;
[a](<b>c)</p>
```

Parentheses inside the link destination may be escaped:

```example
[link](\(foo\))
.
<p><a href="(foo)">link</a></p>
```

Any number of parentheses are allowed without escaping, as long as they are
balanced:

```example
[link](foo(and(bar)))
.
<p><a href="foo(and(bar))">link</a></p>
```

However, if you have unbalanced parentheses, you need to escape or use the
`<...>` form:

```example
[link](foo\(and\(bar\))
.
<p><a href="foo(and(bar)">link</a></p>
```


```example
[link](<foo(and(bar)>)
.
<p><a href="foo(and(bar)">link</a></p>
```


Parentheses and other symbols can also be escaped, as usual
in Markdown:

```example
[link](foo\)\:)
.
<p><a href="foo):">link</a></p>
```


A link can contain fragment identifiers and queries:

```example
[link](#fragment)

[link](http://example.com#fragment)

[link](http://example.com?foo=3#frag)
.
<p><a href="#fragment">link</a></p>
<p><a href="http://example.com#fragment">link</a></p>
<p><a href="http://example.com?foo=3#frag">link</a></p>
```


Note that a backslash before a non-escapable character is
just a backslash:

```example
[link](foo\bar)
.
<p><a href="foo%5Cbar">link</a></p>
```


URL-escaping should be left alone inside the destination, as all
URL-escaped characters are also valid URL characters. Entity and
numerical character references in the destination will be parsed
into the corresponding Unicode code points, as usual.  These may
be optionally URL-escaped when written as HTML, but this spec
does not enforce any particular policy for rendering URLs in
HTML or other formats.  Renderers may make different decisions
about how to escape or normalize URLs in the output.

```example
[link](foo%20b&auml;)
.
<p><a href="foo%20b%C3%A4">link</a></p>
```


Note that, because titles can often be parsed as destinations,
if you try to omit the destination and keep the title, you'll
get unexpected results:

```example
[link]("title")
.
<p><a href="%22title%22">link</a></p>
```


Titles may be in single quotes, double quotes, or parentheses:

```example
[link](/url "title")
[link](/url 'title')
[link](/url (title))
.
<p><a href="/url" title="title">link</a>
<a href="/url" title="title">link</a>
<a href="/url" title="title">link</a></p>
```


Backslash escapes and entity and numeric character references
may be used in titles:

```example
[link](/url "title \"&quot;")
.
<p><a href="/url" title="title &quot;&quot;">link</a></p>
```


Titles must be separated from the link using a [whitespace].
Other [Unicode whitespace] like non-breaking space doesn't work.

```example
[link](/url "title")
.
<p><a href="/url%C2%A0%22title%22">link</a></p>
```


Nested balanced quotes are not allowed without escaping:

```example
[link](/url "title "and" title")
.
<p>[link](/url &quot;title &quot;and&quot; title&quot;)</p>
```


But it is easy to work around this by using a different quote type:

```example
[link](/url 'title "and" title')
.
<p><a href="/url" title="title &quot;and&quot; title">link</a></p>
```


(Note:  `Markdown.pl` did allow double quotes inside a double-quoted
title, and its test suite included a test demonstrating this.
But it is hard to see a good rationale for the extra complexity this
brings, since there are already many ways---backslash escaping,
entity and numeric character references, or using a different
quote type for the enclosing title---to write titles containing
double quotes.  `Markdown.pl`'s handling of titles has a number
of other strange features.  For example, it allows single-quoted
titles in inline links, but not reference links.  And, in
reference links but not inline links, it allows a title to begin
with `"` and end with `)`.  `Markdown.pl` 1.0.1 even allows
titles with no closing quotation mark, though 1.0.2b8 does not.
It seems preferable to adopt a simple, rational rule that works
the same way in inline links and link reference definitions.)

[Whitespace] is allowed around the destination and title:

```example
[link](   /uri
  "title"  )
.
<p><a href="/uri" title="title">link</a></p>
```


But it is not allowed between the link text and the
following parenthesis:

```example
[link] (/uri)
.
<p>[link] (/uri)</p>
```


The link text may contain balanced brackets, but not unbalanced ones,
unless they are escaped:

```example
[link [foo [bar]]](/uri)
.
<p><a href="/uri">link [foo [bar]]</a></p>
```


```example
[link] bar](/uri)
.
<p>[link] bar](/uri)</p>
```


```example
[link [bar](/uri)
.
<p>[link <a href="/uri">bar</a></p>
```


```example
[link \[bar](/uri)
.
<p><a href="/uri">link [bar</a></p>
```


The link text may contain inline content:

```example
[link *foo **bar** `#`*](/uri)
.
<p><a href="/uri">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>
```


```example
[![moon](moon.jpg)](/uri)
.
<p><a href="/uri"><img src="moon.jpg" alt="moon" /></a></p>
```


However, links may not contain other links, at any level of nesting.

```example
[foo [bar](/uri)](/uri)
.
<p>[foo <a href="/uri">bar</a>](/uri)</p>
```


```example
[foo *[bar [baz](/uri)](/uri)*](/uri)
.
<p>[foo <em>[bar <a href="/uri">baz</a>](/uri)</em>](/uri)</p>
```


```example
![[[foo](uri1)](uri2)](uri3)
.
<p><img src="uri3" alt="[foo](uri2)" /></p>
```


These cases illustrate the precedence of link text grouping over
emphasis grouping:

```example
*[foo*](/uri)
.
<p>*<a href="/uri">foo*</a></p>
```


```example
[foo *bar](baz*)
.
<p><a href="baz*">foo *bar</a></p>
```


Note that brackets that *aren't* part of links do not take
precedence:

```example
*foo [bar* baz]
.
<p><em>foo [bar</em> baz]</p>
```


These cases illustrate the precedence of HTML tags, code spans,
and autolinks over link grouping:

```example
[foo <bar attr="](baz)">
.
<p>[foo <bar attr="](baz)"></p>
```


```example
[foo`](/uri)`
.
<p>[foo<code>](/uri)</code></p>
```


```example
[foo<http://example.com/?search=](uri)>
.
<p>[foo<a href="http://example.com/?search=%5D(uri)">http://example.com/?search=](uri)</a></p>
```

## Images

Syntax for images is like the syntax for links, with one
difference. Instead of [link text], we have an
[image description](@).  The rules for this are the
same as for [link text], except that (a) an
image description starts with `![` rather than `[`, and
(b) an image description may contain links.
An image description has inline elements
as its contents.  When an image is rendered to HTML,
this is standardly used as the image's `alt` attribute.

```example
![foo](/url "title")
.
<p><img src="/url" alt="foo" title="title" /></p>
```


```example
![foo *bar*]

[foo *bar*]: train.jpg "train & tracks"
.
<p><img src="train.jpg" alt="foo bar" title="train &amp; tracks" /></p>
```


```example
![foo ![bar](/url)](/url2)
.
<p><img src="/url2" alt="foo bar" /></p>
```


```example
![foo [bar](/url)](/url2)
.
<p><img src="/url2" alt="foo bar" /></p>
```


Though this spec is concerned with parsing, not rendering, it is
recommended that in rendering to HTML, only the plain string content
of the [image description] be used.  Note that in
the above example, the alt attribute's value is `foo bar`, not `foo
[bar](/url)` or `foo <a href="/url">bar</a>`.  Only the plain string
content is rendered, without formatting.

```example
![foo *bar*][]

[foo *bar*]: train.jpg "train & tracks"
.
<p><img src="train.jpg" alt="foo bar" title="train &amp; tracks" /></p>
```


```example
![foo *bar*][foobar]

[FOOBAR]: train.jpg "train & tracks"
.
<p><img src="train.jpg" alt="foo bar" title="train &amp; tracks" /></p>
```


```example
![foo](train.jpg)
.
<p><img src="train.jpg" alt="foo" /></p>
```


```example
My ![foo bar](/path/to/train.jpg  "title"   )
.
<p>My <img src="/path/to/train.jpg" alt="foo bar" title="title" /></p>
```


```example
![foo](<url>)
.
<p><img src="url" alt="foo" /></p>
```


```example
![](/url)
.
<p><img src="/url" alt="" /></p>
```


Reference-style:

```example
![foo][bar]

[bar]: /url
.
<p><img src="/url" alt="foo" /></p>
```


```example
![foo][bar]

[BAR]: /url
.
<p><img src="/url" alt="foo" /></p>
```


Collapsed:

```example
![foo][]

[foo]: /url "title"
.
<p><img src="/url" alt="foo" title="title" /></p>
```


```example
![*foo* bar][]

[*foo* bar]: /url "title"
.
<p><img src="/url" alt="foo bar" title="title" /></p>
```


The labels are case-insensitive:

```example
![Foo][]

[foo]: /url "title"
.
<p><img src="/url" alt="Foo" title="title" /></p>
```


```example
![*foo* bar]

[*foo* bar]: /url "title"
.
<p><img src="/url" alt="foo bar" title="title" /></p>
```


Note that link labels cannot contain unescaped brackets:

```example
![[foo]]
.
<p>![[foo]]</p>
```

If you just want a literal `!` followed by bracketed text, you can
backslash-escape the opening `[`:

```example
!\[foo]

[foo]: /url "title"
.
<p>![foo]</p>
```


If you want a link after a literal `!`, backslash-escape the
`!`:

```example
\![foo]

[foo]: /url "title"
.
<p>!<a href="/url" title="title">foo</a></p>
```


## Autolinks

[Autolink](@)s are absolute URIs and email addresses inside
`<` and `>`. They are parsed as links, with the URL or email address
as the link label.

A [URI autolink](@) consists of `<`, followed by an
[absolute URI] followed by `>`.  It is parsed as
a link to the URI, with the URI as the link's label.

An [absolute URI](@),
for these purposes, consists of a [scheme] followed by a colon (`:`)
followed by zero or more characters other than ASCII
[whitespace] and control characters, `<`, and `>`.  If
the URI includes these characters, they must be percent-encoded
(e.g. `%20` for a space).

For purposes of this spec, a [scheme](@) is any sequence
of 2--32 characters beginning with an ASCII letter and followed
by any combination of ASCII letters, digits, or the symbols plus
("+"), period ("."), or hyphen ("-").

Here are some valid autolinks:

```example
<http://foo.bar.baz>
.
<p><a href="http://foo.bar.baz">http://foo.bar.baz</a></p>
```


```example
<http://foo.bar.baz/test?q=hello&id=22&boolean>
.
<p><a href="http://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean">http://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean</a></p>
```


```example
<irc://foo.bar:2233/baz>
.
<p><a href="irc://foo.bar:2233/baz">irc://foo.bar:2233/baz</a></p>
```


Uppercase is also fine:

```example
<MAILTO:FOO@BAR.BAZ>
.
<p><a href="MAILTO:FOO@BAR.BAZ">MAILTO:FOO@BAR.BAZ</a></p>
```


Note that many strings that count as [absolute URIs] for
purposes of this spec are not valid URIs, because their
schemes are not registered or because of other problems
with their syntax:

```example
<a+b+c:d>
.
<p><a href="a+b+c:d">a+b+c:d</a></p>
```


```example
<made-up-scheme://foo,bar>
.
<p><a href="made-up-scheme://foo,bar">made-up-scheme://foo,bar</a></p>
```


```example
<http://../>
.
<p><a href="http://../">http://../</a></p>
```


```example
<localhost:5001/foo>
.
<p><a href="localhost:5001/foo">localhost:5001/foo</a></p>
```


Spaces are not allowed in autolinks:

```example
<http://foo.bar/baz bim>
.
<p>&lt;http://foo.bar/baz bim&gt;</p>
```


Backslash-escapes do not work inside autolinks:

```example
<http://example.com/\[\>
.
<p><a href="http://example.com/%5C%5B%5C">http://example.com/\[\</a></p>
```


An [email autolink](@)
consists of `<`, followed by an [email address],
followed by `>`.  The link's label is the email address,
and the URL is `mailto:` followed by the email address.

An [email address](@),
for these purposes, is anything that matches
the [non-normative regex from the HTML5
spec](https://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email)):

    /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?
    (?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/

Examples of email autolinks:

```example
<foo@bar.example.com>
.
<p><a href="mailto:foo@bar.example.com">foo@bar.example.com</a></p>
```


```example
<foo+special@Bar.baz-bar0.com>
.
<p><a href="mailto:foo+special@Bar.baz-bar0.com">foo+special@Bar.baz-bar0.com</a></p>
```


Backslash-escapes do not work inside email autolinks:

```example
<foo\+@bar.example.com>
.
<p>&lt;foo+@bar.example.com&gt;</p>
```


These are not autolinks:

```example
<>
.
<p>&lt;&gt;</p>
```


```example
< http://foo.bar >
.
<p>&lt; http://foo.bar &gt;</p>
```


```example
<m:abc>
.
<p>&lt;m:abc&gt;</p>
```


```example
<foo.bar.baz>
.
<p>&lt;foo.bar.baz&gt;</p>
```


```example
http://example.com
.
<p>http://example.com</p>
```


```example
foo@bar.example.com
.
<p>foo@bar.example.com</p>
```

## Hard line breaks

Unlike Markdown, all line breaks are hard breaks, and produce `<br/>` tags in HTML. (In Markdown, a line break which is not preceded by two spaces is a "soft line break" which does not actually cause a `<br/>` tag.

A> A Markua Processor may output either `<br/>` or `<br />` for break tags. The former looks nicer; the latter is more compatible with outdated web browsers.

##### Example

###### Markua Document

{#input-single_newlines_1}
~~~
I'm paragraph one. Yay!

This is paragraph two.
This is *still* in paragraph two, preceded by a forced line break.
This is also in paragraph two, also preceded by a forced line break.

This is paragraph three.
~~~



```example
foo
baz
.
<p>foo<br />
baz</p>
```


Leading spaces at the beginning of the next line are ignored:

```example
foo
     bar
.
<p>foo<br />
bar</p>
```

Line breaks can occur inside emphasis, links, and other constructs
that allow inline content:

```example
*foo
bar*
.
<p><em>foo<br />
bar</em></p>
```


```example
*foo\
bar*
.
<p><em>foo<br />
bar</em></p>
```


Line breaks do not occur inside code spans

```example
`code
span`
.
<p><code>code  span</code></p>
```


```example
`code\
span`
.
<p><code>code\ span</code></p>
```

Hard line breaks are for separating inline content within a block.
Neither syntax for hard line breaks works at the end of a paragraph or
other block element:

```example
foo\
.
<p>foo\</p>
```


```example
foo
.
<p>foo</p>
```


```example
### foo\
.
<h3>foo\</h3>
```


```example
### foo
.
<h3>foo</h3>
```

## Textual content

Any characters not given an interpretation by the above rules will
be parsed as plain textual content.

```example
hello $.;'there
.
<p>hello $.;'there</p>
```


```example
Foo χρῆν
.
<p>Foo χρῆν</p>
```


Internal spaces are preserved verbatim:

```example
Multiple     spaces
.
<p>Multiple     spaces</p>
```


{#headings-html}
# Headings for Parts, Chapters and Sections

View the [specification](#headings).

##### Example H-1

This example shows the correct use of headings. Incorrect heading uses are in subsequent examples.

###### Markua Document

{#input-h-1}
~~~
# Part #

This is a paragraph.

# Chapter

This is a paragraph.

## Section

This is a paragraph.

### Sub-Section

This is a paragraph.

#### Sub-Sub-Section

This is a paragraph.

##### Sub-Sub-Sub-Section

This is a paragraph.

###### Sub-Sub-Sub-Sub-Section

This is a paragraph.
~~~

###### HTML Output

{#output-h-1}
~~~
<h1 class="part">Part</h1>
<p>This is a paragraph.</p>
<h1 class="chapter">Chapter</h1>
<p>This is a paragraph.</p>
<h2 class="section">Section</h2>
<p>This is a paragraph.</p>
<h3 class="sub-section">Sub-Section</h3>
<p>This is a paragraph.</p>
<h4 class="sub-sub-section">Sub-Sub-Section</h4>
<p>This is a paragraph.</p>
<h5 class="sub-sub-sub-section">Sub-Sub-Sub-Section</h5>
<p>This is a paragraph.</p>
<h6 class="sub-sub-sub-sub-section">Sub-Sub-Sub-Sub-Section</h6>
<p>This is a paragraph.</p>
~~~

##### Example H-2

This example shows incorrect uses of headings. None of the things below are headings, since the trailing `#` signs are wrong.

###### Markua Document

{#input-h-2}
~~~
# Part ##

This is a paragraph.

# Chapter ##

This is a paragraph.

## Section #

This is a paragraph.

## Section ##

This is a paragraph.

### Sub-Section #

This is a paragraph.

### Sub-Section ###

This is a paragraph.

#### Sub-Sub-Section #

This is a paragraph.

#### Sub-Sub-Section ####

This is a paragraph.

##### Sub-Sub-Sub-Section #

This is a paragraph.

##### Sub-Sub-Sub-Section #####

This is a paragraph.

###### Sub-Sub-Sub-Sub-Section #

This is a paragraph.

###### Sub-Sub-Sub-Sub-Section ######

This is a paragraph.
~~~

###### HTML Output

{#output-h-2}
~~~
<p># Part ##</p>
<p>This is a paragraph.</p>
# Chapter ##</p>
<p>This is a paragraph.</p>
<p>## Section #</p>
<p>This is a paragraph.</p>
<p>## Section ##</p>
<p>This is a paragraph.</p>
<p>### Sub-Section #</p>
<p>This is a paragraph.</p>
<p>### Sub-Section ###</p>
<p>This is a paragraph.</p>
<p>#### Sub-Sub-Section #</p>
<p>This is a paragraph.</p>
<p>#### Sub-Sub-Section ####</p>
<p>This is a paragraph.</p>
<p>##### Sub-Sub-Sub-Section #</p>
<p>This is a paragraph.</p>
<p>##### Sub-Sub-Sub-Section #####</p>
<p>This is a paragraph.</p>
<p>###### Sub-Sub-Sub-Sub-Section #</p>
<p>This is a paragraph.</p>
<p>###### Sub-Sub-Sub-Sub-Section ######</p>
<p>This is a paragraph.</p>
~~~

##### Example H-3

A trailing `#` not separated by a space is part of the heading text.

###### Markua Document

{#input-h-3}
~~~
# foo#

bar
~~~

###### HTML Output

{#output-h-3}
~~~
<h1>foo#</h1>
<p>bar</p>
~~~

##### Example H-4

Backslash-escaped `#` characters are part of the heading text.

###### Markua Document

{#input-h-4}
~~~
# foo \#

bar
~~~

###### HTML Output

{#output-h-4}
~~~
<h1>foo #</h1>
<p>bar</p>
~~~

{#paragraphs-html}
# Paragraphs and Blank Lines

View the [specification](#paragraphs).

##### Example P-1

This is the basic example of paragraphs.

###### Markua Document

{#input-p-1}
~~~
I'm paragraph one. Yay!

This is paragraph two. It's just that easy.

This is paragraph three.
~~~

###### HTML Output

{#output-p-1}
~~~
<p>I'm paragraph one. Yay!</p>
<p>This is paragraph two. It's just that easy.</p>
<p>This is paragraph three.</p>
~~~

# Resources

TODO

## Resource Insertion Methods

TODO

## Resource Types and Formats

TODO

## Images

TODO

{#images_html}
The syntax for images is described [here](#images).

#### Local Images

##### Example

###### Markua Document

{#input-local_images_1}
~~~
Here's a paragraph before the first figure.

![A Piece of Cake](cake.jpg)

Here's a paragraph between the first and second figures.

{alt: "a slice of chocolate cake", class: "fullbleed"}
![A Piece of Cake](cake.jpg)

Here's a paragraph between the second and third figures.

{alt: "a slice of apple pie with ice cream on top", class: "food-closeup"}
![A Piece of Pie](pie.jpg)

Here's a paragraph after the third figure.
~~~

###### HTML Output

{#output-local_images_1}
~~~
<p>Here's a paragraph before the first figure.</p>
<div class="figure">
  <img src="cake.jpg"/>
  <p class="caption">A Piece of Cake</p>
</div>
<p>Here's a paragraph between the first and second figures.</p>
<div class="figure">
  <img src="cake.jpg" alt="a slice of chocolate cake" class="fullbleed"/>
  <p class="caption">A Piece of Cake</p>
</div>
<p>Here's a paragraph between the second and third figures.</p>
<div class="figure">
  <img src="pie.jpg" alt="a slice of apple pie with ice cream on top" class="food-closeup"/>
  <p class="caption">A Piece of Pie</p>
</div>
<p>Here's a paragraph after the third figure.</p>
~~~

### Web Images

##### Example

###### Markua Document

{#input-web_images_1}
~~~
Here's a paragraph before the first figure.

![A Piece of Cake](http://markua.com/cake.jpg)

Here's a paragraph between the first and second figures.

{alt: "a slice of chocolate cake", class: "fullbleed"}
![A Piece of Cake](http://markua.com/cake.jpg)

Here's a paragraph between the second and third figures.

{alt: "a slice of apple pie with ice cream on top", class: "food-closeup"}
![A Piece of Pie](http://markua.com/pie.jpg)

Here's a paragraph after the third figure.
~~~

###### HTML Output

{#output-web_images_1}
~~~
<p>Here's a paragraph before the first figure.</p>
<div class="figure">
  <img src="http://markua.com/cake.jpg"/>
  <p class="caption">A Piece of Cake</p>
</div>
<p>Here's a paragraph between the first and second figures.</p>
<div class="figure">
  <img src="http://markua.com/cake.jpg" alt="a slice of chocolate cake" class="fullbleed"/>
  <p class="caption">A Piece of Cake</p>
</div>
<p>Here's a paragraph between the second and third figures.</p>
<div class="figure">
  <img src="http://markua.com/pie.jpg" alt="a slice of apple pie with ice cream on top" class="food-closeup"/>
  <p class="caption">A Piece of Pie</p>
</div>
<p>Here's a paragraph after the third figure.</p>
~~~

### Inline Images (SVG only)

##### Example

###### Markua Document

{#input-inline_images_1}
~~~
Here's a paragraph before the figure.

{caption: "Earth From Space (Simplified)", alt: "a blue circle"}
```svg
<svg width="20" height="20">
  <circle cx="10" cy="10" r="9" fill="blue"/>
</svg>
```

Here's a paragraph after the figure.
~~~

###### HTML Output

Note that any alt text specified in the figure attribute list must be set as the `<desc>` attribute in the SVG.

{#output-inline_images_1}
~~~
<p>Here's a paragraph before the figure.</p>
<div class="figure">
  <svg width="20" height="20">
    <desc>a blue circle</desc>
    <circle cx="10" cy="10" r="9" fill="blue"/>
  </svg>
  <p class="caption">Earth From Space (Simplified)</p>
</div>
<p>Here's a paragraph after the figure.</p>
~~~


## Video

TODO


{#video_html}
The syntax for video is described [here](#video).

### Local Video

#### Example

###### Markua Document

{#input-local_video_1}
~~~
Here's a paragraph before the figure.

![A Piece of Cake](cake_eating_contest.webm)

Here's a paragraph after the figure.
~~~

###### HTML Output

{#output-local_video_1}
~~~
<p>Here's a paragraph before the figure.</p>
<div class="figure">
  <video src="cake_eating_contest.webm"/>
  <p class="caption">A Piece of Cake</p>
</div>
<p>Here's a paragraph after the figure.</p>
~~~

#### Web Video

##### Example

###### Markua Document

{#input-web_video_1}
~~~
Here's a paragraph before the figure.

{poster: http://img.youtube.com/vi/VOCYL-FNbr0/mqdefault.jpg}
![Introducing Markua](https://www.youtube.com/watch?t=105&v=VOCYL-FNbr0)

Here's a paragraph after the figure.
~~~

###### HTML Output

{#output-web_video_1}
~~~
<p>Here's a paragraph before the figure.</p>
<div class="figure">
  <video src="https://www.youtube.com/watch?t=105&v=VOCYL-FNbr0"
    poster="http://img.youtube.com/vi/VOCYL-FNbr0/mqdefault.jpg"/>
  <p class="caption">Introducing Markua</p>
</div>
<p>Here's a paragraph after the figure.</p>
~~~

## Audio

TODO


{#audio_html}
The syntax for audio is described [here](#audio).

### Local Audio

##### Example

###### Markua Document

{#input-local_audio_1}
~~~
The full version of the talk is here:

![Full Talk](talk.m4a)
~~~

###### HTML Output

{#output-local_audio_1}
~~~
<p>The full version of the talk is here:</p>
<div class="figure">
  <audio src="resources/talk.m4a"/>
  <p class="caption">Full Talk</p>
</div>
~~~

### Web Audio

##### Example

###### Markua Document

{#input-local_audio_1}
~~~
The full version of the talk is here:

![Full Talk](http://markua.com/talk.m4a)
~~~

###### HTML Output

{#output-local_audio_1}
~~~
<p>The full version of the talk is here:</p>
<div class="figure">
  <audio src="http://markua.com/talk.m4a"/>
  <p class="caption">Full Talk</p>
</div>
~~~

## Code

{#code-html}
The syntax for code is described [here](#code).

### CSS Note

In source code, whitespace matters, so it must not get collapsed into a single space. However, browsers will typically collapse consecutive spaces when rendering `<code>` elements. To prevent this, it is recommended that the following CSS be used:

```
code {
  white-space: pre-wrap;
}
```


Markua only specifies how code which has a format of `text` is formatted. All other formats of code are unspecified, since the behaviour depends on whether the programming language is recognized by the Markua Processor, whether syntax highlighting is enabled, and on what type and version of syntax highlighting library (e.g. Pygments) is used.

#### Local Code Resources

###### Dependencies

This file must exist in the resources directory. The filename is given, followed by a colon, a newline and the file contents.

{#dependencies_local_code_figure_1}
~~~
hello.rb:
```
puts "hello"

puts "world"
```
~~~

###### Markua Document

{#input-local_code_figure_1}
~~~
Here's a paragraph before the figure.

{format: text}
![Hello World in Ruby](hello.rb)

Here's a paragraph after the figure.
~~~

###### HTML Output

{#output-local_code_figure_1}
~~~
<p>Here's a paragraph before the figure.</p>
<div class="figure">
  <pre><code>puts "hello"

puts "world"</code></pre>
  <p class="caption">Hello World in Ruby</p>
</div>
<p>Here's a paragraph after the figure.</p>
~~~

### Web Code Resources

###### Dependencies

This file exists on `http://markua.com` for test purposes.

{#dependencies_web_code_figure_1}
~~~
http://markua.com/helloworld.rb:
```
puts "hello"

puts "world"
```
~~~

###### Markua Document

{#input-web_code_figure_1}
~~~
Here's a paragraph before the figure.

{format: text}
![Hello World in Ruby](http://markua.com/helloworld.rb)

Here's a paragraph after the figure.
~~~

###### HTML Output

{#output-web_code_figure_1}
~~~
<p>Here's a paragraph before the figure.</p>
<div class="figure">
  <pre><code>puts "hello"

puts "world"</code></pre>
  <p class="caption">Hello World in Ruby</p>
</div>
<p>Here's a paragraph after the figure.</p>
~~~

### Inline Code Resources

##### Span Example

###### Markua Document

{#input-inline_code_span_1}
~~~
Hello in Ruby is a `puts "hello"` statement.
~~~

###### HTML Output

{#output-inline_code_span_1}
~~~
<p>Hello in Ruby is a <code>puts "hello"</code> statement.</p>
~~~

##### Figure Example 1

###### Markua Document

{#input-inline_code_figure_1}
~~~
Here's a paragraph before the figure.

{caption: "Hello World in Ruby"}
```text
puts "hello"

puts "world"
```

Here's a paragraph after the figure.
~~~

###### HTML Output

{#output-inline_code_figure_1}
~~~
<p>Here's a paragraph before the figure.</p>
<div class="figure">
  <pre><code>puts "hello"

puts "world"</code></pre>
  <p class="caption">Hello World in Ruby</p>
</div>
<p>Here's a paragraph after the figure.</p>
~~~

##### Figure Example 2

###### Markua Document

{#input-inline_code_figure_2}
```
Here's a paragraph before the figure.

{caption: "Hello World in Ruby"}
~~~
puts "hello"

puts "world"
~~~

Here's a paragraph after the figure.
```

###### HTML Output

{#output-inline_code_figure_2}
~~~
<p>Here's a paragraph before the figure.</p>
<div class="figure">
  <pre><code>puts "hello"

puts "world"</code></pre>
  <p class="caption">Hello World in Ruby</p>
</div>
<p>Here's a paragraph after the figure.</p>
~~~

## Poetry

TODO


##### Example 1: Using three tildes

###### Markua Document

{#input-typewriter_poetry_1}
```
Here's a paragraph before the poetry.

{caption: "lazy cat"}
~~~
i
  am
      a        cat
            a        l a z y          cat

me   ow
~~~

Here's a paragraph after the poetry.
```

###### HTML Output

Typewriter poetry is output with the `<pre><code>` combination, just like any other inline code resource with a format of `text`. It is up to a book designer to use CSS to style the poetry accordingly.

{#output-typewriter_poetry_1}
~~~
<p>Here's a paragraph before the poetry.</p>
<div class="figure">
  <pre><code>i
  am
      a        cat
            a        l a z y          cat

me   ow</code></pre>
  <p class="caption">lazy cat</p>
</div>
<p>Here's a paragraph after the poetry.</p>
~~~

##### Example 2: Using three backticks plus the `text` format via syntactic sugar

###### Markua Document

{#input-typewriter_poetry_2}
~~~
Here's a paragraph before the poetry.

{caption: "lazy cat"}
```text
i
  am
      a        cat
            a        l a z y          cat

me   ow
```

Here's a paragraph after the poetry.
~~~

###### HTML Output

{#output-typewriter_poetry_2}
~~~
<p>Here's a paragraph before the poetry.</p>
<div class="figure">
  <pre><code>i
  am
      a        cat
            a        l a z y          cat

me   ow</code></pre>
  <p class="caption">lazy cat</p>
</div>
<p>Here's a paragraph after the poetry.</p>
~~~

##### Example 3: Using three backticks plus the `text` format specified in an attribute list

###### Markua Document

{#input-typewriter_poetry_3}
~~~
Here's a paragraph before the poetry.

{caption: "lazy cat", format: text}
```
i
  am
      a        cat
            a        l a z y          cat

me   ow
```

Here's a paragraph after the poetry.
~~~

###### HTML Output

{#output-typewriter_poetry_3}
~~~
<p>Here's a paragraph before the poetry.</p>
<div class="figure">
  <pre><code>i
  am
      a        cat
            a        l a z y          cat

me   ow</code></pre>
  <p class="caption">lazy cat</p>
</div>
<p>Here's a paragraph after the poetry.</p>
~~~

## Tables

TODO

Tables are always output inside a `<figure>`, and table captions are always output as a `<figcaption>` of the `<figure>`, instead of as a `<caption>` of a `<table>`. This way, the captions can be handled the same way as other figures, and the tables can benefit from the figure styling.

## Simple Tables

##### Example 1: No Leading Pipes, No Caption

###### Markua Document

{#input-simple_tables_1}
~~~
Header A   | Header B   | Header C
-----------|------------|-----------
Content A1 | Content B1 | Content C1
Content A2 | Content B2 | Content C2
Content A3 | Content B3 | Content C3
~~~

###### HTML Output

{#output-simple_tables_1}
~~~
<figure>
  <table>
    <thead>
      <tr>
        <th>Header A</th>
        <th>Header B</th>
        <th>Header C</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>Content A1</td>
        <td>Content B1</td>
        <td>Content C1</td>
      </tr>
      <tr>
        <td>Content A2</td>
        <td>Content B2</td>
        <td>Content C2</td>
      </tr>
      <tr>
        <td>Content A3</td>
        <td>Content B3</td>
        <td>Content C3</td>
      </tr>
    </tbody>
  </table>
</figure>
~~~

##### Example 2: Leading Pipes, Caption

###### Markua Document

{#input-simple_tables_2}
~~~
{caption: "A Simple Table"}
| Header A   | Header B   | Header C   |
|------------|------------|------------|
| Content A1 | Content B1 | Content C1 |
| Content A2 | Content B2 | Content C2 |
| Content A3 | Content B3 | Content C3 |
~~~

###### HTML Output

{#output-simple_tables_2}
~~~
<figure>
  <figcaption>A Simple Table</figcaption>
  <table>
    <thead>
      <tr>
        <th>Header A</th>
        <th>Header B</th>
        <th>Header C</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>Content A1</td>
        <td>Content B1</td>
        <td>Content C1</td>
      </tr>
      <tr>
        <td>Content A2</td>
        <td>Content B2</td>
        <td>Content C2</td>
      </tr>
      <tr>
        <td>Content A3</td>
        <td>Content B3</td>
        <td>Content C3</td>
      </tr>
    </tbody>
  </table>
</figure>
~~~

## Complex Tables

##### Example

###### Markua Document

{#input-complex_tables_1}
~~~
{caption: "A Complex Table"}
|=============|===============|=============|
| Header A    | Header B      | Header C    |
|:============|:=============:|============:|
| Content A1 and B1 Merged    | Content C1  |
|------------:|:--------------|-------------|
| Content A2  | Content B2    | Content C2  |
|:-----------:| and B3 Merged |-------------|
| Content A3  |               | Content C3  |
|=============|===============|=============|
| Footer A    | Footer B      | Footer C    |
|=============|===============|=============|
~~~

###### HTML Output

{#output-complex_tables_1}
~~~
<figure>
  <figcaption>A Complex Table</figcaption>
  <table>
    <thead>
      <tr>
        <th align="left">Header A</th>
        <th align="center">Header B</th>
        <th align="right">Header C</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td colspan="2" align="left">Content A1 annd B1 Merged</td>
        <td align="right">Content C1</td>
      </tr>
      <tr>
        <td align="right">Content A2</td>
        <td rowspan="2" align="left">Content B2 and B3 Merged</td>
        <td align="right">Content C2</td>
      </tr>
      <tr>
        <td align="center">Content A3</td>
        <td align="right">Content C3</td>
      </tr>
    </tbody>
    <tfoot>
      <tr>
        <td align="left">Footer A</td>
        <td align="center">Footer B</td>
        <td align="right">Footer C</td>
      </tr>
    </tfoot>
  </table>
</figure>
~~~


## Math

Markua does not specify how math is output in HTML. It is perfectly acceptable for a Markua Processor to output any math block as an image or as the LaTeX or MathML text of the math equation itself.

If MathJax is available, it is recommended for a Markua Processor to convert AsciiMath into MathML, and then use MathJax to format it.

# Whitespace: Spaces, Tabs and Newlines

TODO

## Newlines

TODO

## Spaces and Tabs

TODO

## TODO - incorporate this into the above


# This.
Is.
Heading Text!!!

This is paragraph four.
~~~

###### HTML Output

{#output-single_newlines_1}
~~~
<p>I'm paragraph one. Yay!</p>
<p>This is paragraph two.<br/>
This is *still* in paragraph two, preceded by a forced line break.<br/>
This is also in paragraph two, also preceded by a forced line break.</p>
<p>This is paragraph three.</p>
<h1>This.<br/>
Is.<br/>
Heading Text!!!</h1>
<p>This is paragraph four.</p>
~~~


## Leading Spaces (Prose vs. Poetry)

##### Example

###### Markua Document

{#input-leading_spaces_1}
~~~
I grant I never saw a goddess go;
My mistress when she walks treads on the ground.
    And yet, by heaven, I think my love as rare
    As any she belied with false compare.
~~~

###### HTML Output

{#output-leading_spaces_1}
~~~
<p>I grant I never saw a goddess go;<br/>
My mistress when she walks treads on the ground.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;And yet, by heaven, I think my love as rare<br/>
&nbsp;&nbsp;&nbsp;&nbsp;As any she belied with false compare.</p>
~~~

## Internal Spaces Are Collapsed to One Space

##### Example

###### Markua Document

{#input-internal_spaces_1}
~~~
foo   bar
~~~

###### HTML Output

{#output-internal_spaces_1}
~~~
<p>foo bar</p>
~~~


# Lists

TODO

## Bulleted Lists

TODO


##### Example

###### Markua Document

{#input-unordered_list_1}
~~~
lorem

* foo
* bar
* baz

ipsum

*  foo
*  bar
*  baz

dolor

*   foo
*   bar
*   baz

sit

*    foo
*    bar
*    baz

amet

- foo
- bar
- baz

lorem

* foo

ipsum

- foo

dolor
~~~

###### HTML Output

{#output-unordered_list_1}
~~~
<p>lorem</p>
<ul>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>ipsum</p>
<ul>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>dolor</p>
<ul>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>sit</p>
<ul>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>amet</p>
<ul class="hyphen">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>lorem</p>
<ul>
  <li>foo</li>
</ul>
<p>ipsum</p>
<ul class="hyphen">
  <li>foo</li>
</ul>
<p>dolor</p>
~~~

### Not Lists

##### Example

###### Markua Document

{#input-not_lists_1}
~~~
lorem

+ foo
+ bar
+ baz

ipsum

+ foo

dolor

*    foo
*   bar
*  baz

sit
~~~

###### HTML Output

{#output-not_lists_1}
~~~
<p>lorem</p>
<p>+ foo</p>
<p>+ bar</p>
<p>+ baz</p>
<p>ipsum</p>
<p>+ foo</p>
<p>dolor</p>
<p>*    foo<br/>
*   bar<br/>
*  baz</p>
<p>sit</p>
~~~

### Numbered Lists

TODO

### Simple Lists

TODO

### Flat Lists

TODO

### Complex Lists

TODO

### TODO - Incorporate into above sections

#### Example 1: Decimal Numbers

##### Example

###### Markua Document

{#input-ordered_lists_1}
~~~
lorem

1. foo
2. bar
3. baz

ipsum

9. foo
10. bar
11. baz

dolor

3. foo
2. bar
1. baz

sit

11. foo
10. bar
9. baz

amet

1. one
1. two
1. three

etc.
~~~

###### HTML Output

{#output-ordered_lists_1}
~~~
<p>lorem</p>
<ol>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
<ol start="9">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>dolor</p>
<ol start="3" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>sit</p>
<ol start="11" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>amet</p>
<ol>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>etc.</p>
~~~

#### Example 2: Uppercase Letters

##### Example

###### Markua Document

{#input-ordered_lists_2}
~~~
lorem

A. foo
B. bar
C. baz

ipsum

I. foo
J. bar
K. baz

dolor

C. foo
B. bar
A. baz

sit

K. foo
J. bar
I. baz

amet

A. foo
A. bar
A. baz

etc.
~~~

###### HTML Output

{#output-ordered_lists_2}
~~~
<p>lorem</p>
<ol type="A">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
<ol type="A" start="9">
<ol start="9">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>dolor</p>
<ol type="A" start="3" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>sit</p>
<ol type="A" start="11" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>amet</p>
<ol type="A">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>etc.</p>
~~~

#### Example 3: Lowercase Letters

##### Example

###### Markua Document

{#input-ordered_lists_3}
~~~
lorem

a. foo
b. bar
c. baz

ipsum

i. foo
j. bar
k. baz

dolor

c. foo
b. bar
a. baz

sit

k. foo
j. bar
i. baz

amet

a. foo
a. bar
a. baz

etc.
~~~

###### HTML Output

{#output-ordered_lists_3}
~~~
<p>lorem</p>
<ol type="a">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
<ol type="a" start="9">
<ol start="9">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>dolor</p>
<ol type="a" start="3" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>sit</p>
<ol type="a" start="11" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>amet</p>
<ol type="a">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>etc.</p>
~~~

##### Example 4: Uppercase Roman Numerals

###### Markua Document

{#input-ordered_lists_4}
~~~
lorem

I. foo
II. bar
III. baz

ipsum

IX. foo
X. bar
XI. baz

dolor

III. foo
II. bar
I. baz

sit

XI. foo
X. bar
IX. baz

amet

I. foo
I. bar
I. baz

etc.
~~~

###### HTML Output

{#output-ordered_lists_4}
~~~
<p>lorem</p>
<ol type="I">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
<ol type="I" start="9">
<ol start="9">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>dolor</p>
<ol type="I" start="3" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>sit</p>
<ol type="I" start="11" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>amet</p>
<ol type="I">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>etc.</p>
~~~

##### Example 5: Lowercase Roman Numerals

###### Markua Document

{#input-ordered_lists_5}
~~~
lorem

i. foo
ii. bar
iii. baz

ipsum

ix. foo
x. bar
xi. baz

dolor

iii. foo
ii. bar
i. baz

sit

xi. foo
x. bar
ix. baz

amet

i. foo
i. bar
i. baz

etc.
~~~

###### HTML Output

{#output-ordered_lists_5}
~~~
<p>lorem</p>
<ol type="i">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
<ol type="i" start="9">
<ol start="9">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>dolor</p>
<ol type="i" start="3" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>sit</p>
<ol type="i" start="11" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>amet</p>
<ol type="i">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>etc.</p>
~~~

##### Example 6: In Markua, A Single Element Ordered List is Not a List

###### Markua Document

{#input-ordered_lists_6}
~~~
foo

1. This isn't a list.

bar

1975. Also, not a list.

lorem

a. This isn't a list either.

ipsum

A. This isn't a list either.

dolor

i. This isn't a list either.

sit

I. This isn't a list either.

amet
~~~

###### HTML Output

{#output-ordered_lists_6}
~~~
<p>foo</p>
<p>1. This isn't a list.</p>
<p>bar</p>
<p>1975. Also, not a list.</p>
<p>lorem</p>
<p>a. This isn't a list either.</p>
<p>ipsum</p>
<p>A. This isn't a list either.</p>
<p>dolor
<p>i. This isn't a list either.</p>
<p>sit</p>
<p>I. This isn't a list either.</p>
<p>amet</p>
~~~

##### Example 7: Ordered List Numbering Rules

###### Markua Document

{#input-ordered_lists_7}
~~~
This makes an ordered list with decimal numbers (1, 2, 3):

1. one
1. two
1. three

This does not make a list, since the numbers are not all consecutive:

1. foo
2. bar
4. baz

This makes a list (1975, 1976):

1975. An amazing year.
1976. The year after 1975.

This does not make a list:

1975\. An amazing year.
1976\. The year after 1975.

This does not make a list:

1975. An amazing year.
2010. The year Leanpub was launched.

This makes a lowercase alphabetical ordered list (a, b):

a. one
b. two

This makes a lowercase alphabetical ordered list (e, f):

e. five
f. six

This makes a lowercase alphabetical ordered list (i, ii, iii, iv):

i. one
ii. two
iii. three
iv. four

Not a list:

i. one
ii. two
iv. four

Not a list:

a\. one
b\. two

Not a list:

a. one
c. three

That's it!
~~~

###### HTML Output

{#output-ordered_lists_7}
~~~
<p>This makes an ordered list with decimal numbers:</p>
<ol>
  <li>one</li>
  <li>two</li>
  <li>three</li>
</ol>
<p>This does not make a list, since the numbers are not all consecutive:</p>
<p>1. foo<br/>
2. bar<br/>
4. baz</p>
<p>This makes a list (1975, 1976):</p>
<ol start="1975">
  <li>An amazing year.</li>
  <li>The year after 1975.</li>
</ol>
<p>This does not make a list:</p>
<p>1975. An amazing year.<br/>
1976. The year after 1975.</p>
<p>This does not make a list:</p>
<p>1975. An amazing year.<br/>
2010. The year Leanpub was launched.</p>
<p>This makes a lowercase alphabetical ordered list (a, b):</p>
<ol type="a">
  <li>one</li>
  <li>two</li>
</ol>
<p>This makes a lowercase alphabetical ordered list (e, f):</p>
<ol type="a" start="5">
  <li>five</li>
  <li>six</li>
</ol>
<p>This makes a lowercase alphabetical ordered list (i, ii, iii, iv):</p>
<ol type="i">
  <li>one</li>
  <li>two</li>
  <li>three</li>
  <li>four</li>
</ol>
<p>Not a list:</p>
<p>i. one<br/>
ii. two<br/>
iv. four</p>
<p>Not a list:</p>
<p>a\. one<br/>
b\. two</p>
<p>Not a list:</p>
<p>a. one<br/>
c. three</p>
<p>That's it!</p>
~~~

### Multi-Paragraph List Items

##### Example

###### Markua Document

{#input-multi_para_lists_1}
~~~
Here's a paragraph before the list.

1.  This is the first paragraph in the first list item. Yay!

    This is a second paragraph in the first list item.

2.  The second list item is simple.

3.  The third list item has three paragraphs.
    This is still part of the first paragraph.

    Here's the second paragraph in the third list item.

    Here's the third paragraph in the third list item.

Here's a paragraph after the list.
~~~

###### HTML Output

{#output-multi_para_lists_1}
~~~
<p>Here's a paragraph before the list.</p>
<ol>
  <li>
    <p>This is the first paragraph in the first list item. Yay!</p>
    <p>This is a second paragraph in the first list item.</p>
  </li>
  <li>The second list item is simple.</li>
  <li>
    <p>The third list item has three paragraphs.<br/>
    This is still part of the first paragraph.</p>
    <p>Here's the second paragraph in the third list item.</p>
    <p>Here's the third paragraph in the third list item.</p>
  </li>
</ol>
<p>Here's a paragraph after the list.</p>
~~~


### Nested Lists

##### Example

###### Markua Document

{#input-nested_lists_1}
~~~
* Foo
  1. One
  2. Two
    a. This is 2a
    b. This is 2b
  3. Three
* Bar
  i.   Lorem
  ii.  Ipsum
  iii. Dolor
* Baz
~~~

###### HTML Output

{#output-nested_lists_1}
~~~
<ul>
  <li>
    Foo
    <ol>
      <li>One</li>
      <li>
        Two
        <ol type="a">
          <li>This is 2a</li>
          <li>This is 2b</li>
        </ol>
      </li>
      <li>Three</li>
    </ol>
  </li>
  <li>
    Bar
    <ol type="i">
      <li>Lorem</li>
      <li>Ispum</li>
      <li>Dolor</li>
    </ol>
  </li>
  <li>Baz</li>
</ul>
~~~

### Nesting Block Elements in List Items

#### Single-Paragraph List Items

##### Example

###### Markua Document

{#input-spli_1}
~~~
* Foo
  {caption: "Hello World in Ruby"}
  ```text
  puts "hello"
  ```
* Bar
* Baz
~~~

###### HTML Output

{#output-spli_1}
~~~
<ul>
  <li>
    <p>Foo<br/>
      <div class="figure">
        <pre><code>puts "hello"</code></pre>
        <p class="caption">Hello World in Ruby</p>
      </div>
    </p>
  </li>
  <li>Bar</li>
  <li>Baz</li>
</ul>
~~~

#### Multiple-Paragraph List Items

##### Example

###### Markua Document

{#input-mpli_1}
~~~
* This is paragraph 1 in the first list item.

  ```text
  puts "hello"
  ```

  This is paragraph 2 in the first list item.

* This is paragraph 1 in the second list item.

  ![A Piece of Cake](cake.jpg)

  This is paragraph 2 in the second list item.

* Baz
~~~

###### HTML Output

{#output-mpli_1}
~~~
<ul>
  <li>
    <p>This is paragraph 1 in the first list item.</p>
    <div class="figure">
      <pre><code>puts "hello"</code></pre>
    </div>
    <p>This is paragraph 2 in the first list item.</p>
  </li>
  <li>
    <p>This is paragraph 1 in the second list item.</p>
    <div class="figure">
      <img src="cake.jpg"/>
      <p class="caption">A Piece of Cake</p>
    </div>
    <p>This is paragraph 2 in the second list item.</p>
  </li>
  <li>Baz</li>
</ul>
~~~

## Definition Lists

TODO

##### Example

###### Markua Document

{#input-definition_lists_1}
~~~
Here's a paragraph before the list.

one
: This is the first definition of one. It's one paragraph.
: This is the second definition of one. It's two paragraphs.

  This is a second paragraph in the second definition of one.

two
: The second list item is simple.

three
: The third list item has three paragraphs.
  This is still part of the first paragraph.

  Here's the second paragraph in the third list item.

  Here's the third paragraph in the third list item.

Here's a paragraph after the list.
~~~

###### HTML Output

{#output-definition_lists_1}
~~~
<p>Here's a paragraph before the list.</p>
<dl>
  <dt>one</dt>
  <dd>This is the first definition of one. It's one paragraph.</dd>
  <dd>
    <p>This is the second definition of one. It's two paragraphs.</p>
    <p>This is a second paragraph in the second definition of one.</p>
  </dd>
  <dt>two</dt>
  <dd>The second list item is simple.</dd>
  <dt>three</dt>
  <dd>
    <p>The third list item has three paragraphs.<br/>
    This is still part of the first paragraph.</p>
    <p>Here's the second paragraph in the third list item.</p>
    <p>Here's the third paragraph in the third list item.</p>
  </dd>
</dl>
<p>Here's a paragraph after the list.</p>
~~~

## Block Elements

TODO

### Blockquotes (`>`)

TODO


##### Example 1: Blockquotes that are Siblings of Paragraphs

###### Markua Document

{#input-blockquotes_1}
~~~
This is the first paragraph.

> This is a blockquote.
>
> It is outside the paragraphs.

This is the second paragraph.

{blockquote}
This is a blockquote.

It is outside the paragraphs.
{/blockquote}

This is the third paragraph.
~~~

###### HTML Output

{#output-blockquotes_1}
~~~
<p>This is the first paragraph.</p>
<blockquote>
  <p>This is a blockquote.</p>
  <p>It is outside the paragraphs.</p>
</blockquote>
<p>This is the second paragraph.</p>
<blockquote>
  <p>This is a blockquote.</p>
  <p>It is outside the paragraphs.</p>
</blockquote>
<p>This is the third paragraph.</p>
~~~

##### Example 2: Blockquotes that are Nested in Paragraphs

###### Markua Document

{#input-blockquotes_2}
~~~
This is the first paragraph.

This is the second paragraph.
> This is a blockquote
>
> It is inside the second paragraph.
This is part of the second paragraph.
{blockquote}
This is a blockquote.

It is inside the second paragraph.
{/blockquote}
This is part of the second paragraph.

This is the third paragraph.
~~~

###### HTML Output

{#output-blockquotes_2}
~~~
<p>This is the first paragraph.</p>
<p>This is the second paragraph.<br/>
<blockquote>
  <p>This is a blockquote</p>
  <p>It is inside the second paragraph.</p>
</blockquote>
This is part of the second paragraph.<br/>
<blockquote>
  <p>This is a blockquote</p>
  <p>It is inside the second paragraph.</p>
</blockquote>
This is part of the second paragraph.</p>
<p>This is the third paragraph.</p>
~~~

##### Example 3: Blockquotes with Attribute Lists

###### Markua Document

{#input-blockquotes_3}
~~~
Lots of people have opinions about software.

Here's the most famous recent one:

{cite: "Marc Andreessen", url: "http://www.wsj.com/articles/SB10001424053111903480904576512250915629460"}
> Software is eating the world.

It's quoted a lot, so let's quote it again:

{cite: "Marc Andreessen", url: "http://www.wsj.com/articles/SB10001424053111903480904576512250915629460"}
{blockquote}
Software is eating the world.
{/blockquote}

That's it!
~~~

###### HTML Output

{#output-blockquotes_3}
~~~
<p>Lots of people have opinions about software.</p>
<p>Here's the most famous recent one:</p>
<blockquote>
  <p>Software is eating the world.</p>
  <cite><a href="http://www.wsj.com/articles/SB10001424053111903480904576512250915629460">Marc Andreessen</a></cite>
</blockquote>
<p>It's quoted a lot, so let's quote it again:</p>
<blockquote>
  <p>Software is eating the world.</p>
  <cite><a href="http://www.wsj.com/articles/SB10001424053111903480904576512250915629460">Marc Andreessen</a></cite>
</blockquote>
<p>That's it!</p>
~~~

### Asides (`A>` or `{aside}`)

TODO


##### Example

###### Markua Document

{#input-asides_1}
~~~
This is the first paragraph.
A> This is a short aside.
This is still the first paragraph.

A> # A Longer Aside
A>
A> This is a longer aside.
A>
A> It can have multiple paragraphs.

This is the second paragraph.

{aside}
# A Longer Aside

This is a longer aside.

It can have multiple paragraphs.
{/aside}

This is the third paragraph.
~~~

###### HTML Output

{#output-asides_1}
~~~
<p>This is the first paragraph.<br/>
<aside>
  <p>This is a short aside.</p>
</aside>
This is still the first paragraph.</p>
<aside>
  <h1>A Longer Aside</h1>
  <p>This is a longer aside.</p>
  <p>It can have multiple paragraphs.</p>
</aside>
<p>This is the second paragraph.</p>
<aside>
  <h1>A Longer Aside</h1>
  <p>This is a longer aside.</p>
  <p>It can have multiple paragraphs.</p>
</aside>
<p>This is the third paragraph.</p>
~~~

### Blurbs (`B>` or `{blurb}`)

TODO


##### Example 1: Normal Blurbs

###### Markua Document

{#input-blurbs_1}
~~~
This is the first paragraph.
B> This is a short blurb.
This is still the first paragraph.

B> # A Longer Blurb
B>
B> This is a longer blurb.
B>
B> It can have multiple paragraphs.

This is the second paragraph.

{blurb}
# A Longer Blurb

This is a longer blurb.

It can have multiple paragraphs.
{/blurb}

This is the third paragraph.
~~~

###### HTML Output

{#output-blurbs_1}
~~~
<p>This is the first paragraph.<br/>
<aside class="blurb">
  <p>This is a short blurb.</p>
</aside>
This is still the first paragraph.</p>
<aside class="blurb">
  <h1>A Longer Blurb</h1>
  <p>This is a longer blurb.</p>
  <p>It can have multiple paragraphs.</p>
</aside>
<p>This is the second paragraph.</p>
<aside class="blurb">
  <h1>A Longer Blurb</h1>
  <p>This is a longer blurb.</p>
  <p>It can have multiple paragraphs.</p>
</aside>
<p>This is the third paragraph.</p>
~~~

##### Example 2: Blurb Classes

###### Markua Document

{#input-blurbs_2}
~~~
{class: discussion}
B> This is a discussion blurb.

{class: error}
B> This is an error blurb.

{class: information}
B> This is an information blurb.

{class: tip}
B> This is a tip blurb.

{class: warning}
B> This is a warning blurb.
~~~

###### HTML Output

{#output-blurbs_2}
~~~
<aside class="blurb discussion">
  <p>This is a discussion blurb.</p>
</aside>
<aside class="blurb error">
  <p>This is an error blurb.</p>
</aside>
<aside class="blurb information">
  <p>This is an information blurb.</p>
</aside>
<aside class="blurb tip">
  <p>This is a tip blurb.</p>
</aside>
<aside class="blurb warning">
  <p>This is a warning blurb.</p>
</aside>
~~~

##### Example 3: Syntactic Sugar for Blurb Classes

###### Markua Document

{#input-blurbs_3}
~~~
D> This is a discussion blurb.

E> This is an error blurb.

I> This is an information blurb.

T> This is a tip blurb.

W> This is a warning blurb.
~~~

###### HTML Output

{#output-blurbs_3}
~~~
<aside class="blurb discussion">
  <p>This is a discussion blurb.</p>
</aside>
<aside class="blurb error">
  <p>This is an error blurb.</p>
</aside>
<aside class="blurb information">
  <p>This is an information blurb.</p>
</aside>
<aside class="blurb tip">
  <p>This is a tip blurb.</p>
</aside>
<aside class="blurb warning">
  <p>This is a warning blurb.</p>
</aside>
~~~

### Inserting Block Elements Inside Paragraphs

TODO


##### Example

###### Markua Document

{#input-ibeip_1}
~~~
This is paragraph one.

This sentence is in paragraph two.
* this list is
* part of
* paragraph two
This sentence is also in paragraph two.

This is paragraph three.

This sentence is in paragraph four.
{caption: "Hello, World"}
```text
puts "hello world"
```
This sentence is also in paragraph four.

This sentence is in paragraph five.
![A Piece of Cake](cake.jpg)
This sentence is also in paragraph five.

This sentence is in paragraph six.
{alt: "a slice of chocolate cake"}
![A Piece of Cake](http://markua.com/cake.jpg)
This sentence is also in paragraph six.

This sentence is in paragraph seven.
* this list is
* part of
* paragraph seven

This is paragraph eight.
~~~

###### HTML Output

{#output-ibeip_1}
~~~
<p>This is paragraph one.</p>

<p>This sentence is in paragraph two.<br/>
<ul>
  <li>this list is</li>
  <li>part of</li>
  <li>paragraph two</li>
</ul>
This sentence is also in paragraph two.</p>

<p>This is paragraph three.</p>

<p>This sentence is in paragraph four.<br/>
<div class="figure">
  <pre><code>puts "hello world"</code></pre>
  <p class="caption">Hello, World</p>
</div>
puts
```
This sentence is also in paragraph four.</p>

<p>This sentence is in paragraph five.<br/>
<div class="figure">
  <img src="cake.jpg"/>
  <p class="caption">A Piece of Cake</p>
</div>
This sentence is also in paragraph five.</p>

<p>This sentence is in paragraph six.<br/>
<div class="figure">
  <img src="http://markua.com/cake.jpg" alt="a slice of chocolate cake"/>
  <p class="caption">A Piece of Cake</p>
</div>
This sentence is also in paragraph six.</p>

<p>This sentence is in paragraph seven.<br/>
<ul>
  <li>this list is</li>
  <li>part of</li>
  <li>paragraph seven</li>
</ul>
</p>

<p>This is paragraph eight.</p>
~~~

### Quizzes and Exercises

TODO

## Span Elements

TODO

### Links

TODO


##### Example

###### Markua Document

{#input-links_1}
~~~
Markua was developed at [Leanpub](http://leanpub.com).

Markua was developed at <http://leanpub.com>.
~~~

###### HTML Output

{#output-links_1}
~~~
Markua was developed at <a href="http://leanpub.com">Leanpub</a>.

Markua was developed at <a href="http://leanpub.com">http://leanpub.com</a>.
~~~

### Explicitly Creating Spans with `[`...`]`

TODO

### Footnotes and Endnotes

TODO

Markua does not specify how footnotes and endnotes are output in HTML. A Markua Processor should output them *somewhere*, but the details are not specified. This is deliberate, in order to maximize implementation flexibility for implementers of Markua Processors.

### Crosslinks and ids

TODO


##### Example

###### Markua Document

{#input-crosslinks_ids_1}
~~~
{id: id1}
This is a paragraph with an id of `id1`.

{#id2}
This is a paragraph with an id of `id2`.

This link to [Markua](#markua) is before the id definition.

The word Markua{id: markua} has an id of `markua`.

This link to [Markua](#markua) is after the id definition.

Leanpub is based in **Victoria, BC, Canada**{#victoria}.

The [quick sly fox]{#quick_sly} jumped over the lazy dogs.
~~~

###### HTML Output

{#output-crosslinks_ids_1}
~~~
<h1>Crosslink Example</h1>
<p id="id1">This is a paragraph with an id of <code>id1</code>.</p>
<p id="id2">This is a paragraph with an id of <code>id2</code>.</p>
<p>This link to <a href="#markua">Markua</a> is before the id definition.</p>
<p>The word <span id="markua">Markua</span> has an id of <code>markua</code>.</p>
<p>This link to <a href="#markua">Markua</a> is after the id definition.</p>
<p>Leanpub is based in <strong id="victoria">Victoria, BC, Canada</strong>.
<p>The <span id="quick_sly">quick sly fox</span> jumped over the lazy dogs.</p>
~~~

### Character Substitution

TODO

### Escaping Special Characters with Backslash (`\`)

TODO

### Backticks (`` ` ``)

TODO

### Unicode Entities with `\u`

### Nesting Formatting

TODO

### Emoji

Markua does not specify how emoji are output in HTML. The various choices are discussed in the [Emoji section](#emoji).

### Placeholders

TODO

### CriticMarkup

TODO


When outputting HTML, a Markua Processor can either output or ignore all the CriticMarkup.

The choice is situation-dependent. For example, a Markua Processor could output CriticMarkup when previewing, but output only the original text when publishing.

However, regardless of the fact that there is a choice, there is an exact specification for both cases. Also, there is only one choice: all or nothing. It's not acceptable to support some CriticMarkup annotations but not others.

The following example shows a paragraph annotated with CriticMarkup:

~~~
If you enjoy using track changes{>>Who enjoys this?<<} in Word, then {~~you'll enjoy~>you may like~~} using
CriticMarkup {++annotations++}. If you don't enjoy working with editors{-- or getting feedback about your
writing in the text itself--}, then CriticMarkup isn't for you! If this is the case, don't worry about
it: {==the support for CriticMarkup has no impact on the rest of Markua==}{>>This sounds ambivalent.<<}.
If you don't want to use it, you don't need to learn about it.
~~~

Here's the HTML that must be produced when the Markua Processor is ignoring all CriticMarkup:

~~~
<p>If you enjoy using track changes in Word, then you'll enjoy using CriticMarkup. If you don't enjoy
working with editors or getting feedback about your writing in the text itself, then CriticMarkup
isn't for you! If this is the case, don't worry about it: the support for CriticMarkup has no impact
on the rest of Markua. If you don't want to use it, you don't need to learn about it.</p>
~~~

Here's the HTML that must be produced when the Markua Processor is outputting all CriticMarkup:

~~~
<p>If you enjoy using track changes<span class="critic comment">Who enjoys this?</span> in Word,
then <del>you'll enjoy</del><ins>you may like</ins> using CriticMarkup <ins>annotations</ins>. If
you don't enjoy working with editors<del> or getting feedback about your writing in the text itself</del>,
then CriticMarkup isn't for you! If this is the case, don't worry about it: <mark>the support for
CriticMarkup has no impact on the rest of Markua</mark><span class="critic comment">This sounds
ambivalent.</span>. If you don't want to use it, you don't need to learn about it.</p>
~~~

### A Hack for Forcing Whitespace

TODO

### Concatenating Files and Blank Lines

TODO

## Metadata

TODO

### Attributes

TODO

### Index Entries

Markua does not specify how index entries are output in HTML. Markua Processors can take great liberties in the construction of an index based on index entries.

### Directives

Markua does not specify how book section directives affect the HTML output. Markua Processors have lots of freedom here.

### Settings

TODO

## Courses

TODO

### Quizzes and Exercises

TODO

### Question Types: Multiple Choice, Multiple Selection, Fill In The Blank, Written

TODO

### Markua Processor Behaviour

TODO

### Question Alternates

TODO