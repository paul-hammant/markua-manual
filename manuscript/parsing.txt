{#parsing-markua}
# Parsing Markua #

If you are an author who is looking to write a book or course in Markua, you can stop reading now. This part is not for you; it's just for people who are writing code to build a Markua Processor. Stop reading this and go write your book or course!

As discussed in the section [Copyright, CC BY-SA License, and CC Attribution of CommonMark](#copyright-ccby-commonmark), portions of this part are taken from or are based on version 0.29 of the [CommonMark Spec](https://spec.commonmark.org/0.29/), which is licensed CC BY-SA 4.0 and is copyright John MacFarlane. These portions are used under the terms of the CC BY-SA 4.0 license.

W> While the previous part, [Markua for Authors](#markua-for-authors), is reasonably complete and polished, this part is an in-progress mess. I'm publishing the Markua spec in this state for three reasons:
W>
W> 1. The content in this part is only useful for people building Markua parsers, which is less than 1% of the audience of this spec.
W> 2. The Markua for Authors content is far better now than it was previously, and I don't want to block that part on this one.
W> 3. I believe in [Lean Publishing](https://leanpub.com/lean). (Lean Publishing is the act of publishing an in-progress book using lightweight tools and many iterations to get reader feedback, pivot until you have the right book and build traction once you do.)

# Introduction

This part contains two things:

1. A discussion of concerns which only apply to people building Markua Processors.
2. The specification of the mapping of much of Markua to HTML.

A Markua Processor must be able to properly parse a Markua document and output HTML, as well as any other suitable output formats. (`/dev/null` may be web scale, but it is not a good output format for a Markua Processor.)

For example, the output formats which Leanpub produces from a single Markua document are: PDF, EPUB, MOBI, HTML, InDesign and (if applicable) a course with quizzes, exercises and automated marking.

The Markua Specification does not precisely define all output formats or the content of those output formats. Instead, the only required output format of a Markua Processor is HTML. Also, HTML is the only output format where any specification is provided. The reason that HTML is a required output format for a Markua Processor to be able to help ensure conformance to the Markua Specification.

For ease of comparison with CommonMark, this part is organized as much like the CommonMark Spec as possible.

## Format of the HTML Output Fragments

Please note that this is not a complete specification of the HTML documents produced by Markua Processors. It is only a specification of the parts of the HTML mapping where there is no need to have flexibility on the part of the Markua Processor. The HTML mapping should be thought of specifying HTML fragments, not documents. In all of the examples, a Markua Processor may add more HTML before and after the relevant content. The test is that the HTML produced contains the specified output, not that it is identical to the specified output.

Every Markua text example is a complete Markua document. If it is processed by a Markua Processor, the HTML which is produced should include the output. Now, since Markua does not specify the exact content of the HTML, the boilerplate before and after the HTML Output is not specified or included.

It can, however, be as simple as the following:

```
<html><head></head><body>
(...the HTML output...)
</body></html>
```

Every example uses the default Markua document settings, unless otherwise specified. Any custom settings are specified in a settings hash in the top of the example.

## Running the Tests

This chapter contains many examples with Markua and the corresponding HTML. Some of these examples are based on the CommonMark Spec, as [discussed earlier](#copyright-ccby-commonmark). These examples are intended to double as conformance tests. An accompanying script can be used to run the tests against any Markua Processor which outputs HTML:

```
python test/spec_tests.py --spec spec.txt --program PROGRAM
```

W> TODO - update the `spec_tests` script or provide a new one to do this based on the Markua spec.

## CSS Notes

Markua does not specify any CSS. However, advice will sometimes be offered in "CSS Note" sections. This is because certain semantically meaningful formatting (like strikethrough) is only done in HTML via CSS.

## Global Settings

The HTML which is output by a Markua Processor can be affected by certain global settings.

These are the default values of these settings:

~~~
{
html-style: default
italicize-underlines: false
}
~~~

If you want to make the HTML which is output by Markua as close to Markdown as possible, you will want to use a settings block which contains the following settings:

~~~
{
html-style: markdown
italicize-underlines: true
}
~~~

In the examples in this part, the global settings will be set to these values (`html-style: markdown` and `italicize-underlines: true`) unless otherwise indicated by the presence of a settings block. The reason for this is simple: this part incorporates many examples from the CommonMark Spec, and rewriting them all would be painful and pointless.

# Preliminaries

## Definitions of Characters and Lines

The following is the precise definition of characters, lines, etc in a Markua document. For compatibility with CommonMark, **this definition is identical to that used in the CommonMark specification**, and is taken verbatim from it.

Any sequence of [characters](#def-character) is a valid Markua document.

A [character]{#def-character} is a Unicode code point. Although some code points (for example, combining accents) do not correspond to characters in an intuitive sense, all code points count as characters for purposes of this spec.

This spec does not specify an encoding; it thinks of lines as composed of [characters](#character) rather than bytes. A conforming parser may be limited to a certain encoding.

A [line]{#def-line} is a sequence of zero or more [characters] other than newline (`U+000A`) or carriage return (`U+000D`), followed by a [line ending] or by the end of file.

A [line ending]{#def-line-ending} is a newline (`U+000A`), a carriage return (`U+000D`) not followed by a newline, or a carriage return and a following newline.

A line containing no characters, or a line containing only spaces (`U+0020`) or tabs (`U+0009`), is called a [blank line](@).

The following definitions of character classes will be used in this spec:

A [whitespace character]{#def-whitespace-character} is a space (`U+0020`), tab (`U+0009`), newline (`U+000A`), line tabulation (`U+000B`), form feed (`U+000C`), or carriage return (`U+000D`).

[Whitespace]{#def-whitespace} is a sequence of one or more [whitespace characters].

A [Unicode whitespace character]{#def-unicode-whitespace-character} is any code point in the Unicode `Zs` general category, or a tab (`U+0009`), carriage return (`U+000D`), newline (`U+000A`), or form feed (`U+000C`).

[Unicode whitespace]{#def-unicode-whitespace} is a sequence of one or more [Unicode whitespace characters](#def-unicode-whitespace-character).

A [space]{#def-space} is `U+0020`.
A [non-whitespace character]{#def-non-whitespace-character} is any character that is not a [whitespace character](#def-whitespace-character).

An [ASCII punctuation character]{#ascii-punctuation-character} is `!`, `"`, `#`, `$`, `%`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `-`, `.`, `/` (U+0021–2F), `:`, `;`, `<`, `=`, `>`, `?`, `@` (U+003A–0040), `[`, `\`, `]`, `^`, `_`, `` ` `` (U+005B–0060), `{`, `|`, `}`, or `~` (U+007B–007E).

A [punctuation character]{#punctuation-character} is an [ASCII punctuation character](#ascii-punctuation-character) or anything in the general Unicode categories  `Pc`, `Pd`, `Pe`, `Pf`, `Pi`, `Po`, or `Ps`.

## Tabs

Tabs are different from spaces.

In all the examples which follow, the `→` character is used to represent tabs.

There are two reasons for this:

1. It makes it clear whether tabs or spaces are being used.
2. It makes the examples closer to those of CommonMark, and enables some reuse between them.

This does mean, however, that the test script must convert the `→` characters into tabs before the inputs are passed to the Markua Processor. Similarly, if you are going to try any of these examples yourself with a Markua Processor like Leanpub, you need to replace all `→` characters with tabs.

Note that since Markua does not support indented code blocks, much of the discussion you would find in the equivalent section of the CommonMark Spec does not apply here. Tabs are discussed in Markua primarily in the context of simple lists.

## Insecure characters

For security reasons, the Unicode character `U+0000` must be replaced with the REPLACEMENT CHARACTER (`U+FFFD`).

# Blocks and inlines

We can think of a document as a sequence of [blocks](@)---structural elements like paragraphs, block quotations, lists, headings, rules, and code blocks.  Some blocks (like block quotes and list items) contain other blocks; others (like headings and paragraphs) contain [inline](@) content---text, links, emphasized text, images, code spans, and so on.

## Precedence

Indicators of block structure always take precedence over indicators of inline structure.  So, for example, the following is a list with two items, not a list with one item containing a code span:

```example
- `one
- two`
.
<ul>
<li>`one</li>
<li>two`</li>
</ul>
```

This means that parsing can proceed in two steps:  first, the block structure of the document can be discerned; second, text lines inside paragraphs, headings, and other block constructs can be parsed for inline structure.  The second step requires information about link reference definitions that will be available only at the end of the first step.  Note that the first step requires processing lines in sequence, but the second can be parallelized, since the inline parsing of one block element does not affect the inline parsing of any other.

## Container blocks and leaf blocks

We can divide blocks into two types: [container blocks](@), which can contain other blocks, and [leaf blocks](@),
which cannot.

# Leaf blocks

This section describes the different kinds of leaf block that make up a Markua document.


{#headings-html}
## Headings for Parts, Chapters and Sections

View the [specification](#headings).

##### Example H-1

This example shows the correct use of headings. Incorrect heading uses are in subsequent examples.

###### Markua Document

{#input-h-1}
~~~
# Part #

This is a paragraph.

# Chapter

This is a paragraph.

## Section

This is a paragraph.

### Sub-Section

This is a paragraph.

#### Sub-Sub-Section

This is a paragraph.

##### Sub-Sub-Sub-Section

This is a paragraph.

###### Sub-Sub-Sub-Sub-Section

This is a paragraph.
~~~

###### HTML Output

{#output-h-1}
~~~
<h1 class="part">Part</h1>
<p>This is a paragraph.</p>
<h1 class="chapter">Chapter</h1>
<p>This is a paragraph.</p>
<h2 class="section">Section</h2>
<p>This is a paragraph.</p>
<h3 class="sub-section">Sub-Section</h3>
<p>This is a paragraph.</p>
<h4 class="sub-sub-section">Sub-Sub-Section</h4>
<p>This is a paragraph.</p>
<h5 class="sub-sub-sub-section">Sub-Sub-Sub-Section</h5>
<p>This is a paragraph.</p>
<h6 class="sub-sub-sub-sub-section">Sub-Sub-Sub-Sub-Section</h6>
<p>This is a paragraph.</p>
~~~

##### Example H-2

This example shows incorrect uses of headings. None of the things below are headings, since the trailing `#` signs are wrong.

###### Markua Document

{#input-h-2}
~~~
# Part ##

This is a paragraph.

# Chapter ##

This is a paragraph.

## Section #

This is a paragraph.

## Section ##

This is a paragraph.

### Sub-Section #

This is a paragraph.

### Sub-Section ###

This is a paragraph.

#### Sub-Sub-Section #

This is a paragraph.

#### Sub-Sub-Section ####

This is a paragraph.

##### Sub-Sub-Sub-Section #

This is a paragraph.

##### Sub-Sub-Sub-Section #####

This is a paragraph.

###### Sub-Sub-Sub-Sub-Section #

This is a paragraph.

###### Sub-Sub-Sub-Sub-Section ######

This is a paragraph.
~~~

###### HTML Output

{#output-h-2}
~~~
<p># Part ##</p>
<p>This is a paragraph.</p>
# Chapter ##</p>
<p>This is a paragraph.</p>
<p>## Section #</p>
<p>This is a paragraph.</p>
<p>## Section ##</p>
<p>This is a paragraph.</p>
<p>### Sub-Section #</p>
<p>This is a paragraph.</p>
<p>### Sub-Section ###</p>
<p>This is a paragraph.</p>
<p>#### Sub-Sub-Section #</p>
<p>This is a paragraph.</p>
<p>#### Sub-Sub-Section ####</p>
<p>This is a paragraph.</p>
<p>##### Sub-Sub-Sub-Section #</p>
<p>This is a paragraph.</p>
<p>##### Sub-Sub-Sub-Section #####</p>
<p>This is a paragraph.</p>
<p>###### Sub-Sub-Sub-Sub-Section #</p>
<p>This is a paragraph.</p>
<p>###### Sub-Sub-Sub-Sub-Section ######</p>
<p>This is a paragraph.</p>
~~~

##### Example H-3

A trailing `#` not separated by a space is part of the heading text.

###### Markua Document

{#input-h-3}
~~~
# foo#

bar
~~~

###### HTML Output

{#output-h-3}
~~~
<h1>foo#</h1>
<p>bar</p>
~~~

##### Example H-4

Backslash-escaped `#` characters are part of the heading text.

###### Markua Document

{#input-h-4}
~~~
# foo \#

bar
~~~

###### HTML Output

{#output-h-4}
~~~
<h1>foo #</h1>
<p>bar</p>
~~~

## Scene Breaks (`* * *`)

View the [specification](#scene-breaks).

In HTML, scene breaks are always mapped to `<hr/>`. Book designers can use CSS to replace th e `<hr/>` with whatever they want: there are no other ways to produce an `<hr/>` in Markua, so an `<hr/>` always means scene break.

##### Example SB-1

###### Markua Document

{#input-scene-break-1}
~~~
Paragraph one

* * *

Paragraph two

***

Paragraph three

*********

Paragraph four

*  *   *

Paragraph five
~~~

###### HTML Output

{#output-scene-break-1}
~~~
<p>Paragraph one</p>
<hr/>
<p>Paragraph two</p>
<hr/>
<p>Paragraph three</p>
<hr/>
<p>Paragraph four</p>
<hr/>
<p>Paragraph five</p>
~~~

##### Example SB-2

Note that scene breaks require blank lines above and below them. Also, note that you cannot add scene breaks inside list items.

Failing to meet either constraint will result in the scene break asterisks being inserted as text.

Also, note that `---` or `___` on a line by itself starts a poetry block (using monospaced or proportional fonts, respectively), instead of inserting a scene break. So, these are not shown here.

###### Markua Document

{#input-scene-break-2}
~~~
Paragraph one

* *

Paragraph two

**

Paragraph three
***
Paragraph four

* foo
* ***
* bar
~~~

###### HTML Output

{#output-scene-break-2}
~~~
<p>Paragraph one</p>
<p>* *</p>
<p>Paragraph two</p>
<p>**</p>
<p>Paragraph three</p>
<p>***</p>
<p>Paragraph four</p>
<ul>
  <li>foo</li>
  <li>***</li>
  <li>bar</li>
</ul>
~~~

## Page Breaks (`===`)

Markua does not specify how page breaks are mapped to HTML. A Markua Processor may do whatever it wants here.

{#paragraphs-html}
# Paragraphs and Blank Lines

View the [specification](#paragraphs).

##### Example P-1

This is the basic example of paragraphs.

###### Markua Document

{#input-p-1}
~~~
I'm paragraph one. Yay!

This is paragraph two. It's just that easy.

This is paragraph three.
~~~

###### HTML Output

{#output-p-1}
~~~
<p>I'm paragraph one. Yay!</p>
<p>This is paragraph two. It's just that easy.</p>
<p>This is paragraph three.</p>
~~~


## Code

{#code-html}
The syntax for code is described [here](#code).

### CSS Note

In source code, whitespace matters, so it must not get collapsed into a single space. However, browsers will typically collapse consecutive spaces when rendering `<code>` elements. To prevent this, it is recommended that the following CSS be used:

```
code {
  white-space: pre-wrap;
}
```


Markua only specifies how code which has a format of `text` is formatted. All other formats of code are unspecified, since the behaviour depends on whether the programming language is recognized by the Markua Processor, whether syntax highlighting is enabled, and on what type and version of syntax highlighting library (e.g. Pygments) is used.

#### Local Code Resources

###### Dependencies

This file must exist in the resources directory. The filename is given, followed by a colon, a newline and the file contents.

{#dependencies_local_code_figure_1}
~~~
hello.rb:
```
puts "hello"

puts "world"
```
~~~

###### Markua Document

{#input-local_code_figure_1}
~~~
Here's a paragraph before the figure.

{format: text}
![Hello World in Ruby](hello.rb)

Here's a paragraph after the figure.
~~~

###### HTML Output

{#output-local_code_figure_1}
~~~
<p>Here's a paragraph before the figure.</p>
<div class="figure">
  <pre><code>puts "hello"

puts "world"</code></pre>
  <p class="caption">Hello World in Ruby</p>
</div>
<p>Here's a paragraph after the figure.</p>
~~~

### Web Code Resources

###### Dependencies

This file exists on `http://markua.com` for test purposes.

{#dependencies_web_code_figure_1}
~~~
http://markua.com/helloworld.rb:
```
puts "hello"

puts "world"
```
~~~

###### Markua Document

{#input-web_code_figure_1}
~~~
Here's a paragraph before the figure.

{format: text}
![Hello World in Ruby](http://markua.com/helloworld.rb)

Here's a paragraph after the figure.
~~~

###### HTML Output

{#output-web_code_figure_1}
~~~
<p>Here's a paragraph before the figure.</p>
<div class="figure">
  <pre><code>puts "hello"

puts "world"</code></pre>
  <p class="caption">Hello World in Ruby</p>
</div>
<p>Here's a paragraph after the figure.</p>
~~~

### Inline Code Resources

##### Span Example

###### Markua Document

{#input-inline_code_span_1}
~~~
Hello in Ruby is a `puts "hello"` statement.
~~~

###### HTML Output

{#output-inline_code_span_1}
~~~
<p>Hello in Ruby is a <code>puts "hello"</code> statement.</p>
~~~

##### Figure Example 1

###### Markua Document

{#input-inline_code_figure_1}
~~~
Here's a paragraph before the figure.

{caption: "Hello World in Ruby"}
```text
puts "hello"

puts "world"
```

Here's a paragraph after the figure.
~~~

###### HTML Output

{#output-inline_code_figure_1}
~~~
<p>Here's a paragraph before the figure.</p>
<div class="figure">
  <pre><code>puts "hello"

puts "world"</code></pre>
  <p class="caption">Hello World in Ruby</p>
</div>
<p>Here's a paragraph after the figure.</p>
~~~

##### Figure Example 2

###### Markua Document

{#input-inline_code_figure_2}
```
Here's a paragraph before the figure.

{caption: "Hello World in Ruby"}
~~~
puts "hello"

puts "world"
~~~

Here's a paragraph after the figure.
```

###### HTML Output

{#output-inline_code_figure_2}
~~~
<p>Here's a paragraph before the figure.</p>
<div class="figure">
  <pre><code>puts "hello"

puts "world"</code></pre>
  <p class="caption">Hello World in Ruby</p>
</div>
<p>Here's a paragraph after the figure.</p>
~~~

## Code Blocks

View the [specification](#scene-breaks).

A [code fence](@) is a sequence
of at least three consecutive backtick characters (`` ` ``) or
tildes (`~`).  (Tildes and backticks cannot be mixed.)
A [fenced code block](@)
begins with a code fence, indented no more than three spaces.

The line with the opening code fence may optionally contain some text
following the code fence; this is trimmed of leading and trailing
whitespace and called the [info string](@). If the [info string] comes
after a backtick fence, it may not contain any backtick
characters.  (The reason for this restriction is that otherwise
some inline code would be incorrectly interpreted as the
beginning of a fenced code block.)

The content of the code block consists of all subsequent lines, until
a closing [code fence] of the same type as the code block
began with (backticks or tildes), and with at least as many backticks
or tildes as the opening code fence.  If the leading code fence is
indented N spaces, then up to N spaces of indentation are removed from
each line of the content (if present).  (If a content line is not
indented, it is preserved unchanged.  If it is indented less than N
spaces, all of the indentation is removed.)

The closing code fence may be indented up to three spaces, and may be
followed only by spaces, which are ignored.  If the end of the
containing block (or document) is reached and no closing code fence
has been found, the code block contains all of the lines after the
opening code fence until the end of the containing block (or
document).  (An alternative spec would require backtracking in the
event that a closing code fence is not found.  But this makes parsing
much less efficient, and there seems to be no real down side to the
behavior described here.)

A fenced code block may interrupt a paragraph, and does not require
a blank line either before or after.

The content of a code fence is treated as literal text, not parsed
as inlines.  The first word of the [info string] is typically used to
specify the language of the code sample, and rendered in the `class`
attribute of the `code` tag.  However, this spec does not mandate any
particular treatment of the [info string].

Here is a simple example with backticks:

```example
```
<
 >
```
.
<pre><code>&lt;
 &gt;
</code></pre>
```


With tildes:

```example
~~~
<
 >
~~~
.
<pre><code>&lt;
 &gt;
</code></pre>
```

Fewer than three backticks is not enough:

```example
``
foo
``
.
<p><code>foo</code></p>
```

The closing code fence must use the same character as the opening
fence:

```example
```
aaa
~~~
```
.
<pre><code>aaa
~~~
</code></pre>
```


```example
~~~
aaa
```
~~~
.
<pre><code>aaa
```
</code></pre>
```


The closing code fence must be at least as long as the opening fence:

```example
````
aaa
```
``````
.
<pre><code>aaa
```
</code></pre>
```


```example
~~~~
aaa
~~~
~~~~
.
<pre><code>aaa
~~~
</code></pre>
```


Unclosed code blocks are closed by the end of the document
(or the enclosing [block quote][block quotes] or [list item][list items]):

```example
```
.
<pre><code></code></pre>
```


```example
`````

```
aaa
.
<pre><code>
```
aaa
</code></pre>
```


```example
> ```
> aaa

bbb
.
<blockquote>
<pre><code>aaa
</code></pre>
</blockquote>
<p>bbb</p>
```


A code block can have all empty lines as its content:

```example
```


```
.
<pre><code>

</code></pre>
```


A code block can be empty:

```example
```
```
.
<pre><code></code></pre>
```


Fences can be indented.  If the opening fence is indented,
content lines will have equivalent opening indentation removed,
if present:

```example
 ```
 aaa
aaa
```
.
<pre><code>aaa
aaa
</code></pre>
```


```example
  ```
aaa
  aaa
aaa
  ```
.
<pre><code>aaa
aaa
aaa
</code></pre>
```


```example
   ```
   aaa
    aaa
  aaa
   ```
.
<pre><code>aaa
 aaa
aaa
</code></pre>
```


Four spaces indentation produces an indented code block:

```example
    ```
    aaa
    ```
.
<pre><code>```
aaa
```
</code></pre>
```


Closing fences may be indented by 0-3 spaces, and their indentation
need not match that of the opening fence:

```example
```
aaa
  ```
.
<pre><code>aaa
</code></pre>
```


```example
   ```
aaa
  ```
.
<pre><code>aaa
</code></pre>
```


This is not a closing fence, because it is indented 4 spaces:

```example
```
aaa
    ```
.
<pre><code>aaa
    ```
</code></pre>
```



Code fences (opening and closing) cannot contain internal spaces:

```example
``` ```
aaa
.
<p><code> </code>
aaa</p>
```


```example
~~~~~~
aaa
~~~ ~~
.
<pre><code>aaa
~~~ ~~
</code></pre>
```


Fenced code blocks can interrupt paragraphs, and can be followed
directly by paragraphs, without a blank line between:

```example
foo
```
bar
```
baz
.
<p>foo</p>
<pre><code>bar
</code></pre>
<p>baz</p>
```


Other blocks can also occur before and after fenced code blocks
without an intervening blank line:

```example
foo
---
~~~
bar
~~~
# baz
.
<h2>foo</h2>
<pre><code>bar
</code></pre>
<h1>baz</h1>
```


An [info string] can be provided after the opening code fence.
Although this spec doesn't mandate any particular treatment of
the info string, the first word is typically used to specify
the language of the code block. In HTML output, the language is
normally indicated by adding a class to the `code` element consisting
of `language-` followed by the language name.

```example
```ruby
def foo(x)
  return 3
end
```
.
<pre><code class="language-ruby">def foo(x)
  return 3
end
</code></pre>
```


```example
~~~~    ruby startline=3 $%@#$
def foo(x)
  return 3
end
~~~~~~~
.
<pre><code class="language-ruby">def foo(x)
  return 3
end
</code></pre>
```


```example
````;
````
.
<pre><code class="language-;"></code></pre>
```


[Info strings] for backtick code blocks cannot contain backticks:

```example
``` aa ```
foo
.
<p><code>aa</code>
foo</p>
```


[Info strings] for tilde code blocks can contain backticks and tildes:

```example
~~~ aa ``` ~~~
foo
~~~
.
<pre><code class="language-aa">foo
</code></pre>
```


Closing code fences cannot have [info strings]:

```example
```
``` aaa
```
.
<pre><code>``` aaa
</code></pre>
```

# Paragraphs

A sequence of non-blank lines that cannot be interpreted as other
kinds of blocks forms a [paragraph](@).
The contents of the paragraph are the result of parsing the
paragraph's raw content as inlines.  The paragraph's raw content
is formed by concatenating the lines and removing initial and final
[whitespace].

A simple example with two paragraphs:

```example
aaa

bbb
.
<p>aaa</p>
<p>bbb</p>
```


Paragraphs can contain multiple lines, but no blank lines:

```example
aaa
bbb

ccc
ddd
.
<p>aaa
bbb</p>
<p>ccc
ddd</p>
```


Multiple blank lines between paragraph have no effect:

```example
aaa


bbb
.
<p>aaa</p>
<p>bbb</p>
```


Leading spaces are skipped:

```example
  aaa
 bbb
.
<p>aaa
bbb</p>
```


Lines after the first may be indented any amount, since indented
code blocks cannot interrupt paragraphs.

```example
aaa
             bbb
                                       ccc
.
<p>aaa
bbb
ccc</p>
```


However, the first line may be indented at most three spaces,
or an indented code block will be triggered:

```example
   aaa
bbb
.
<p>aaa
bbb</p>
```


```example
    aaa
bbb
.
<pre><code>aaa
</code></pre>
<p>bbb</p>
```

## Blank Lines

[Blank lines] between block-level elements are ignored, except for the role they play in determining whether a [list] is [tight] or [loose].

Blank lines at the beginning and end of the document are also ignored.

##### Example BL-1

###### Markua Document

{#input-bl-1}
~~~


aaa


# aaa


~~~

###### HTML Output

{#output-bl-1}
~~~
<p>aaa</p>
<h1>aaa</h1>
~~~

##### Example BL-2

###### Markua Document

{#input-bl-2}
~~~
I'm paragraph one. Yay!

This is paragraph two.

This is paragraph three.
~~~

###### HTML Output

{#output-bl-2}
~~~
<p>I'm paragraph one. Yay!</p>
<p>This is paragraph two.</p>
<p>This is paragraph three.</p>
~~~

## Poetry

TODO

##### Example 1: Using three tildes

###### Markua Document

{#input-typewriter_poetry_1}
```
Here's a paragraph before the poetry.

{caption: "lazy cat"}
~~~
i
  am
      a        cat
            a        l a z y          cat

me   ow
~~~

Here's a paragraph after the poetry.
```

###### HTML Output

Typewriter poetry is output with the `<pre><code>` combination, just like any other inline code resource with a format of `text`. It is up to a book designer to use CSS to style the poetry accordingly.

{#output-typewriter_poetry_1}
~~~
<p>Here's a paragraph before the poetry.</p>
<div class="figure">
  <pre><code>i
  am
      a        cat
            a        l a z y          cat

me   ow</code></pre>
  <p class="caption">lazy cat</p>
</div>
<p>Here's a paragraph after the poetry.</p>
~~~

##### Example 2: Using three backticks plus the `text` format via syntactic sugar

###### Markua Document

{#input-typewriter_poetry_2}
~~~
Here's a paragraph before the poetry.

{caption: "lazy cat"}
```text
i
  am
      a        cat
            a        l a z y          cat

me   ow
```

Here's a paragraph after the poetry.
~~~

###### HTML Output

{#output-typewriter_poetry_2}
~~~
<p>Here's a paragraph before the poetry.</p>
<div class="figure">
  <pre><code>i
  am
      a        cat
            a        l a z y          cat

me   ow</code></pre>
  <p class="caption">lazy cat</p>
</div>
<p>Here's a paragraph after the poetry.</p>
~~~

##### Example 3: Using three backticks plus the `text` format specified in an attribute list

###### Markua Document

{#input-typewriter_poetry_3}
~~~
Here's a paragraph before the poetry.

{caption: "lazy cat", format: text}
```
i
  am
      a        cat
            a        l a z y          cat

me   ow
```

Here's a paragraph after the poetry.
~~~

###### HTML Output

{#output-typewriter_poetry_3}
~~~
<p>Here's a paragraph before the poetry.</p>
<div class="figure">
  <pre><code>i
  am
      a        cat
            a        l a z y          cat

me   ow</code></pre>
  <p class="caption">lazy cat</p>
</div>
<p>Here's a paragraph after the poetry.</p>
~~~

# Container blocks

A [container block](#container-blocks) is a block that has other blocks as its contents.  There are two basic kinds of container blocks:
[block quotes] and [list items].
[Lists] are meta-containers for [list items].

We define the syntax for container blocks recursively.  The general
form of the definition is:

> If X is a sequence of blocks, then the result of
> transforming X in such-and-such a way is a container of type Y
> with these blocks as its content.

So, we explain what counts as a block quote or list item by explaining
how these can be *generated* from their contents. This should suffice
to define the syntax, although it does not give a recipe for *parsing*
these constructions.  (A recipe is provided below in the section entitled
[A parsing strategy](#appendix-a-parsing-strategy).)

## Block quotes

A [block quote marker](@)
consists of 0-3 spaces of initial indent, plus (a) the character `>` together
with a following space, or (b) a single character `>` not followed by a space.

The following rules define [block quotes]:

1.  **Basic case.**  If a string of lines *Ls* constitute a sequence
    of blocks *Bs*, then the result of prepending a [block quote
    marker] to the beginning of each line in *Ls*
    is a [block quote](#block-quotes) containing *Bs*.

2.  **Laziness.**  If a string of lines *Ls* constitute a [block
    quote](#block-quotes) with contents *Bs*, then the result of deleting
    the initial [block quote marker] from one or
    more lines in which the next [non-whitespace character] after the [block
    quote marker] is [paragraph continuation
    text] is a block quote with *Bs* as its content.
    [Paragraph continuation text](@) is text
    that will be parsed as part of the content of a paragraph, but does
    not occur at the beginning of the paragraph.

3.  **Consecutiveness.**  A document cannot contain two [block
    quotes] in a row unless there is a [blank line] between them.

Nothing else counts as a [block quote](#block-quotes).

Here is a simple example:

```example
> # Foo
> bar
> baz
.
<blockquote>
<h1>Foo</h1>
<p>bar
baz</p>
</blockquote>
```


The spaces after the `>` characters can be omitted:

```example
># Foo
>bar
> baz
.
<blockquote>
<h1>Foo</h1>
<p>bar
baz</p>
</blockquote>
```


The `>` characters can be indented 1-3 spaces:

```example
   > # Foo
   > bar
 > baz
.
<blockquote>
<h1>Foo</h1>
<p>bar
baz</p>
</blockquote>
```


Four spaces gives us a code block:

```example
    > # Foo
    > bar
    > baz
.
<pre><code>&gt; # Foo
&gt; bar
&gt; baz
</code></pre>
```


The Laziness clause allows us to omit the `>` before
[paragraph continuation text]:

```example
> # Foo
> bar
baz
.
<blockquote>
<h1>Foo</h1>
<p>bar
baz</p>
</blockquote>
```


A block quote can contain some lazy and some non-lazy
continuation lines:

```example
> bar
baz
> foo
.
<blockquote>
<p>bar
baz
foo</p>
</blockquote>
```


Laziness only applies to lines that would have been continuations of
paragraphs had they been prepended with [block quote markers].
For example, the `> ` cannot be omitted in the second line of

```
> foo
> ---
```

without changing the meaning:

```example
> foo
---
.
<blockquote>
<p>foo</p>
</blockquote>
<hr />
```


Similarly, if we omit the `> ` in the second line of

```
> - foo
> - bar
```

then the block quote ends after the first line:

```example
> - foo
- bar
.
<blockquote>
<ul>
<li>foo</li>
</ul>
</blockquote>
<ul>
<li>bar</li>
</ul>
```


For the same reason, we can't omit the `> ` in front of
subsequent lines of an indented or fenced code block:

```example
>     foo
    bar
.
<blockquote>
<pre><code>foo
</code></pre>
</blockquote>
<pre><code>bar
</code></pre>
```


```example
> ```
foo
```
.
<blockquote>
<pre><code></code></pre>
</blockquote>
<p>foo</p>
<pre><code></code></pre>
```


Note that in the following case, we have a [lazy
continuation line]:

```example
> foo
    - bar
.
<blockquote>
<p>foo
- bar</p>
</blockquote>
```


To see why, note that in

```markdown
> foo
>     - bar
```

the `- bar` is indented too far to start a list, and can't
be an indented code block because indented code blocks cannot
interrupt paragraphs, so it is [paragraph continuation text].

A block quote can be empty:

```example
>
.
<blockquote>
</blockquote>
```


```example
>
>
>
.
<blockquote>
</blockquote>
```


A block quote can have initial or final blank lines:

```example
>
> foo
>
.
<blockquote>
<p>foo</p>
</blockquote>
```


A blank line always separates block quotes:

```example
> foo

> bar
.
<blockquote>
<p>foo</p>
</blockquote>
<blockquote>
<p>bar</p>
</blockquote>
```


(Most current Markdown implementations, including John Gruber's
original `Markdown.pl`, will parse this example as a single block quote
with two paragraphs.  But it seems better to allow the author to decide
whether two block quotes or one are wanted.)

Consecutiveness means that if we put these block quotes together,
we get a single block quote:

```example
> foo
> bar
.
<blockquote>
<p>foo
bar</p>
</blockquote>
```


To get a block quote with two paragraphs, use:

```example
> foo
>
> bar
.
<blockquote>
<p>foo</p>
<p>bar</p>
</blockquote>
```


Block quotes can interrupt paragraphs:

```example
foo
> bar
.
<p>foo</p>
<blockquote>
<p>bar</p>
</blockquote>
```


In general, blank lines are not needed before or after block
quotes:

```example
> aaa
***
> bbb
.
<blockquote>
<p>aaa</p>
</blockquote>
<hr />
<blockquote>
<p>bbb</p>
</blockquote>
```


However, because of laziness, a blank line is needed between
a block quote and a following paragraph:

```example
> bar
baz
.
<blockquote>
<p>bar
baz</p>
</blockquote>
```


```example
> bar

baz
.
<blockquote>
<p>bar</p>
</blockquote>
<p>baz</p>
```


```example
> bar
>
baz
.
<blockquote>
<p>bar</p>
</blockquote>
<p>baz</p>
```


It is a consequence of the Laziness rule that any number
of initial `>`s may be omitted on a continuation line of a
nested block quote:

```example
> > > foo
bar
.
<blockquote>
<blockquote>
<blockquote>
<p>foo
bar</p>
</blockquote>
</blockquote>
</blockquote>
```


```example
>>> foo
> bar
>>baz
.
<blockquote>
<blockquote>
<blockquote>
<p>foo
bar
baz</p>
</blockquote>
</blockquote>
</blockquote>
```


When including an indented code block in a block quote,
remember that the [block quote marker] includes
both the `>` and a following space.  So *five spaces* are needed after
the `>`:

```example
>     code

>    not code
.
<blockquote>
<pre><code>code
</code></pre>
</blockquote>
<blockquote>
<p>not code</p>
</blockquote>
```



## List items

A [list marker](@) is a
[bullet list marker] or an [ordered list marker].

A [bullet list marker](@)
is a `-`, `+`, or `*` character.

An [ordered list marker](@)
is a sequence of 1--9 arabic digits (`0-9`), followed by either a
`.` character or a `)` character.  (The reason for the length
limit is that with 10 digits we start seeing integer overflows
in some browsers.)

The following rules define [list items]:

1.  **Basic case.**  If a sequence of lines *Ls* constitute a sequence of
    blocks *Bs* starting with a [non-whitespace character], and *M* is a
    list marker of width *W* followed by 1 ≤ *N* ≤ 4 spaces, then the result
    of prepending *M* and the following spaces to the first line of
    *Ls*, and indenting subsequent lines of *Ls* by *W + N* spaces, is a
    list item with *Bs* as its contents.  The type of the list item
    (bullet or ordered) is determined by the type of its list marker.
    If the list item is ordered, then it is also assigned a start
    number, based on the ordered list marker.

    Exceptions:

    1. When the first list item in a [list] interrupts
       a paragraph---that is, when it starts on a line that would
       otherwise count as [paragraph continuation text]---then (a)
       the lines *Ls* must not begin with a blank line, and (b) if
       the list item is ordered, the start number must be 1.
    2. If any line is a [thematic break][thematic breaks] then
       that line is not a list item.

For example, let *Ls* be the lines

```example
A paragraph
with two lines.

    indented code

> A block quote.
.
<p>A paragraph
with two lines.</p>
<pre><code>indented code
</code></pre>
<blockquote>
<p>A block quote.</p>
</blockquote>
```


And let *M* be the marker `1.`, and *N* = 2.  Then rule #1 says
that the following is an ordered list item with start number 1,
and the same contents as *Ls*:

```example
1.  A paragraph
    with two lines.

        indented code

    > A block quote.
.
<ol>
<li>
<p>A paragraph
with two lines.</p>
<pre><code>indented code
</code></pre>
<blockquote>
<p>A block quote.</p>
</blockquote>
</li>
</ol>
```


The most important thing to notice is that the position of
the text after the list marker determines how much indentation
is needed in subsequent blocks in the list item.  If the list
marker takes up two spaces, and there are three spaces between
the list marker and the next [non-whitespace character], then blocks
must be indented five spaces in order to fall under the list
item.

Here are some examples showing how far content must be indented to be
put under the list item:

```example
- one

 two
.
<ul>
<li>one</li>
</ul>
<p>two</p>
```


```example
- one

  two
.
<ul>
<li>
<p>one</p>
<p>two</p>
</li>
</ul>
```


```example
 -    one

     two
.
<ul>
<li>one</li>
</ul>
<pre><code> two
</code></pre>
```


```example
 -    one

      two
.
<ul>
<li>
<p>one</p>
<p>two</p>
</li>
</ul>
```


It is tempting to think of this in terms of columns:  the continuation
blocks must be indented at least to the column of the first
[non-whitespace character] after the list marker. However, that is not quite right.
The spaces after the list marker determine how much relative indentation
is needed.  Which column this indentation reaches will depend on
how the list item is embedded in other constructions, as shown by
this example:

```example
   > > 1.  one
>>
>>     two
.
<blockquote>
<blockquote>
<ol>
<li>
<p>one</p>
<p>two</p>
</li>
</ol>
</blockquote>
</blockquote>
```


Here `two` occurs in the same column as the list marker `1.`,
but is actually contained in the list item, because there is
sufficient indentation after the last containing blockquote marker.

The converse is also possible.  In the following example, the word `two`
occurs far to the right of the initial text of the list item, `one`, but
it is not considered part of the list item, because it is not indented
far enough past the blockquote marker:

```example
>>- one
>>
  >  > two
.
<blockquote>
<blockquote>
<ul>
<li>one</li>
</ul>
<p>two</p>
</blockquote>
</blockquote>
```


Note that at least one space is needed between the list marker and
any following content, so these are not list items:

```example
-one

2.two
.
<p>-one</p>
<p>2.two</p>
```


A list item may contain blocks that are separated by more than
one blank line.

```example
- foo


  bar
.
<ul>
<li>
<p>foo</p>
<p>bar</p>
</li>
</ul>
```


A list item may contain any kind of block:

```example
1.  foo

    ```
    bar
    ```

    baz

    > bam
.
<ol>
<li>
<p>foo</p>
<pre><code>bar
</code></pre>
<p>baz</p>
<blockquote>
<p>bam</p>
</blockquote>
</li>
</ol>
```


A list item that contains an indented code block will preserve
empty lines within the code block verbatim.

```example
- Foo

      bar


      baz
.
<ul>
<li>
<p>Foo</p>
<pre><code>bar


baz
</code></pre>
</li>
</ul>
```

Note that ordered list start numbers must be nine digits or less:

```example
123456789. ok
.
<ol start="123456789">
<li>ok</li>
</ol>
```


```example
1234567890. not ok
.
<p>1234567890. not ok</p>
```


A start number may begin with 0s:

```example
0. ok
.
<ol start="0">
<li>ok</li>
</ol>
```


```example
003. ok
.
<ol start="3">
<li>ok</li>
</ol>
```


A start number may not be negative:

```example
-1. not ok
.
<p>-1. not ok</p>
```



2.  **Item starting with indented code.**  If a sequence of lines *Ls*
    constitute a sequence of blocks *Bs* starting with an indented code
    block, and *M* is a list marker of width *W* followed by
    one space, then the result of prepending *M* and the following
    space to the first line of *Ls*, and indenting subsequent lines of
    *Ls* by *W + 1* spaces, is a list item with *Bs* as its contents.
    If a line is empty, then it need not be indented.  The type of the
    list item (bullet or ordered) is determined by the type of its list
    marker.  If the list item is ordered, then it is also assigned a
    start number, based on the ordered list marker.

An indented code block will have to be indented four spaces beyond
the edge of the region where text will be included in the list item.
In the following case that is 6 spaces:

```example
- foo

      bar
.
<ul>
<li>
<p>foo</p>
<pre><code>bar
</code></pre>
</li>
</ul>
```


And in this case it is 11 spaces:

```example
  10.  foo

           bar
.
<ol start="10">
<li>
<p>foo</p>
<pre><code>bar
</code></pre>
</li>
</ol>
```


If the *first* block in the list item is an indented code block,
then by rule #2, the contents must be indented *one* space after the
list marker:

```example
    indented code

paragraph

    more code
.
<pre><code>indented code
</code></pre>
<p>paragraph</p>
<pre><code>more code
</code></pre>
```


```example
1.     indented code

   paragraph

       more code
.
<ol>
<li>
<pre><code>indented code
</code></pre>
<p>paragraph</p>
<pre><code>more code
</code></pre>
</li>
</ol>
```


Note that an additional space indent is interpreted as space
inside the code block:

```example
1.      indented code

   paragraph

       more code
.
<ol>
<li>
<pre><code> indented code
</code></pre>
<p>paragraph</p>
<pre><code>more code
</code></pre>
</li>
</ol>
```


Note that rules #1 and #2 only apply to two cases:  (a) cases
in which the lines to be included in a list item begin with a
[non-whitespace character], and (b) cases in which
they begin with an indented code
block.  In a case like the following, where the first block begins with
a three-space indent, the rules do not allow us to form a list item by
indenting the whole thing and prepending a list marker:

```example
   foo

bar
.
<p>foo</p>
<p>bar</p>
```


```example
-    foo

  bar
.
<ul>
<li>foo</li>
</ul>
<p>bar</p>
```


This is not a significant restriction, because when a block begins
with 1-3 spaces indent, the indentation can always be removed without
a change in interpretation, allowing rule #1 to be applied.  So, in
the above case:

```example
-  foo

   bar
.
<ul>
<li>
<p>foo</p>
<p>bar</p>
</li>
</ul>
```


3.  **Item starting with a blank line.**  If a sequence of lines *Ls*
    starting with a single [blank line] constitute a (possibly empty)
    sequence of blocks *Bs*, not separated from each other by more than
    one blank line, and *M* is a list marker of width *W*,
    then the result of prepending *M* to the first line of *Ls*, and
    indenting subsequent lines of *Ls* by *W + 1* spaces, is a list
    item with *Bs* as its contents.
    If a line is empty, then it need not be indented.  The type of the
    list item (bullet or ordered) is determined by the type of its list
    marker.  If the list item is ordered, then it is also assigned a
    start number, based on the ordered list marker.

Here are some list items that start with a blank line but are not empty:

```example
-
  foo
-
  ```
  bar
  ```
-
      baz
.
<ul>
<li>foo</li>
<li>
<pre><code>bar
</code></pre>
</li>
<li>
<pre><code>baz
</code></pre>
</li>
</ul>
```

When the list item starts with a blank line, the number of spaces
following the list marker doesn't change the required indentation:

```example
-
  foo
.
<ul>
<li>foo</li>
</ul>
```


A list item can begin with at most one blank line.
In the following example, `foo` is not part of the list
item:

```example
-

  foo
.
<ul>
<li></li>
</ul>
<p>foo</p>
```


Here is an empty bullet list item:

```example
- foo
-
- bar
.
<ul>
<li>foo</li>
<li></li>
<li>bar</li>
</ul>
```


It does not matter whether there are spaces following the [list marker]:

```example
- foo
-
- bar
.
<ul>
<li>foo</li>
<li></li>
<li>bar</li>
</ul>
```


Here is an empty ordered list item:

```example
1. foo
2.
3. bar
.
<ol>
<li>foo</li>
<li></li>
<li>bar</li>
</ol>
```


A list may start or end with an empty list item:

```example
*
.
<ul>
<li></li>
</ul>
```

However, an empty list item cannot interrupt a paragraph:

```example
foo
*

foo
1.
.
<p>foo
*</p>
<p>foo
1.</p>
```


4.  **Indentation.**  If a sequence of lines *Ls* constitutes a list item
    according to rule #1, #2, or #3, then the result of indenting each line
    of *Ls* by 1-3 spaces (the same for each line) also constitutes a
    list item with the same contents and attributes.  If a line is
    empty, then it need not be indented.

Indented one space:

```example
 1.  A paragraph
     with two lines.

         indented code

     > A block quote.
.
<ol>
<li>
<p>A paragraph
with two lines.</p>
<pre><code>indented code
</code></pre>
<blockquote>
<p>A block quote.</p>
</blockquote>
</li>
</ol>
```


Indented two spaces:

```example
  1.  A paragraph
      with two lines.

          indented code

      > A block quote.
.
<ol>
<li>
<p>A paragraph
with two lines.</p>
<pre><code>indented code
</code></pre>
<blockquote>
<p>A block quote.</p>
</blockquote>
</li>
</ol>
```


Indented three spaces:

```example
   1.  A paragraph
       with two lines.

           indented code

       > A block quote.
.
<ol>
<li>
<p>A paragraph
with two lines.</p>
<pre><code>indented code
</code></pre>
<blockquote>
<p>A block quote.</p>
</blockquote>
</li>
</ol>
```


Four spaces indent gives a code block:

```example
    1.  A paragraph
        with two lines.

            indented code

        > A block quote.
.
<pre><code>1.  A paragraph
    with two lines.

        indented code

    &gt; A block quote.
</code></pre>
```



5.  **Laziness.**  If a string of lines *Ls* constitute a [list
    item](#list-items) with contents *Bs*, then the result of deleting
    some or all of the indentation from one or more lines in which the
    next [non-whitespace character] after the indentation is
    [paragraph continuation text] is a
    list item with the same contents and attributes.  The unindented
    lines are called
    [lazy continuation line](@)s.

Here is an example with [lazy continuation lines]:

```example
  1.  A paragraph
with two lines.

          indented code

      > A block quote.
.
<ol>
<li>
<p>A paragraph
with two lines.</p>
<pre><code>indented code
</code></pre>
<blockquote>
<p>A block quote.</p>
</blockquote>
</li>
</ol>
```


Indentation can be partially deleted:

```example
  1.  A paragraph
    with two lines.
.
<ol>
<li>A paragraph
with two lines.</li>
</ol>
```


These examples show how laziness can work in nested structures:

```example
> 1. > Blockquote
continued here.
.
<blockquote>
<ol>
<li>
<blockquote>
<p>Blockquote
continued here.</p>
</blockquote>
</li>
</ol>
</blockquote>
```


```example
> 1. > Blockquote
> continued here.
.
<blockquote>
<ol>
<li>
<blockquote>
<p>Blockquote
continued here.</p>
</blockquote>
</li>
</ol>
</blockquote>
```



6.  **That's all.** Nothing that is not counted as a list item by rules
    #1--5 counts as a [list item](#list-items).

The rules for sublists follow from the general rules
[above][List items].  A sublist must be indented the same number
of spaces a paragraph would need to be in order to be included
in the list item.

So, in this case we need two spaces indent:

```example
- foo
  - bar
    - baz
      - boo
.
<ul>
<li>foo
<ul>
<li>bar
<ul>
<li>baz
<ul>
<li>boo</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
```


One is not enough:

```example
- foo
 - bar
  - baz
   - boo
.
<ul>
<li>foo</li>
<li>bar</li>
<li>baz</li>
<li>boo</li>
</ul>
```


Here we need four, because the list marker is wider:

```example
10) foo
    - bar
.
<ol start="10">
<li>foo
<ul>
<li>bar</li>
</ul>
</li>
</ol>
```


Three is not enough:

```example
10) foo
   - bar
.
<ol start="10">
<li>foo</li>
</ol>
<ul>
<li>bar</li>
</ul>
```


A list may be the first block in a list item:

```example
- - foo
.
<ul>
<li>
<ul>
<li>foo</li>
</ul>
</li>
</ul>
```


```example
1. - 2. foo
.
<ol>
<li>
<ul>
<li>
<ol start="2">
<li>foo</li>
</ol>
</li>
</ul>
</li>
</ol>
```

# Lists

TODO

## Bulleted Lists

TODO


##### Example

###### Markua Document

{#input-unordered_list_1}
~~~
lorem

* foo
* bar
* baz

ipsum

*  foo
*  bar
*  baz

dolor

*   foo
*   bar
*   baz

sit

*    foo
*    bar
*    baz

amet

- foo
- bar
- baz

lorem

* foo

ipsum

- foo

dolor
~~~

###### HTML Output

{#output-unordered_list_1}
~~~
<p>lorem</p>
<ul>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>ipsum</p>
<ul>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>dolor</p>
<ul>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>sit</p>
<ul>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>amet</p>
<ul class="hyphen">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ul>
<p>lorem</p>
<ul>
  <li>foo</li>
</ul>
<p>ipsum</p>
<ul class="hyphen">
  <li>foo</li>
</ul>
<p>dolor</p>
~~~

### Not Lists

##### Example

###### Markua Document

{#input-not_lists_1}
~~~
lorem

+ foo
+ bar
+ baz

ipsum

+ foo

dolor

*    foo
*   bar
*  baz

sit
~~~

###### HTML Output

{#output-not_lists_1}
~~~
<p>lorem</p>
<p>+ foo</p>
<p>+ bar</p>
<p>+ baz</p>
<p>ipsum</p>
<p>+ foo</p>
<p>dolor</p>
<p>*    foo<br/>
*   bar<br/>
*  baz</p>
<p>sit</p>
~~~

### Numbered Lists

TODO

### Simple Lists

TODO

### Flat Lists

TODO

### Complex Lists

TODO

### TODO - Incorporate into above sections

#### Example 1: Decimal Numbers

##### Example

###### Markua Document

{#input-ordered_lists_1}
~~~
lorem

1. foo
2. bar
3. baz

ipsum

9. foo
10. bar
11. baz

dolor

3. foo
2. bar
1. baz

sit

11. foo
10. bar
9. baz

amet

1. one
1. two
1. three

etc.
~~~

###### HTML Output

{#output-ordered_lists_1}
~~~
<p>lorem</p>
<ol>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
<ol start="9">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>dolor</p>
<ol start="3" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>sit</p>
<ol start="11" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>amet</p>
<ol>
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>etc.</p>
~~~

#### Example 2: Uppercase Letters

##### Example

###### Markua Document

{#input-ordered_lists_2}
~~~
lorem

A. foo
B. bar
C. baz

ipsum

I. foo
J. bar
K. baz

dolor

C. foo
B. bar
A. baz

sit

K. foo
J. bar
I. baz

amet

A. foo
A. bar
A. baz

etc.
~~~

###### HTML Output

{#output-ordered_lists_2}
~~~
<p>lorem</p>
<ol type="A">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
<ol type="A" start="9">
<ol start="9">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>dolor</p>
<ol type="A" start="3" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>sit</p>
<ol type="A" start="11" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>amet</p>
<ol type="A">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>etc.</p>
~~~

#### Example 3: Lowercase Letters

##### Example

###### Markua Document

{#input-ordered_lists_3}
~~~
lorem

a. foo
b. bar
c. baz

ipsum

i. foo
j. bar
k. baz

dolor

c. foo
b. bar
a. baz

sit

k. foo
j. bar
i. baz

amet

a. foo
a. bar
a. baz

etc.
~~~

###### HTML Output

{#output-ordered_lists_3}
~~~
<p>lorem</p>
<ol type="a">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
<ol type="a" start="9">
<ol start="9">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>dolor</p>
<ol type="a" start="3" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>sit</p>
<ol type="a" start="11" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>amet</p>
<ol type="a">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>etc.</p>
~~~

##### Example 4: Uppercase Roman Numerals

###### Markua Document

{#input-ordered_lists_4}
~~~
lorem

I. foo
II. bar
III. baz

ipsum

IX. foo
X. bar
XI. baz

dolor

III. foo
II. bar
I. baz

sit

XI. foo
X. bar
IX. baz

amet

I. foo
I. bar
I. baz

etc.
~~~

###### HTML Output

{#output-ordered_lists_4}
~~~
<p>lorem</p>
<ol type="I">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
<ol type="I" start="9">
<ol start="9">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>dolor</p>
<ol type="I" start="3" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>sit</p>
<ol type="I" start="11" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>amet</p>
<ol type="I">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>etc.</p>
~~~

##### Example 5: Lowercase Roman Numerals

###### Markua Document

{#input-ordered_lists_5}
~~~
lorem

i. foo
ii. bar
iii. baz

ipsum

ix. foo
x. bar
xi. baz

dolor

iii. foo
ii. bar
i. baz

sit

xi. foo
x. bar
ix. baz

amet

i. foo
i. bar
i. baz

etc.
~~~

###### HTML Output

{#output-ordered_lists_5}
~~~
<p>lorem</p>
<ol type="i">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>ipsum</p>
<ol type="i" start="9">
<ol start="9">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>dolor</p>
<ol type="i" start="3" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>sit</p>
<ol type="i" start="11" reversed="true">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>amet</p>
<ol type="i">
  <li>foo</li>
  <li>bar</li>
  <li>baz</li>
</ol>
<p>etc.</p>
~~~

##### Example 6: In Markua, A Single Element Ordered List is Not a List

###### Markua Document

{#input-ordered_lists_6}
~~~
foo

1. This isn't a list.

bar

1975. Also, not a list.

lorem

a. This isn't a list either.

ipsum

A. This isn't a list either.

dolor

i. This isn't a list either.

sit

I. This isn't a list either.

amet
~~~

###### HTML Output

{#output-ordered_lists_6}
~~~
<p>foo</p>
<p>1. This isn't a list.</p>
<p>bar</p>
<p>1975. Also, not a list.</p>
<p>lorem</p>
<p>a. This isn't a list either.</p>
<p>ipsum</p>
<p>A. This isn't a list either.</p>
<p>dolor
<p>i. This isn't a list either.</p>
<p>sit</p>
<p>I. This isn't a list either.</p>
<p>amet</p>
~~~

##### Example 7: Ordered List Numbering Rules

###### Markua Document

{#input-ordered_lists_7}
~~~
This makes an ordered list with decimal numbers (1, 2, 3):

1. one
1. two
1. three

This does not make a list, since the numbers are not all consecutive:

1. foo
2. bar
4. baz

This makes a list (1975, 1976):

1975. An amazing year.
1976. The year after 1975.

This does not make a list:

1975\. An amazing year.
1976\. The year after 1975.

This does not make a list:

1975. An amazing year.
2010. The year Leanpub was launched.

This makes a lowercase alphabetical ordered list (a, b):

a. one
b. two

This makes a lowercase alphabetical ordered list (e, f):

e. five
f. six

This makes a lowercase alphabetical ordered list (i, ii, iii, iv):

i. one
ii. two
iii. three
iv. four

Not a list:

i. one
ii. two
iv. four

Not a list:

a\. one
b\. two

Not a list:

a. one
c. three

That's it!
~~~

###### HTML Output

{#output-ordered_lists_7}
~~~
<p>This makes an ordered list with decimal numbers:</p>
<ol>
  <li>one</li>
  <li>two</li>
  <li>three</li>
</ol>
<p>This does not make a list, since the numbers are not all consecutive:</p>
<p>1. foo<br/>
2. bar<br/>
4. baz</p>
<p>This makes a list (1975, 1976):</p>
<ol start="1975">
  <li>An amazing year.</li>
  <li>The year after 1975.</li>
</ol>
<p>This does not make a list:</p>
<p>1975. An amazing year.<br/>
1976. The year after 1975.</p>
<p>This does not make a list:</p>
<p>1975. An amazing year.<br/>
2010. The year Leanpub was launched.</p>
<p>This makes a lowercase alphabetical ordered list (a, b):</p>
<ol type="a">
  <li>one</li>
  <li>two</li>
</ol>
<p>This makes a lowercase alphabetical ordered list (e, f):</p>
<ol type="a" start="5">
  <li>five</li>
  <li>six</li>
</ol>
<p>This makes a lowercase alphabetical ordered list (i, ii, iii, iv):</p>
<ol type="i">
  <li>one</li>
  <li>two</li>
  <li>three</li>
  <li>four</li>
</ol>
<p>Not a list:</p>
<p>i. one<br/>
ii. two<br/>
iv. four</p>
<p>Not a list:</p>
<p>a\. one<br/>
b\. two</p>
<p>Not a list:</p>
<p>a. one<br/>
c. three</p>
<p>That's it!</p>
~~~

### Multi-Paragraph List Items

##### Example

###### Markua Document

{#input-multi_para_lists_1}
~~~
Here's a paragraph before the list.

1.  This is the first paragraph in the first list item. Yay!

    This is a second paragraph in the first list item.

2.  The second list item is simple.

3.  The third list item has three paragraphs.
    This is still part of the first paragraph.

    Here's the second paragraph in the third list item.

    Here's the third paragraph in the third list item.

Here's a paragraph after the list.
~~~

###### HTML Output

{#output-multi_para_lists_1}
~~~
<p>Here's a paragraph before the list.</p>
<ol>
  <li>
    <p>This is the first paragraph in the first list item. Yay!</p>
    <p>This is a second paragraph in the first list item.</p>
  </li>
  <li>The second list item is simple.</li>
  <li>
    <p>The third list item has three paragraphs.<br/>
    This is still part of the first paragraph.</p>
    <p>Here's the second paragraph in the third list item.</p>
    <p>Here's the third paragraph in the third list item.</p>
  </li>
</ol>
<p>Here's a paragraph after the list.</p>
~~~


### Nested Lists

##### Example

###### Markua Document

{#input-nested_lists_1}
~~~
* Foo
  1. One
  2. Two
    a. This is 2a
    b. This is 2b
  3. Three
* Bar
  i.   Lorem
  ii.  Ipsum
  iii. Dolor
* Baz
~~~

###### HTML Output

{#output-nested_lists_1}
~~~
<ul>
  <li>
    Foo
    <ol>
      <li>One</li>
      <li>
        Two
        <ol type="a">
          <li>This is 2a</li>
          <li>This is 2b</li>
        </ol>
      </li>
      <li>Three</li>
    </ol>
  </li>
  <li>
    Bar
    <ol type="i">
      <li>Lorem</li>
      <li>Ispum</li>
      <li>Dolor</li>
    </ol>
  </li>
  <li>Baz</li>
</ul>
~~~

### Nesting Block Elements in List Items

#### Single-Paragraph List Items

##### Example

###### Markua Document

{#input-spli_1}
~~~
* Foo
  {caption: "Hello World in Ruby"}
  ```text
  puts "hello"
  ```
* Bar
* Baz
~~~

###### HTML Output

{#output-spli_1}
~~~
<ul>
  <li>
    <p>Foo<br/>
      <div class="figure">
        <pre><code>puts "hello"</code></pre>
        <p class="caption">Hello World in Ruby</p>
      </div>
    </p>
  </li>
  <li>Bar</li>
  <li>Baz</li>
</ul>
~~~

#### Multiple-Paragraph List Items

##### Example

###### Markua Document

{#input-mpli_1}
~~~
* This is paragraph 1 in the first list item.

  ```text
  puts "hello"
  ```

  This is paragraph 2 in the first list item.

* This is paragraph 1 in the second list item.

  ![A Piece of Cake](cake.jpg)

  This is paragraph 2 in the second list item.

* Baz
~~~

###### HTML Output

{#output-mpli_1}
~~~
<ul>
  <li>
    <p>This is paragraph 1 in the first list item.</p>
    <div class="figure">
      <pre><code>puts "hello"</code></pre>
    </div>
    <p>This is paragraph 2 in the first list item.</p>
  </li>
  <li>
    <p>This is paragraph 1 in the second list item.</p>
    <div class="figure">
      <img src="cake.jpg"/>
      <p class="caption">A Piece of Cake</p>
    </div>
    <p>This is paragraph 2 in the second list item.</p>
  </li>
  <li>Baz</li>
</ul>
~~~

## Lists

A [list](@) is a sequence of one or more
list items [of the same type].  The list items
may be separated by any number of blank lines.

Two list items are [of the same type](@)
if they begin with a [list marker] of the same type.
Two list markers are of the
same type if (a) they are bullet list markers using the same character
(`-`, `+`, or `*`) or (b) they are ordered list numbers with the same
delimiter (either `.` or `)`).

A list is an [ordered list](@)
if its constituent list items begin with
[ordered list markers], and a
[bullet list](@) if its constituent list
items begin with [bullet list markers].

The [start number](@)
of an [ordered list] is determined by the list number of
its initial list item.  The numbers of subsequent list items are
disregarded.

A list is [loose](@) if any of its constituent
list items are separated by blank lines, or if any of its constituent
list items directly contain two block-level elements with a blank line
between them.  Otherwise a list is [tight](@).
(The difference in HTML output is that paragraphs in a loose list are
wrapped in `<p>` tags, while paragraphs in a tight list are not.)

Changing the bullet or ordered list delimiter starts a new list:

```example
- foo
- bar
+ baz
.
<ul>
<li>foo</li>
<li>bar</li>
</ul>
<ul>
<li>baz</li>
</ul>
```


```example
1. foo
2. bar
3) baz
.
<ol>
<li>foo</li>
<li>bar</li>
</ol>
<ol start="3">
<li>baz</li>
</ol>
```


In Markua, a list can be nested inside a paragraph.

```example
Foo
- bar
- baz
.
<p>Foo</p>
<ul>
<li>bar</li>
<li>baz</li>
</ul>
```

In Markua, we do allow lists to interrupt paragraphs, for
two reasons.  First, it is natural and not uncommon for people
to start lists without blank lines:

```
I need to buy
- new shoes
- a coat
- a plane ticket
```

Second, we are attracted to a

> [principle of uniformity](@):
> if a chunk of text has a certain
> meaning, it will continue to have the same meaning when put into a
> container block (such as a list item or blockquote).

(Indeed, the spec for [list items] and [block quotes] presupposes
this principle.) This principle implies that if

```
  * I need to buy
    - new shoes
    - a coat
    - a plane ticket
```

is a list item containing a paragraph followed by a nested sublist,
as all Markdown implementations agree it is (though the paragraph
may be rendered without `<p>` tags, since the list is "tight"),
then

```
I need to buy
- new shoes
- a coat
- a plane ticket
```

by itself should be a paragraph followed by a nested sublist.

Since it is well established Markdown practice to allow lists to
interrupt paragraphs inside list items, the [principle of
uniformity] requires us to allow this outside list items as
well.  ([reStructuredText](http://docutils.sourceforge.net/rst.html)
takes a different approach, requiring blank lines before lists
even inside other list items.)

In order to solve of unwanted lists in paragraphs with
hard-wrapped numerals, we allow only lists starting with `1` to
interrupt paragraphs.  Thus,

```example
The number of windows in my house is
14.  The number of doors is 6.
.
<p>The number of windows in my house is
14.  The number of doors is 6.</p>
```

We may still get an unintended result in cases like

```example
The number of windows in my house is
1.  The number of doors is 6.
.
<p>The number of windows in my house is</p>
<ol>
<li>The number of doors is 6.</li>
</ol>
```

but this rule should prevent most spurious list captures.

There can be any number of blank lines between items:

```example
- foo

- bar


- baz
.
<ul>
<li>
<p>foo</p>
</li>
<li>
<p>bar</p>
</li>
<li>
<p>baz</p>
</li>
</ul>
```

```example
- foo
  - bar
    - baz


      bim
.
<ul>
<li>foo
<ul>
<li>bar
<ul>
<li>
<p>baz</p>
<p>bim</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
```


To separate consecutive lists of the same type, or to separate a
list from an indented code block that would otherwise be parsed
as a subparagraph of the final list item, you can insert a blank HTML
comment:

```example
- foo
- bar

<!-- -->

- baz
- bim
.
<ul>
<li>foo</li>
<li>bar</li>
</ul>
<!-- -->
<ul>
<li>baz</li>
<li>bim</li>
</ul>
```


```example
-   foo

    notcode

-   foo

<!-- -->

    code
.
<ul>
<li>
<p>foo</p>
<p>notcode</p>
</li>
<li>
<p>foo</p>
</li>
</ul>
<!-- -->
<pre><code>code
</code></pre>
```


List items need not be indented to the same level.  The following
list items will be treated as items at the same list level,
since none is indented enough to belong to the previous list
item:

```example
- a
 - b
  - c
   - d
  - e
 - f
- g
.
<ul>
<li>a</li>
<li>b</li>
<li>c</li>
<li>d</li>
<li>e</li>
<li>f</li>
<li>g</li>
</ul>
```


```example
1. a

  2. b

   3. c
.
<ol>
<li>
<p>a</p>
</li>
<li>
<p>b</p>
</li>
<li>
<p>c</p>
</li>
</ol>
```

Note, however, that list items may not be indented more than
three spaces.  Here `- e` is treated as a paragraph continuation
line, because it is indented more than three spaces:

```example
- a
 - b
  - c
   - d
    - e
.
<ul>
<li>a</li>
<li>b</li>
<li>c</li>
<li>d
- e</li>
</ul>
```

And here, `3. c` is treated as in indented code block,
because it is indented four spaces and preceded by a
blank line.

```example
1. a

  2. b

    3. c
.
<ol>
<li>
<p>a</p>
</li>
<li>
<p>b</p>
</li>
</ol>
<pre><code>3. c
</code></pre>
```


This is a loose list, because there is a blank line between
two of the list items:

```example
- a
- b

- c
.
<ul>
<li>
<p>a</p>
</li>
<li>
<p>b</p>
</li>
<li>
<p>c</p>
</li>
</ul>
```


So is this, with a empty second item:

```example
* a
*

* c
.
<ul>
<li>
<p>a</p>
</li>
<li></li>
<li>
<p>c</p>
</li>
</ul>
```


These are loose lists, even though there is no space between the items,
because one of the items directly contains two block-level elements
with a blank line between them:

```example
- a
- b

  c
- d
.
<ul>
<li>
<p>a</p>
</li>
<li>
<p>b</p>
<p>c</p>
</li>
<li>
<p>d</p>
</li>
</ul>
```


```example
- a
- b

  [ref]: /url
- d
.
<ul>
<li>
<p>a</p>
</li>
<li>
<p>b</p>
</li>
<li>
<p>d</p>
</li>
</ul>
```


This is a tight list, because the blank lines are in a code block:

```example
- a
- ```
  b


  ```
- c
.
<ul>
<li>a</li>
<li>
<pre><code>b


</code></pre>
</li>
<li>c</li>
</ul>
```


This is a tight list, because the blank line is between two
paragraphs of a sublist.  So the sublist is loose while
the outer list is tight:

```example
- a
  - b

    c
- d
.
<ul>
<li>a
<ul>
<li>
<p>b</p>
<p>c</p>
</li>
</ul>
</li>
<li>d</li>
</ul>
```


This is a tight list, because the blank line is inside the
block quote:

```example
* a
  > b
  >
* c
.
<ul>
<li>a
<blockquote>
<p>b</p>
</blockquote>
</li>
<li>c</li>
</ul>
```


This list is tight, because the consecutive block elements
are not separated by blank lines:

```example
- a
  > b
  ```
  c
  ```
- d
.
<ul>
<li>a
<blockquote>
<p>b</p>
</blockquote>
<pre><code>c
</code></pre>
</li>
<li>d</li>
</ul>
```


A single-paragraph list is tight:

```example
- a
.
<ul>
<li>a</li>
</ul>
```


```example
- a
  - b
.
<ul>
<li>a
<ul>
<li>b</li>
</ul>
</li>
</ul>
```


This list is loose, because of the blank line between the
two block elements in the list item:

```example
1. ```
   foo
   ```

   bar
.
<ol>
<li>
<pre><code>foo
</code></pre>
<p>bar</p>
</li>
</ol>
```


Here the outer list is loose, the inner list tight:

```example
* foo
  * bar

  baz
.
<ul>
<li>
<p>foo</p>
<ul>
<li>bar</li>
</ul>
<p>baz</p>
</li>
</ul>
```


```example
- a
  - b
  - c

- d
  - e
  - f
.
<ul>
<li>
<p>a</p>
<ul>
<li>b</li>
<li>c</li>
</ul>
</li>
<li>
<p>d</p>
<ul>
<li>e</li>
<li>f</li>
</ul>
</li>
</ul>
```

## Definition Lists

TODO

##### Example

###### Markua Document

{#input-definition_lists_1}
~~~
Here's a paragraph before the list.

one
: This is the first definition of one. It's one paragraph.
: This is the second definition of one. It's two paragraphs.

  This is a second paragraph in the second definition of one.

two
: The second list item is simple.

three
: The third list item has three paragraphs.
  This is still part of the first paragraph.

  Here's the second paragraph in the third list item.

  Here's the third paragraph in the third list item.

Here's a paragraph after the list.
~~~

###### HTML Output

{#output-definition_lists_1}
~~~
<p>Here's a paragraph before the list.</p>
<dl>
  <dt>one</dt>
  <dd>This is the first definition of one. It's one paragraph.</dd>
  <dd>
    <p>This is the second definition of one. It's two paragraphs.</p>
    <p>This is a second paragraph in the second definition of one.</p>
  </dd>
  <dt>two</dt>
  <dd>The second list item is simple.</dd>
  <dt>three</dt>
  <dd>
    <p>The third list item has three paragraphs.<br/>
    This is still part of the first paragraph.</p>
    <p>Here's the second paragraph in the third list item.</p>
    <p>Here's the third paragraph in the third list item.</p>
  </dd>
</dl>
<p>Here's a paragraph after the list.</p>
~~~



## Block Elements

TODO

### Blockquotes (`>`)

TODO

##### Example 1: Blockquotes that are Siblings of Paragraphs

###### Markua Document

{#input-blockquotes_1}
~~~
This is the first paragraph.

> This is a blockquote.
>
> It is outside the paragraphs.

This is the second paragraph.

{blockquote}
This is a blockquote.

It is outside the paragraphs.
{/blockquote}

This is the third paragraph.
~~~

###### HTML Output

{#output-blockquotes_1}
~~~
<p>This is the first paragraph.</p>
<blockquote>
  <p>This is a blockquote.</p>
  <p>It is outside the paragraphs.</p>
</blockquote>
<p>This is the second paragraph.</p>
<blockquote>
  <p>This is a blockquote.</p>
  <p>It is outside the paragraphs.</p>
</blockquote>
<p>This is the third paragraph.</p>
~~~

##### Example 2: Blockquotes that are Nested in Paragraphs

###### Markua Document

{#input-blockquotes_2}
~~~
This is the first paragraph.

This is the second paragraph.
> This is a blockquote
>
> It is inside the second paragraph.
This is part of the second paragraph.
{blockquote}
This is a blockquote.

It is inside the second paragraph.
{/blockquote}
This is part of the second paragraph.

This is the third paragraph.
~~~

###### HTML Output

{#output-blockquotes_2}
~~~
<p>This is the first paragraph.</p>
<p>This is the second paragraph.<br/>
<blockquote>
  <p>This is a blockquote</p>
  <p>It is inside the second paragraph.</p>
</blockquote>
This is part of the second paragraph.<br/>
<blockquote>
  <p>This is a blockquote</p>
  <p>It is inside the second paragraph.</p>
</blockquote>
This is part of the second paragraph.</p>
<p>This is the third paragraph.</p>
~~~

##### Example 3: Blockquotes with Attribute Lists

###### Markua Document

{#input-blockquotes_3}
~~~
Lots of people have opinions about software.

Here's the most famous recent one:

{cite: "Marc Andreessen", url: "http://www.wsj.com/articles/SB10001424053111903480904576512250915629460"}
> Software is eating the world.

It's quoted a lot, so let's quote it again:

{cite: "Marc Andreessen", url: "http://www.wsj.com/articles/SB10001424053111903480904576512250915629460"}
{blockquote}
Software is eating the world.
{/blockquote}

That's it!
~~~

###### HTML Output

{#output-blockquotes_3}
~~~
<p>Lots of people have opinions about software.</p>
<p>Here's the most famous recent one:</p>
<blockquote>
  <p>Software is eating the world.</p>
  <cite><a href="http://www.wsj.com/articles/SB10001424053111903480904576512250915629460">Marc Andreessen</a></cite>
</blockquote>
<p>It's quoted a lot, so let's quote it again:</p>
<blockquote>
  <p>Software is eating the world.</p>
  <cite><a href="http://www.wsj.com/articles/SB10001424053111903480904576512250915629460">Marc Andreessen</a></cite>
</blockquote>
<p>That's it!</p>
~~~

### Asides (`A>` or `{aside}`)

TODO


##### Example

###### Markua Document

{#input-asides_1}
~~~
This is the first paragraph.
A> This is a short aside.
This is still the first paragraph.

A> # A Longer Aside
A>
A> This is a longer aside.
A>
A> It can have multiple paragraphs.

This is the second paragraph.

{aside}
# A Longer Aside

This is a longer aside.

It can have multiple paragraphs.
{/aside}

This is the third paragraph.
~~~

###### HTML Output

{#output-asides_1}
~~~
<p>This is the first paragraph.<br/>
<aside>
  <p>This is a short aside.</p>
</aside>
This is still the first paragraph.</p>
<aside>
  <h1>A Longer Aside</h1>
  <p>This is a longer aside.</p>
  <p>It can have multiple paragraphs.</p>
</aside>
<p>This is the second paragraph.</p>
<aside>
  <h1>A Longer Aside</h1>
  <p>This is a longer aside.</p>
  <p>It can have multiple paragraphs.</p>
</aside>
<p>This is the third paragraph.</p>
~~~

### Blurbs (`B>` or `{blurb}`)

TODO


##### Example 1: Normal Blurbs

###### Markua Document

{#input-blurbs_1}
~~~
This is the first paragraph.
B> This is a short blurb.
This is still the first paragraph.

B> # A Longer Blurb
B>
B> This is a longer blurb.
B>
B> It can have multiple paragraphs.

This is the second paragraph.

{blurb}
# A Longer Blurb

This is a longer blurb.

It can have multiple paragraphs.
{/blurb}

This is the third paragraph.
~~~

###### HTML Output

{#output-blurbs_1}
~~~
<p>This is the first paragraph.<br/>
<aside class="blurb">
  <p>This is a short blurb.</p>
</aside>
This is still the first paragraph.</p>
<aside class="blurb">
  <h1>A Longer Blurb</h1>
  <p>This is a longer blurb.</p>
  <p>It can have multiple paragraphs.</p>
</aside>
<p>This is the second paragraph.</p>
<aside class="blurb">
  <h1>A Longer Blurb</h1>
  <p>This is a longer blurb.</p>
  <p>It can have multiple paragraphs.</p>
</aside>
<p>This is the third paragraph.</p>
~~~

##### Example 2: Blurb Classes

###### Markua Document

{#input-blurbs_2}
~~~
{class: discussion}
B> This is a discussion blurb.

{class: error}
B> This is an error blurb.

{class: information}
B> This is an information blurb.

{class: tip}
B> This is a tip blurb.

{class: warning}
B> This is a warning blurb.
~~~

###### HTML Output

{#output-blurbs_2}
~~~
<aside class="blurb discussion">
  <p>This is a discussion blurb.</p>
</aside>
<aside class="blurb error">
  <p>This is an error blurb.</p>
</aside>
<aside class="blurb information">
  <p>This is an information blurb.</p>
</aside>
<aside class="blurb tip">
  <p>This is a tip blurb.</p>
</aside>
<aside class="blurb warning">
  <p>This is a warning blurb.</p>
</aside>
~~~

##### Example 3: Syntactic Sugar for Blurb Classes

###### Markua Document

{#input-blurbs_3}
~~~
D> This is a discussion blurb.

E> This is an error blurb.

I> This is an information blurb.

T> This is a tip blurb.

W> This is a warning blurb.
~~~

###### HTML Output

{#output-blurbs_3}
~~~
<aside class="blurb discussion">
  <p>This is a discussion blurb.</p>
</aside>
<aside class="blurb error">
  <p>This is an error blurb.</p>
</aside>
<aside class="blurb information">
  <p>This is an information blurb.</p>
</aside>
<aside class="blurb tip">
  <p>This is a tip blurb.</p>
</aside>
<aside class="blurb warning">
  <p>This is a warning blurb.</p>
</aside>
~~~

### Inserting Block Elements Inside Paragraphs

TODO


##### Example

###### Markua Document

{#input-ibeip_1}
~~~
This is paragraph one.

This sentence is in paragraph two.
* this list is
* part of
* paragraph two
This sentence is also in paragraph two.

This is paragraph three.

This sentence is in paragraph four.
{caption: "Hello, World"}
```text
puts "hello world"
```
This sentence is also in paragraph four.

This sentence is in paragraph five.
![A Piece of Cake](cake.jpg)
This sentence is also in paragraph five.

This sentence is in paragraph six.
{alt: "a slice of chocolate cake"}
![A Piece of Cake](http://markua.com/cake.jpg)
This sentence is also in paragraph six.

This sentence is in paragraph seven.
* this list is
* part of
* paragraph seven

This is paragraph eight.
~~~

###### HTML Output

{#output-ibeip_1}
~~~
<p>This is paragraph one.</p>

<p>This sentence is in paragraph two.<br/>
<ul>
  <li>this list is</li>
  <li>part of</li>
  <li>paragraph two</li>
</ul>
This sentence is also in paragraph two.</p>

<p>This is paragraph three.</p>

<p>This sentence is in paragraph four.<br/>
<div class="figure">
  <pre><code>puts "hello world"</code></pre>
  <p class="caption">Hello, World</p>
</div>
puts
```
This sentence is also in paragraph four.</p>

<p>This sentence is in paragraph five.<br/>
<div class="figure">
  <img src="cake.jpg"/>
  <p class="caption">A Piece of Cake</p>
</div>
This sentence is also in paragraph five.</p>

<p>This sentence is in paragraph six.<br/>
<div class="figure">
  <img src="http://markua.com/cake.jpg" alt="a slice of chocolate cake"/>
  <p class="caption">A Piece of Cake</p>
</div>
This sentence is also in paragraph six.</p>

<p>This sentence is in paragraph seven.<br/>
<ul>
  <li>this list is</li>
  <li>part of</li>
  <li>paragraph seven</li>
</ul>
</p>

<p>This is paragraph eight.</p>
~~~

# Inlines

Inlines are parsed sequentially from the beginning of the character stream to the end (left to right, in left-to-right languages). Thus, for example, in

```example
`hi`lo`
.
<p><code>hi</code>lo`</p>
```

`hi` is parsed as code, leaving the backtick at the end as a literal backtick.

{#text-formatting-html}
## Text Formatting

View the [specification](#text-formatting).



## CSS Note

The following CSS rule is recommended for strikethrough, since CSS is how strikethrough is done in HTML:

~~~
.strikethrough {
  text-decoration: line-through;
}
~~~

##### Example TF-1

Note that this example, like all examples where a settings hash is not provided, uses the default settings, which includes `html-style: default` and `italicize-underlines: false`. (If you like your emphasis `<strong>` and `<em>`, you set `html-style: markdown`. See below for examples of this.)

###### Markua Document

{#input-tf-1}
~~~
* Italic: *one asterisk*
* Underlined: _one underscore_
* Bold: **two asterisks** or __two underscores__
* Bold + Italic: ***three asterisks***
* Bold + Underlined: ___three underscores___
* Bold + Italic + Underlined: ____four underscores____ or ****four asterisks****
* Strikethrough: ~~two tildes~~
* Superscript: 5^3^ = 125
* Subscript: H~2~O
~~~

###### HTML Output

{#output-tf-1}
~~~
<ul>
  <li>Italic: <i>one asterisk</i></li>
  <li>Underlined: <u>one underscore</u></li>
  <li>Bold: <b>two asterisks</b> or <b>two underscores</b></li>
  <li>Bold + Italic: <b><i>three asterisks</i></b></li>
  <li>Bold + Underlined: <b><u>three underscores</u></b></li>
  <li>Bold + Italic + Underlined: <b><i><u>four underscores</u></i></b> or <b><i><u>four asterisks</u></i></b></li>
  <li>Strikethrough: <span class="strikethrough">two tildes</span></li>
  <li>Superscript: 5<sup>3</sup> = 125</li>
  <li>Subscript: H<sub>2</sub>O</li>
</ul>
~~~

##### Example TF-2

This example makes the default settings explicitly specified. The output is the same as the previous example.

###### Markua Document

{#input-tf-2}
~~~
{
html-style: default
italicize-underlines: false
}
* Italic: *one asterisk*
* Underlined: _one underscore_
* Bold: **two asterisks** or __two underscores__
* Bold + Italic: ***three asterisks***
* Bold + Underlined: ___three underscores___
* Bold + Italic + Underlined: ____four underscores____ or ****four asterisks****
* Strikethrough: ~~two tildes~~
* Superscript: 5^3^ = 125
* Subscript: H~2~O
~~~

###### HTML Output

{#output-tf-2}
~~~
<ul>
  <li>Italic: <i>one asterisk</i></li>
  <li>Underlined: <u>one underscore</u></li>
  <li>Bold: <b>two asterisks</b> or <b>two underscores</b></li>
  <li>Bold + Italic: <b><i>three asterisks</i></b></li>
  <li>Bold + Underlined: <b><u>three underscores</u></b></li>
  <li>Bold + Italic + Underlined: <b><i><u>four underscores</u></i></b> or <b><i><u>four asterisks</u></i></b></li>
  <li>Strikethrough: <span class="strikethrough">two tildes</span></li>
  <li>Superscript: 5<sup>3</sup> = 125</li>
  <li>Subscript: H<sub>2</sub>O</li>
</ul>
~~~

##### Example TF-3

This example overrides italicize-underlines to `true`.

###### Markua Document

{#input-tf-3}
~~~
{
html-style: default
italicize-underlines: true
}
* Italic: *one asterisk*
* Italic: _one underscore_
* Bold: **two asterisks** or __two underscores__
* Bold + Italic: ***three asterisks***
* Bold + Italic: ___three underscores___
* Bold + Italic: ____four underscores____ or ****four asterisks****
* Strikethrough: ~~two tildes~~
* Superscript: 5^3^ = 125
* Subscript: H~2~O
~~~

###### HTML Output

{#output-tf-3}
~~~
<ul>
  <li>Italic: <i>one asterisk</i></li>
  <li>Italic: <i>one underscore</i></li>
  <li>Bold: <b>two asterisks</b> or <b>two underscores</b></li>
  <li>Bold + Italic: <b><i>three asterisks</i></b></li>
  <li>Bold + Italic: <b><i>three underscores</i></b></li>
  <li>Bold + Italic: <b><i>four underscores</i></b> or <b><i>four asterisks</i></b></li>
  <li>Strikethrough: <span class="strikethrough">two tildes</span></li>
  <li>Superscript: 5<sup>3</sup> = 125</li>
  <li>Subscript: H<sub>2</sub>O</li>
</ul>
~~~

##### Example TF-4

This example overrides italicize-underlines to `true` and html-style to `markdown`.

###### Markua Document

{#input-tf-4}
~~~
{
html-style: markdown
italicize-underlines: true
}
* Italic: *one asterisk*
* Italic: _one underscore_
* Bold: **two asterisks** or __two underscores__
* Bold + Italic: ***three asterisks***
* Bold + Italic: ___three underscores___
* Bold + Italic: ____four underscores____ or ****four asterisks****
* Strikethrough: ~~two tildes~~
* Superscript: 5^3^ = 125
* Subscript: H~2~O
~~~

###### HTML Output

{#output-tf-4}
~~~
<ul>
  <li>Italic: <i>one asterisk</i></li>
  <li>Italic: <i>one underscore</i></li>
  <li>Bold: <b>two asterisks</b> or <b>two underscores</b></li>
  <li>Bold + Italic: <b><i>three asterisks</i></b></li>
  <li>Bold + Italic: <b><i>three underscores</i></b></li>
  <li>Bold + Italic: <b><i>four underscores</i></b> or <b><i>four asterisks</i></b></li>
  <li>Strikethrough: <span class="strikethrough">two tildes</span></li>
  <li>Superscript: 5<sup>3</sup> = 125</li>
  <li>Subscript: H<sub>2</sub>O</li>
</ul>
~~~


## Backslash escapes

Any ASCII punctuation character may be backslash-escaped:

```example
\!\"\#\$\%\&\'\(\)\*\+\,\-\.\/\:\;\<\=\>\?\@\[\\\]\^\_\`\{\|\}\~
.
<p>!&quot;#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~</p>
```


Backslashes before other characters are treated as literal backslashes:

```example
\→\A\a\ \3\φ\«
.
<p>\→\A\a\ \3\φ\«</p>
```


Escaped characters are treated as regular characters and do not have their usual Markdown meanings:

```example
\*not emphasized*
\<br/> not a tag
\[not a link](/foo)
\`not code`
1\. not a list
\* not a list
\# not a heading
\[foo]: /url "not a reference"
\&ouml; not a character entity
.
<p>*not emphasized*
&lt;br/&gt; not a tag
[not a link](/foo)
`not code`
1. not a list
* not a list
# not a heading
[foo]: /url &quot;not a reference&quot;
&amp;ouml; not a character entity</p>
```


If a backslash is itself escaped, the following character is not:

```example
\\*emphasis*
.
<p>\<em>emphasis</em></p>
```


A backslash at the end of the line is a [hard line break]:

```example
foo\
bar
.
<p>foo<br />
bar</p>
```


Backslash escapes do not work in code blocks, code spans, autolinks, or
raw HTML:

```example
`` \[\` ``
.
<p><code>\[\`</code></p>
```


```example
    \[\]
.
<pre><code>\[\]
</code></pre>
```


```example
~~~
\[\]
~~~
.
<pre><code>\[\]
</code></pre>
```


```example
<http://example.com?find=\*>
.
<p><a href="http://example.com?find=%5C*">http://example.com?find=\*</a></p>
```


```example
<a href="/bar\/)">
.
<a href="/bar\/)">
```


But they work in all other contexts, including URLs and link titles,
link references, and [info strings] in [fenced code blocks]:

```example
[foo](/bar\* "ti\*tle")
.
<p><a href="/bar*" title="ti*tle">foo</a></p>
```


```example
[foo]

[foo]: /bar\* "ti\*tle"
.
<p><a href="/bar*" title="ti*tle">foo</a></p>
```


```example
``` foo\+bar
foo
```
.
<pre><code class="language-foo+bar">foo
</code></pre>
```



## Entity and numeric character references

Valid HTML entity references and numeric character references
can be used in place of the corresponding Unicode character,
with the following exceptions:

- Entity and character references are not recognized in code
  blocks and code spans.

- Entity and character references cannot stand in place of
  special characters that define structural elements in
  Markua.  For example, although `&#42;` can be used
  in place of a literal `*` character, `&#42;` cannot replace
  `*` in emphasis delimiters, bullet list markers, or thematic
  breaks.

Conforming Markua parsers need not store information about
whether a particular character was represented in the source
using a Unicode character or an entity reference.

[Entity references](@) consist of `&` + any of the valid
HTML5 entity names + `;`. The
document <https://html.spec.whatwg.org/multipage/entities.json>
is used as an authoritative source for the valid entity
references and their corresponding code points.

```example
&nbsp; &amp; &copy; &AElig; &Dcaron;
&frac34; &HilbertSpace; &DifferentialD;
&ClockwiseContourIntegral; &ngE;
.
<p>  &amp; © Æ Ď
¾ ℋ ⅆ
∲ ≧̸</p>
```


[Decimal numeric character
references](@)
consist of `&#` + a string of 1--7 arabic digits + `;`. A
numeric character reference is parsed as the corresponding
Unicode character. Invalid Unicode code points will be replaced by
the REPLACEMENT CHARACTER (`U+FFFD`).  For security reasons,
the code point `U+0000` will also be replaced by `U+FFFD`.

```example
&#35; &#1234; &#992; &#0;
.
<p># Ӓ Ϡ �</p>
```


[Hexadecimal numeric character
references](@) consist of `&#` +
either `X` or `x` + a string of 1-6 hexadecimal digits + `;`.
They too are parsed as the corresponding Unicode character (this
time specified with a hexadecimal numeral instead of decimal).

```example
&#X22; &#XD06; &#xcab;
.
<p>&quot; ആ ಫ</p>
```


Here are some nonentities:

```example
&nbsp &x; &#; &#x;
&#87654321;
&#abcdef0;
&ThisIsNotDefined; &hi?;
.
<p>&amp;nbsp &amp;x; &amp;#; &amp;#x;
&amp;#87654321;
&amp;#abcdef0;
&amp;ThisIsNotDefined; &amp;hi?;</p>
```


Although HTML5 does accept some entity references
without a trailing semicolon (such as `&copy`), these are not
recognized here, because it makes the grammar too ambiguous:

```example
&copy
.
<p>&amp;copy</p>
```


Strings that are not on the list of HTML5 named entities are not
recognized as entity references either:

```example
&MadeUpEntity;
.
<p>&amp;MadeUpEntity;</p>
```


Entity and numeric character references are recognized in any
context besides code spans or code blocks, including
URLs, [link titles], and [fenced code block][] [info strings]:

```example
<a href="&ouml;&ouml;.html">
.
<a href="&ouml;&ouml;.html">
```


```example
[foo](/f&ouml;&ouml; "f&ouml;&ouml;")
.
<p><a href="/f%C3%B6%C3%B6" title="föö">foo</a></p>
```


```example
[foo]

[foo]: /f&ouml;&ouml; "f&ouml;&ouml;"
.
<p><a href="/f%C3%B6%C3%B6" title="föö">foo</a></p>
```


```example
``` f&ouml;&ouml;
foo
```
.
<pre><code class="language-föö">foo
</code></pre>
```


Entity and numeric character references are treated as literal
text in code spans and code blocks:

```example
`f&ouml;&ouml;`
.
<p><code>f&amp;ouml;&amp;ouml;</code></p>
```


```example
    f&ouml;f&ouml;
.
<pre><code>f&amp;ouml;f&amp;ouml;
</code></pre>
```


Entity and numeric character references cannot be used
in place of symbols indicating structure in Markua
documents.

```example
&#42;foo&#42;
*foo*
.
<p>*foo*
<em>foo</em></p>
```

```example
&#42; foo

* foo
.
<p>* foo</p>
<ul>
<li>foo</li>
</ul>
```

```example
foo&#10;&#10;bar
.
<p>foo

bar</p>
```

```example
&#9;foo
.
<p>→foo</p>
```


```example
[a](url &quot;tit&quot;)
.
<p>[a](url &quot;tit&quot;)</p>
```

## Code spans

A [backtick string](@) is a string of one or more backtick characters (`` ` ``) that is neither preceded nor followed by a backtick.

Code spans cannot contain [line endings] in Markua.

A [code span](@) begins with a backtick string and ends with a backtick string of equal length.  The contents of the code span are the characters between the two backtick strings, normalized in the following way:

If the resulting string both begins *and* ends with a [space] character, but does not consist entirely of [space] characters, a single [space] character is removed from the front and back.  This allows you to include code that begins or ends with backtick characters, which must be separated by whitespace from the opening or closing backtick strings.

This is a simple code span:

```example
`foo`
.
<p><code>foo</code></p>
```


Here two backticks are used, because the code contains a backtick.
This example also illustrates stripping of a single leading and
trailing space:

```example
`` foo ` bar ``
.
<p><code>foo ` bar</code></p>
```


This example shows the motivation for stripping leading and trailing
spaces:

```example
` `` `
.
<p><code>``</code></p>
```

Note that only *one* space is stripped:

```example
`  ``  `
.
<p><code> `` </code></p>
```

The stripping only happens if the space is on both
sides of the string:

```example
` a`
.
<p><code> a</code></p>
```

Only [spaces], and not [unicode whitespace] in general, are
stripped in this way:

```example
` b `
.
<p><code> b </code></p>
```

No stripping occurs if the code span contains only spaces:

```example
` `
`  `
.
<p><code> </code>
<code>  </code></p>
```


[Line endings] are treated like spaces:

```example
``
foo
bar
baz
``
.
<p><code>foo bar   baz</code></p>
```

```example
``
foo
``
.
<p><code>foo </code></p>
```


Interior spaces are not collapsed:

```example
`foo   bar
baz`
.
<p><code>foo   bar  baz</code></p>
```

Note that backslash escapes do not work in code spans. All backslashes
are treated literally:

```example
`foo\`bar`
.
<p><code>foo\</code>bar`</p>
```


Backslash escapes are never needed, because one can always choose a
string of *n* backtick characters as delimiters, where the code does
not contain any strings of exactly *n* backtick characters.

```example
``foo`bar``
.
<p><code>foo`bar</code></p>
```

```example
` foo `` bar `
.
<p><code>foo `` bar</code></p>
```


Code span backticks have higher precedence than any other inline
constructs except HTML tags and autolinks.  Thus, for example, this is
not parsed as emphasized text, since the second `*` is part of a code
span:

```example
*foo`*`
.
<p>*foo<code>*</code></p>
```


And this is not parsed as a link:

```example
[not a `link](/foo`)
.
<p>[not a <code>link](/foo</code>)</p>
```


Code spans, HTML tags, and autolinks have the same precedence.
Thus, this is code:

```example
`<a href="`">`
.
<p><code>&lt;a href=&quot;</code>&quot;&gt;`</p>
```


But this is an HTML tag:

```example
<a href="`">`
.
<p><a href="`">`</p>
```


And this is code:

```example
`<http://foo.bar.`baz>`
.
<p><code>&lt;http://foo.bar.</code>baz&gt;`</p>
```


But this is an autolink:

```example
<http://foo.bar.`baz>`
.
<p><a href="http://foo.bar.%60baz">http://foo.bar.`baz</a>`</p>
```


When a backtick string is not closed by a matching backtick string,
we just have literal backticks:

```example
```foo``
.
<p>```foo``</p>
```


```example
`foo
.
<p>`foo</p>
```

The following case also illustrates the need for opening and
closing backtick strings to be equal in length:

```example
`foo``bar``
.
<p>`foo<code>bar</code></p>
```

## Emphasis and strong emphasis

A> The rules that Markua follows for emphasis are as close to those in the CommonMark Spec as possible, for compatibility with CommonMark. Also, the text in this section is almost entirely from the CommonMark Spec, to emphasize this point.
A>
A> The only difference between Markua and CommonMark in terms of emphasis and strong emphasis is that Markua can be configured (and is configured by default) to produce `<b>` instead of `<strong>`, `<i>` instead of `<em>` and `<u>` instead of `<i>`. So, a settings block is shown for every example, to be clear which settings are in use.

John Gruber's original [Markdown syntax description](http://daringfireball.net/projects/markdown/syntax#em) says:

> Markdown treats asterisks (`*`) and underscores (`_`) as indicators of emphasis. Text wrapped with one `*` or `_` will be wrapped with an HTML `<em>` tag; double `*`'s or `_`'s will be wrapped with an HTML `<strong>` tag.

This is enough for most users, but these rules leave much undecided, especially when it comes to nested emphasis. The original `Markdown.pl` test suite makes it clear that triple `***` and `___` delimiters can be used for strong emphasis, and most implementations have also allowed the following patterns:

```
***strong emph***
***strong** in emph*
***emph* in strong**
**in strong *emph***
*in emph **strong***
```

The following patterns are less widely supported, but the intent is clear and they are useful (especially in contexts like bibliography entries):

```
*emph *with emph* in it*
**strong **with strong** in it**
```

Many implementations have also restricted intraword emphasis to the `*` forms, to avoid unwanted emphasis in words containing internal underscores. (It is best practice to put these in code spans, but users often do not.)

```
internal emphasis: foo*bar*baz
no emphasis: foo_bar_baz
```

The rules given below capture all of these patterns, while allowing for efficient parsing strategies that do not backtrack.

First, some definitions. A [delimiter run](@) is either a sequence of one or more `*` characters that is not preceded or followed by a non-backslash-escaped `*` character, or a sequence of one or more `_` characters that is not preceded or followed by a non-backslash-escaped `_` character.

A [left-flanking delimiter run](@) is a [delimiter run] that is (1) not followed by [Unicode whitespace], and either (2a) not followed by a [punctuation character], or (2b) followed by a [punctuation character] and preceded by [Unicode whitespace] or a [punctuation character]. For purposes of this definition, the beginning and the end of the line count as Unicode whitespace.

A [right-flanking delimiter run](@) is a [delimiter run] that is (1) not preceded by [Unicode whitespace], and either (2a) not preceded by a [punctuation character], or (2b) preceded by a [punctuation character] and followed by [Unicode whitespace] or a [punctuation character]. For purposes of this definition, the beginning and the end of the line count as Unicode whitespace.

Here are some examples of delimiter runs:

- left-flanking but not right-flanking:

  ```
  ***abc
    _abc
  **"abc"
   _"abc"
  ```

- right-flanking but not left-flanking:

  ```
  abc***
  abc_
  "abc"**
  "abc"_
  ```

- Both left and right-flanking:

  ```
  abc***def
  "abc"_"def"
  ```

- Neither left nor right-flanking:

  ```
  abc *** def
  a _ b
  ```

(The idea of distinguishing left-flanking and right-flanking delimiter runs based on the character before and the character after comes from Roopesh Chander's [vfmd](http://www.vfmd.org/vfmd-spec/specification/#procedure-for-identifying-emphasis-tags). vfmd uses the terminology "emphasis indicator string" instead of "delimiter run," and its rules for distinguishing left- and right-flanking runs are a bit more complex than the ones given here.)

The following rules define emphasis and strong emphasis:

1. A single `*` character [can open emphasis](@) iff (if and only if) it is part of a [left-flanking delimiter run].

2. A single `_` character [can open emphasis] iff it is part of a [left-flanking delimiter run] and either (a) not part of a [right-flanking delimiter run] or (b) part of a [right-flanking delimiter run] preceded by punctuation.

3. A single `*` character [can close emphasis](@) iff it is part of a [right-flanking delimiter run].

4. A single `_` character [can close emphasis] iff it is part of a [right-flanking delimiter run] and either (a) not part of a [left-flanking delimiter run] or (b) part of a [left-flanking delimiter run] followed by punctuation.

5. A double `**` [can open strong emphasis](@) iff it is part of a [left-flanking delimiter run].

6. A double `__` [can open strong emphasis] iff it is part of a [left-flanking delimiter run] and either (a) not part of a [right-flanking delimiter run] or (b) part of a [right-flanking delimiter run] preceded by punctuation.

7. A double `**` [can close strong emphasis](@) iff it is part of a [right-flanking delimiter run].

8. A double `__` [can close strong emphasis] iff it is part of a [right-flanking delimiter run] and either (a) not part of a [left-flanking delimiter run] or (b) part of a [left-flanking delimiter run] followed by punctuation.

9. Emphasis begins with a delimiter that [can open emphasis] and ends with a delimiter that [can close emphasis], and that uses the same character (`_` or `*`) as the opening delimiter. The opening and closing delimiters must belong to separate [delimiter runs]. If one of the delimiters can both open and close emphasis, then the sum of the lengths of the delimiter runs containing the opening and closing delimiters must not be a multiple of 3 unless both lengths are multiples of 3.

10. Strong emphasis begins with a delimiter that [can open strong emphasis] and ends with a delimiter that [can close strong emphasis], and that uses the same character (`_` or `*`) as the opening delimiter. The opening and closing delimiters must belong to separate [delimiter runs]. If one of the delimiters can both open and close strong emphasis, then the sum of the lengths of the delimiter runs containing the opening and closing delimiters must not be a multiple of 3 unless both lengths are multiples of 3.

11. A literal `*` character cannot occur at the beginning or end of `*`-delimited emphasis or `**`-delimited strong emphasis, unless it is backslash-escaped.

12. A literal `_` character cannot occur at the beginning or end of `_`-delimited emphasis or `__`-delimited strong emphasis, unless it is backslash-escaped.

Where rules 1--12 above are compatible with multiple parsings, the following principles resolve ambiguity:

13. The number of nestings should be minimized. Thus, for example, an interpretation `<strong>...</strong>` is always preferred to `<em><em>...</em></em>`.

14. An interpretation `<em><strong>...</strong></em>` is always preferred to `<strong><em>...</em></strong>`.

15. When two potential emphasis or strong emphasis spans overlap, so that the second begins before the first ends and ends after the first ends, the first takes precedence. Thus, for example, `*foo _bar* baz_` is parsed as `<em>foo _bar</em> baz_` rather than `*foo <em>bar* baz</em>`.

16. When there are two potential emphasis or strong emphasis spans with the same closing delimiter, the shorter one (the one that opens later) takes precedence. Thus, for example, `**foo **bar baz**` is parsed as `**foo <strong>bar baz</strong>` rather than `<strong>foo **bar baz</strong>`.

17. Inline code spans, links, images, and HTML tags group more tightly than emphasis. So, when there is a choice between an interpretation that contains one of these elements and one that does not, the former always wins. Thus, for example, `*[foo*](bar)` is parsed as `*<a href="bar">foo*</a>` rather than as `<em>[foo</em>](bar)`.

These rules can be illustrated through a series of examples.

##### Example SB-1

Rule 1:

###### Markua Document

{#input-es-1}
~~~
{
html-style: markdown
italicize-underlines: true
}
*foo bar*
~~~

###### HTML Output

{#output-es-1}
~~~
<p><em>foo bar</em></p>
~~~

##### Example SB-1

Rule 1:

###### Markua Document

{#input-es-1}
~~~
{
html-style: default
italicize-underlines: true
}
*foo bar*
~~~

###### HTML Output

{#output-es-1}
~~~
<p><em>foo bar</em></p>
~~~

##### Example SB-1

Rule 1:

###### Markua Document

{#input-es-1}
~~~
{
html-style: markdown
italicize-underlines: true
}
*foo bar*
~~~

###### HTML Output

{#output-es-1}
~~~
<p><em>foo bar</em></p>
~~~







This is not emphasis, because the opening `*` is followed by
whitespace, and hence not part of a [left-flanking delimiter run]:

```example
a * foo bar*
.
<p>a * foo bar*</p>
```


This is not emphasis, because the opening `*` is preceded
by an alphanumeric and followed by punctuation, and hence
not part of a [left-flanking delimiter run]:

```example
a*"foo"*
.
<p>a*&quot;foo&quot;*</p>
```


Unicode nonbreaking spaces count as whitespace, too:

```example
* a *
.
<p>* a *</p>
```


Intraword emphasis with `*` is permitted:

```example
foo*bar*
.
<p>foo<em>bar</em></p>
```


```example
5*6*78
.
<p>5<em>6</em>78</p>
```


Rule 2:

```example
_foo bar_
.
<p><em>foo bar</em></p>
```


This is not emphasis, because the opening `_` is followed by
whitespace:

```example
_ foo bar_
.
<p>_ foo bar_</p>
```


This is not emphasis, because the opening `_` is preceded
by an alphanumeric and followed by punctuation:

```example
a_"foo"_
.
<p>a_&quot;foo&quot;_</p>
```


Emphasis with `_` is not allowed inside words:

```example
foo_bar_
.
<p>foo_bar_</p>
```


```example
5_6_78
.
<p>5_6_78</p>
```


```example
пристаням_стремятся_
.
<p>пристаням_стремятся_</p>
```


Here `_` does not generate emphasis, because the first delimiter run
is right-flanking and the second left-flanking:

```example
aa_"bb"_cc
.
<p>aa_&quot;bb&quot;_cc</p>
```


This is emphasis, even though the opening delimiter is
both left- and right-flanking, because it is preceded by
punctuation:

```example
foo-_(bar)_
.
<p>foo-<em>(bar)</em></p>
```


Rule 3:

This is not emphasis, because the closing delimiter does
not match the opening delimiter:

```example
_foo*
.
<p>_foo*</p>
```


This is not emphasis, because the closing `*` is preceded by
whitespace:

```example
*foo bar *
.
<p>*foo bar *</p>
```


A newline also counts as whitespace:

```example
*foo bar
*
.
<p>*foo bar
*</p>
```


This is not emphasis, because the second `*` is
preceded by punctuation and followed by an alphanumeric
(hence it is not part of a [right-flanking delimiter run]:

```example
*(*foo)
.
<p>*(*foo)</p>
```


The point of this restriction is more easily appreciated
with this example:

```example
*(*foo*)*
.
<p><em>(<em>foo</em>)</em></p>
```


Intraword emphasis with `*` is allowed:

```example
*foo*bar
.
<p><em>foo</em>bar</p>
```



Rule 4:

This is not emphasis, because the closing `_` is preceded by
whitespace:

```example
_foo bar _
.
<p>_foo bar _</p>
```


This is not emphasis, because the second `_` is
preceded by punctuation and followed by an alphanumeric:

```example
_(_foo)
.
<p>_(_foo)</p>
```


This is emphasis within emphasis:

```example
_(_foo_)_
.
<p><em>(<em>foo</em>)</em></p>
```


Intraword emphasis is disallowed for `_`:

```example
_foo_bar
.
<p>_foo_bar</p>
```


```example
_пристаням_стремятся
.
<p>_пристаням_стремятся</p>
```


```example
_foo_bar_baz_
.
<p><em>foo_bar_baz</em></p>
```


This is emphasis, even though the closing delimiter is
both left- and right-flanking, because it is followed by
punctuation:

```example
_(bar)_.
.
<p><em>(bar)</em>.</p>
```


Rule 5:

```example
**foo bar**
.
<p><strong>foo bar</strong></p>
```


This is not strong emphasis, because the opening delimiter is
followed by whitespace:

```example
** foo bar**
.
<p>** foo bar**</p>
```


This is not strong emphasis, because the opening `**` is preceded
by an alphanumeric and followed by punctuation, and hence
not part of a [left-flanking delimiter run]:

```example
a**"foo"**
.
<p>a**&quot;foo&quot;**</p>
```


Intraword strong emphasis with `**` is permitted:

```example
foo**bar**
.
<p>foo<strong>bar</strong></p>
```


Rule 6:

```example
__foo bar__
.
<p><strong>foo bar</strong></p>
```


This is not strong emphasis, because the opening delimiter is
followed by whitespace:

```example
__ foo bar__
.
<p>__ foo bar__</p>
```


A newline counts as whitespace:
```example
__
foo bar__
.
<p>__
foo bar__</p>
```


This is not strong emphasis, because the opening `__` is preceded
by an alphanumeric and followed by punctuation:

```example
a__"foo"__
.
<p>a__&quot;foo&quot;__</p>
```


Intraword strong emphasis is forbidden with `__`:

```example
foo__bar__
.
<p>foo__bar__</p>
```


```example
5__6__78
.
<p>5__6__78</p>
```


```example
пристаням__стремятся__
.
<p>пристаням__стремятся__</p>
```


```example
__foo, __bar__, baz__
.
<p><strong>foo, <strong>bar</strong>, baz</strong></p>
```


This is strong emphasis, even though the opening delimiter is
both left- and right-flanking, because it is preceded by
punctuation:

```example
foo-__(bar)__
.
<p>foo-<strong>(bar)</strong></p>
```



Rule 7:

This is not strong emphasis, because the closing delimiter is preceded
by whitespace:

```example
**foo bar **
.
<p>**foo bar **</p>
```


(Nor can it be interpreted as an emphasized `*foo bar *`, because of
Rule 11.)

This is not strong emphasis, because the second `**` is
preceded by punctuation and followed by an alphanumeric:

```example
**(**foo)
.
<p>**(**foo)</p>
```


The point of this restriction is more easily appreciated
with these examples:

```example
*(**foo**)*
.
<p><em>(<strong>foo</strong>)</em></p>
```


```example
**Gomphocarpus (*Gomphocarpus physocarpus*, syn.
*Asclepias physocarpa*)**
.
<p><strong>Gomphocarpus (<em>Gomphocarpus physocarpus</em>, syn.
<em>Asclepias physocarpa</em>)</strong></p>
```


```example
**foo "*bar*" foo**
.
<p><strong>foo &quot;<em>bar</em>&quot; foo</strong></p>
```


Intraword emphasis:

```example
**foo**bar
.
<p><strong>foo</strong>bar</p>
```


Rule 8:

This is not strong emphasis, because the closing delimiter is
preceded by whitespace:

```example
__foo bar __
.
<p>__foo bar __</p>
```


This is not strong emphasis, because the second `__` is
preceded by punctuation and followed by an alphanumeric:

```example
__(__foo)
.
<p>__(__foo)</p>
```


The point of this restriction is more easily appreciated
with this example:

```example
_(__foo__)_
.
<p><em>(<strong>foo</strong>)</em></p>
```


Intraword strong emphasis is forbidden with `__`:

```example
__foo__bar
.
<p>__foo__bar</p>
```


```example
__пристаням__стремятся
.
<p>__пристаням__стремятся</p>
```


```example
__foo__bar__baz__
.
<p><strong>foo__bar__baz</strong></p>
```


This is strong emphasis, even though the closing delimiter is
both left- and right-flanking, because it is followed by
punctuation:

```example
__(bar)__.
.
<p><strong>(bar)</strong>.</p>
```


Rule 9:

Any nonempty sequence of inline elements can be the contents of an
emphasized span.

```example
*foo [bar](/url)*
.
<p><em>foo <a href="/url">bar</a></em></p>
```


```example
*foo
bar*
.
<p><em>foo
bar</em></p>
```


In particular, emphasis and strong emphasis can be nested
inside emphasis:

```example
_foo __bar__ baz_
.
<p><em>foo <strong>bar</strong> baz</em></p>
```


```example
_foo _bar_ baz_
.
<p><em>foo <em>bar</em> baz</em></p>
```


```example
__foo_ bar_
.
<p><em><em>foo</em> bar</em></p>
```


```example
*foo *bar**
.
<p><em>foo <em>bar</em></em></p>
```


```example
*foo **bar** baz*
.
<p><em>foo <strong>bar</strong> baz</em></p>
```

```example
*foo**bar**baz*
.
<p><em>foo<strong>bar</strong>baz</em></p>
```

Note that in the preceding case, the interpretation

```
<p><em>foo</em><em>bar<em></em>baz</em></p>
```


is precluded by the condition that a delimiter that
can both open and close (like the `*` after `foo`)
cannot form emphasis if the sum of the lengths of
the delimiter runs containing the opening and
closing delimiters is a multiple of 3 unless
both lengths are multiples of 3.


For the same reason, we don't get two consecutive
emphasis sections in this example:

```example
*foo**bar*
.
<p><em>foo**bar</em></p>
```


The same condition ensures that the following
cases are all strong emphasis nested inside
emphasis, even when the interior spaces are
omitted:


```example
***foo** bar*
.
<p><em><strong>foo</strong> bar</em></p>
```


```example
*foo **bar***
.
<p><em>foo <strong>bar</strong></em></p>
```


```example
*foo**bar***
.
<p><em>foo<strong>bar</strong></em></p>
```


When the lengths of the interior closing and opening
delimiter runs are *both* multiples of 3, though,
they can match to create emphasis:

```example
foo***bar***baz
.
<p>foo<em><strong>bar</strong></em>baz</p>
```

```example
foo******bar*********baz
.
<p>foo<strong><strong><strong>bar</strong></strong></strong>***baz</p>
```


Indefinite levels of nesting are possible:

```example
*foo **bar *baz* bim** bop*
.
<p><em>foo <strong>bar <em>baz</em> bim</strong> bop</em></p>
```


```example
*foo [*bar*](/url)*
.
<p><em>foo <a href="/url"><em>bar</em></a></em></p>
```


There can be no empty emphasis or strong emphasis:

```example
** is not an empty emphasis
.
<p>** is not an empty emphasis</p>
```


```example
**** is not an empty strong emphasis
.
<p>**** is not an empty strong emphasis</p>
```



Rule 10:

Any nonempty sequence of inline elements can be the contents of an
strongly emphasized span.

```example
**foo [bar](/url)**
.
<p><strong>foo <a href="/url">bar</a></strong></p>
```


```example
**foo
bar**
.
<p><strong>foo
bar</strong></p>
```


In particular, emphasis and strong emphasis can be nested
inside strong emphasis:

```example
__foo _bar_ baz__
.
<p><strong>foo <em>bar</em> baz</strong></p>
```


```example
__foo __bar__ baz__
.
<p><strong>foo <strong>bar</strong> baz</strong></p>
```


```example
____foo__ bar__
.
<p><strong><strong>foo</strong> bar</strong></p>
```


```example
**foo **bar****
.
<p><strong>foo <strong>bar</strong></strong></p>
```


```example
**foo *bar* baz**
.
<p><strong>foo <em>bar</em> baz</strong></p>
```


```example
**foo*bar*baz**
.
<p><strong>foo<em>bar</em>baz</strong></p>
```


```example
***foo* bar**
.
<p><strong><em>foo</em> bar</strong></p>
```


```example
**foo *bar***
.
<p><strong>foo <em>bar</em></strong></p>
```


Indefinite levels of nesting are possible:

```example
**foo *bar **baz**
bim* bop**
.
<p><strong>foo <em>bar <strong>baz</strong>
bim</em> bop</strong></p>
```


```example
**foo [*bar*](/url)**
.
<p><strong>foo <a href="/url"><em>bar</em></a></strong></p>
```


There can be no empty emphasis or strong emphasis:

```example
__ is not an empty emphasis
.
<p>__ is not an empty emphasis</p>
```


```example
____ is not an empty strong emphasis
.
<p>____ is not an empty strong emphasis</p>
```



Rule 11:

```example
foo ***
.
<p>foo ***</p>
```


```example
foo *\**
.
<p>foo <em>*</em></p>
```


```example
foo *_*
.
<p>foo <em>_</em></p>
```


```example
foo *****
.
<p>foo *****</p>
```


```example
foo **\***
.
<p>foo <strong>*</strong></p>
```


```example
foo **_**
.
<p>foo <strong>_</strong></p>
```


Note that when delimiters do not match evenly, Rule 11 determines
that the excess literal `*` characters will appear outside of the
emphasis, rather than inside it:

```example
**foo*
.
<p>*<em>foo</em></p>
```


```example
*foo**
.
<p><em>foo</em>*</p>
```


```example
***foo**
.
<p>*<strong>foo</strong></p>
```


```example
****foo*
.
<p>***<em>foo</em></p>
```


```example
**foo***
.
<p><strong>foo</strong>*</p>
```


```example
*foo****
.
<p><em>foo</em>***</p>
```



Rule 12:

```example
foo ___
.
<p>foo ___</p>
```


```example
foo _\__
.
<p>foo <em>_</em></p>
```


```example
foo _*_
.
<p>foo <em>*</em></p>
```


```example
foo _____
.
<p>foo _____</p>
```


```example
foo __\___
.
<p>foo <strong>_</strong></p>
```


```example
foo __*__
.
<p>foo <strong>*</strong></p>
```


```example
__foo_
.
<p>_<em>foo</em></p>
```


Note that when delimiters do not match evenly, Rule 12 determines
that the excess literal `_` characters will appear outside of the
emphasis, rather than inside it:

```example
_foo__
.
<p><em>foo</em>_</p>
```


```example
___foo__
.
<p>_<strong>foo</strong></p>
```


```example
____foo_
.
<p>___<em>foo</em></p>
```


```example
__foo___
.
<p><strong>foo</strong>_</p>
```


```example
_foo____
.
<p><em>foo</em>___</p>
```


Rule 13 implies that if you want emphasis nested directly inside
emphasis, you must use different delimiters:

```example
**foo**
.
<p><strong>foo</strong></p>
```


```example
*_foo_*
.
<p><em><em>foo</em></em></p>
```


```example
__foo__
.
<p><strong>foo</strong></p>
```


```example
_*foo*_
.
<p><em><em>foo</em></em></p>
```


However, strong emphasis within strong emphasis is possible without
switching delimiters:

```example
****foo****
.
<p><strong><strong>foo</strong></strong></p>
```


```example
____foo____
.
<p><strong><strong>foo</strong></strong></p>
```



Rule 13 can be applied to arbitrarily long sequences of
delimiters:

```example
******foo******
.
<p><strong><strong><strong>foo</strong></strong></strong></p>
```


Rule 14:

```example
***foo***
.
<p><em><strong>foo</strong></em></p>
```


```example
_____foo_____
.
<p><em><strong><strong>foo</strong></strong></em></p>
```


Rule 15:

```example
*foo _bar* baz_
.
<p><em>foo _bar</em> baz_</p>
```


```example
*foo __bar *baz bim__ bam*
.
<p><em>foo <strong>bar *baz bim</strong> bam</em></p>
```


Rule 16:

```example
**foo **bar baz**
.
<p>**foo <strong>bar baz</strong></p>
```


```example
*foo *bar baz*
.
<p>*foo <em>bar baz</em></p>
```


Rule 17:

```example
*[bar*](/url)
.
<p>*<a href="/url">bar*</a></p>
```


```example
_foo [bar_](/url)
.
<p>_foo <a href="/url">bar_</a></p>
```


```example
*<img src="foo" title="*"/>
.
<p>*<img src="foo" title="*"/></p>
```


```example
**<a href="**">
.
<p>**<a href="**"></p>
```


```example
__<a href="__">
.
<p>__<a href="__"></p>
```


```example
*a `*`*
.
<p><em>a <code>*</code></em></p>
```


```example
_a `_`_
.
<p><em>a <code>_</code></em></p>
```


```example
**a<http://foo.bar/?q=**>
.
<p>**a<a href="http://foo.bar/?q=**">http://foo.bar/?q=**</a></p>
```


```example
__a<http://foo.bar/?q=__>
.
<p>__a<a href="http://foo.bar/?q=__">http://foo.bar/?q=__</a></p>
```



## Links

A link contains [link text] (the visible text), a [link destination]
(the URI that is the link destination), and optionally a [link title].
There are two basic kinds of links in Markdown.  In [inline links] the
destination and title are given immediately after the link text.  In
[reference links] the destination and title are defined elsewhere in
the document.

A [link text](@) consists of a sequence of zero or more
inline elements enclosed by square brackets (`[` and `]`).  The
following rules apply:

- Links may not contain other links, at any level of nesting. If
  multiple otherwise valid link definitions appear nested inside each
  other, the inner-most definition is used.

- Brackets are allowed in the [link text] only if (a) they
  are backslash-escaped or (b) they appear as a matched pair of brackets,
  with an open bracket `[`, a sequence of zero or more inlines, and
  a close bracket `]`.

- Backtick [code spans], [autolinks], and raw [HTML tags] bind more tightly
  than the brackets in link text.  Thus, for example,
  `` [foo`]` `` could not be a link text, since the second `]`
  is part of a code span.

- The brackets in link text bind more tightly than markers for
  [emphasis and strong emphasis]. Thus, for example, `*[foo*](url)` is a link.

A [link destination](@) consists of either

- a sequence of zero or more characters between an opening `<` and a
  closing `>` that contains no line breaks or unescaped
  `<` or `>` characters, or

- a nonempty sequence of characters that does not start with
  `<`, does not include ASCII space or control characters, and
  includes parentheses only if (a) they are backslash-escaped or
  (b) they are part of a balanced pair of unescaped parentheses.
  (Implementations may impose limits on parentheses nesting to
  avoid performance issues, but at least three levels of nesting
  should be supported.)

A [link title](@)  consists of either

- a sequence of zero or more characters between straight double-quote
  characters (`"`), including a `"` character only if it is
  backslash-escaped, or

- a sequence of zero or more characters between straight single-quote
  characters (`'`), including a `'` character only if it is
  backslash-escaped, or

- a sequence of zero or more characters between matching parentheses
  (`(...)`), including a `(` or `)` character only if it is
  backslash-escaped.

Although [link titles] may span multiple lines, they may not contain
a [blank line].

An [inline link](@) consists of a [link text] followed immediately
by a left parenthesis `(`, optional [whitespace], an optional
[link destination], an optional [link title] separated from the link
destination by [whitespace], optional [whitespace], and a right
parenthesis `)`. The link's text consists of the inlines contained
in the [link text] (excluding the enclosing square brackets).
The link's URI consists of the link destination, excluding enclosing
`<...>` if present, with backslash-escapes in effect as described
above.  The link's title consists of the link title, excluding its
enclosing delimiters, with backslash-escapes in effect as described
above.

Here is a simple inline link:

```example
[link](/uri "title")
.
<p><a href="/uri" title="title">link</a></p>
```


The title may be omitted:

```example
[link](/uri)
.
<p><a href="/uri">link</a></p>
```


Both the title and the destination may be omitted:

```example
[link]()
.
<p><a href="">link</a></p>
```


```example
[link](<>)
.
<p><a href="">link</a></p>
```

The destination can only contain spaces if it is
enclosed in pointy brackets:

```example
[link](/my uri)
.
<p>[link](/my uri)</p>
```

```example
[link](</my uri>)
.
<p><a href="/my%20uri">link</a></p>
```

The destination cannot contain line breaks,
even if enclosed in pointy brackets:

```example
[link](foo
bar)
.
<p>[link](foo
bar)</p>
```

```example
[link](<foo
bar>)
.
<p>[link](<foo
bar>)</p>
```

The destination can contain `)` if it is enclosed
in pointy brackets:

```example
[a](<b)c>)
.
<p><a href="b)c">a</a></p>
```

Pointy brackets that enclose links must be unescaped:

```example
[link](<foo\>)
.
<p>[link](&lt;foo&gt;)</p>
```

These are not links, because the opening pointy bracket
is not matched properly:

```example
[a](<b)c
[a](<b)c>
[a](<b>c)
.
<p>[a](&lt;b)c
[a](&lt;b)c&gt;
[a](<b>c)</p>
```

Parentheses inside the link destination may be escaped:

```example
[link](\(foo\))
.
<p><a href="(foo)">link</a></p>
```

Any number of parentheses are allowed without escaping, as long as they are
balanced:

```example
[link](foo(and(bar)))
.
<p><a href="foo(and(bar))">link</a></p>
```

However, if you have unbalanced parentheses, you need to escape or use the
`<...>` form:

```example
[link](foo\(and\(bar\))
.
<p><a href="foo(and(bar)">link</a></p>
```


```example
[link](<foo(and(bar)>)
.
<p><a href="foo(and(bar)">link</a></p>
```


Parentheses and other symbols can also be escaped, as usual
in Markdown:

```example
[link](foo\)\:)
.
<p><a href="foo):">link</a></p>
```


A link can contain fragment identifiers and queries:

```example
[link](#fragment)

[link](http://example.com#fragment)

[link](http://example.com?foo=3#frag)
.
<p><a href="#fragment">link</a></p>
<p><a href="http://example.com#fragment">link</a></p>
<p><a href="http://example.com?foo=3#frag">link</a></p>
```


Note that a backslash before a non-escapable character is
just a backslash:

```example
[link](foo\bar)
.
<p><a href="foo%5Cbar">link</a></p>
```


URL-escaping should be left alone inside the destination, as all
URL-escaped characters are also valid URL characters. Entity and
numerical character references in the destination will be parsed
into the corresponding Unicode code points, as usual.  These may
be optionally URL-escaped when written as HTML, but this spec
does not enforce any particular policy for rendering URLs in
HTML or other formats.  Renderers may make different decisions
about how to escape or normalize URLs in the output.

```example
[link](foo%20b&auml;)
.
<p><a href="foo%20b%C3%A4">link</a></p>
```


Note that, because titles can often be parsed as destinations,
if you try to omit the destination and keep the title, you'll
get unexpected results:

```example
[link]("title")
.
<p><a href="%22title%22">link</a></p>
```


Titles may be in single quotes, double quotes, or parentheses:

```example
[link](/url "title")
[link](/url 'title')
[link](/url (title))
.
<p><a href="/url" title="title">link</a>
<a href="/url" title="title">link</a>
<a href="/url" title="title">link</a></p>
```


Backslash escapes and entity and numeric character references
may be used in titles:

```example
[link](/url "title \"&quot;")
.
<p><a href="/url" title="title &quot;&quot;">link</a></p>
```


Titles must be separated from the link using a [whitespace].
Other [Unicode whitespace] like non-breaking space doesn't work.

```example
[link](/url "title")
.
<p><a href="/url%C2%A0%22title%22">link</a></p>
```


Nested balanced quotes are not allowed without escaping:

```example
[link](/url "title "and" title")
.
<p>[link](/url &quot;title &quot;and&quot; title&quot;)</p>
```


But it is easy to work around this by using a different quote type:

```example
[link](/url 'title "and" title')
.
<p><a href="/url" title="title &quot;and&quot; title">link</a></p>
```


(Note:  `Markdown.pl` did allow double quotes inside a double-quoted
title, and its test suite included a test demonstrating this.
But it is hard to see a good rationale for the extra complexity this
brings, since there are already many ways---backslash escaping,
entity and numeric character references, or using a different
quote type for the enclosing title---to write titles containing
double quotes.  `Markdown.pl`'s handling of titles has a number
of other strange features.  For example, it allows single-quoted
titles in inline links, but not reference links.  And, in
reference links but not inline links, it allows a title to begin
with `"` and end with `)`.  `Markdown.pl` 1.0.1 even allows
titles with no closing quotation mark, though 1.0.2b8 does not.
It seems preferable to adopt a simple, rational rule that works
the same way in inline links and link reference definitions.)

[Whitespace] is allowed around the destination and title:

```example
[link](   /uri
  "title"  )
.
<p><a href="/uri" title="title">link</a></p>
```


But it is not allowed between the link text and the
following parenthesis:

```example
[link] (/uri)
.
<p>[link] (/uri)</p>
```


The link text may contain balanced brackets, but not unbalanced ones,
unless they are escaped:

```example
[link [foo [bar]]](/uri)
.
<p><a href="/uri">link [foo [bar]]</a></p>
```


```example
[link] bar](/uri)
.
<p>[link] bar](/uri)</p>
```


```example
[link [bar](/uri)
.
<p>[link <a href="/uri">bar</a></p>
```


```example
[link \[bar](/uri)
.
<p><a href="/uri">link [bar</a></p>
```


The link text may contain inline content:

```example
[link *foo **bar** `#`*](/uri)
.
<p><a href="/uri">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>
```


```example
[![moon](moon.jpg)](/uri)
.
<p><a href="/uri"><img src="moon.jpg" alt="moon" /></a></p>
```


However, links may not contain other links, at any level of nesting.

```example
[foo [bar](/uri)](/uri)
.
<p>[foo <a href="/uri">bar</a>](/uri)</p>
```


```example
[foo *[bar [baz](/uri)](/uri)*](/uri)
.
<p>[foo <em>[bar <a href="/uri">baz</a>](/uri)</em>](/uri)</p>
```


```example
![[[foo](uri1)](uri2)](uri3)
.
<p><img src="uri3" alt="[foo](uri2)" /></p>
```


These cases illustrate the precedence of link text grouping over
emphasis grouping:

```example
*[foo*](/uri)
.
<p>*<a href="/uri">foo*</a></p>
```


```example
[foo *bar](baz*)
.
<p><a href="baz*">foo *bar</a></p>
```


Note that brackets that *aren't* part of links do not take
precedence:

```example
*foo [bar* baz]
.
<p><em>foo [bar</em> baz]</p>
```


These cases illustrate the precedence of HTML tags, code spans,
and autolinks over link grouping:

```example
[foo <bar attr="](baz)">
.
<p>[foo <bar attr="](baz)"></p>
```


```example
[foo`](/uri)`
.
<p>[foo<code>](/uri)</code></p>
```


```example
[foo<http://example.com/?search=](uri)>
.
<p>[foo<a href="http://example.com/?search=%5D(uri)">http://example.com/?search=](uri)</a></p>
```



# Resources

TODO

## Resource Insertion Methods

TODO

## Resource Types and Formats

TODO

## Images

TODO

{#images_html}
The syntax for images is described [here](#images).

#### Local Images

##### Example

###### Markua Document

{#input-local_images_1}
~~~
Here's a paragraph before the first figure.

![A Piece of Cake](cake.jpg)

Here's a paragraph between the first and second figures.

{alt: "a slice of chocolate cake", class: "fullbleed"}
![A Piece of Cake](cake.jpg)

Here's a paragraph between the second and third figures.

{alt: "a slice of apple pie with ice cream on top", class: "food-closeup"}
![A Piece of Pie](pie.jpg)

Here's a paragraph after the third figure.
~~~

###### HTML Output

{#output-local_images_1}
~~~
<p>Here's a paragraph before the first figure.</p>
<div class="figure">
  <img src="cake.jpg"/>
  <p class="caption">A Piece of Cake</p>
</div>
<p>Here's a paragraph between the first and second figures.</p>
<div class="figure">
  <img src="cake.jpg" alt="a slice of chocolate cake" class="fullbleed"/>
  <p class="caption">A Piece of Cake</p>
</div>
<p>Here's a paragraph between the second and third figures.</p>
<div class="figure">
  <img src="pie.jpg" alt="a slice of apple pie with ice cream on top" class="food-closeup"/>
  <p class="caption">A Piece of Pie</p>
</div>
<p>Here's a paragraph after the third figure.</p>
~~~

### Web Images

##### Example

###### Markua Document

{#input-web_images_1}
~~~
Here's a paragraph before the first figure.

![A Piece of Cake](http://markua.com/cake.jpg)

Here's a paragraph between the first and second figures.

{alt: "a slice of chocolate cake", class: "fullbleed"}
![A Piece of Cake](http://markua.com/cake.jpg)

Here's a paragraph between the second and third figures.

{alt: "a slice of apple pie with ice cream on top", class: "food-closeup"}
![A Piece of Pie](http://markua.com/pie.jpg)

Here's a paragraph after the third figure.
~~~

###### HTML Output

{#output-web_images_1}
~~~
<p>Here's a paragraph before the first figure.</p>
<div class="figure">
  <img src="http://markua.com/cake.jpg"/>
  <p class="caption">A Piece of Cake</p>
</div>
<p>Here's a paragraph between the first and second figures.</p>
<div class="figure">
  <img src="http://markua.com/cake.jpg" alt="a slice of chocolate cake" class="fullbleed"/>
  <p class="caption">A Piece of Cake</p>
</div>
<p>Here's a paragraph between the second and third figures.</p>
<div class="figure">
  <img src="http://markua.com/pie.jpg" alt="a slice of apple pie with ice cream on top" class="food-closeup"/>
  <p class="caption">A Piece of Pie</p>
</div>
<p>Here's a paragraph after the third figure.</p>
~~~

### Inline Images (SVG only)

##### Example

###### Markua Document

{#input-inline_images_1}
~~~
Here's a paragraph before the figure.

{caption: "Earth From Space (Simplified)", alt: "a blue circle"}
```svg
<svg width="20" height="20">
  <circle cx="10" cy="10" r="9" fill="blue"/>
</svg>
```

Here's a paragraph after the figure.
~~~

###### HTML Output

Note that any alt text specified in the figure attribute list must be set as the `<desc>` attribute in the SVG.

{#output-inline_images_1}
~~~
<p>Here's a paragraph before the figure.</p>
<div class="figure">
  <svg width="20" height="20">
    <desc>a blue circle</desc>
    <circle cx="10" cy="10" r="9" fill="blue"/>
  </svg>
  <p class="caption">Earth From Space (Simplified)</p>
</div>
<p>Here's a paragraph after the figure.</p>
~~~


## Video

TODO


{#video_html}
The syntax for video is described [here](#video).

### Local Video

#### Example

###### Markua Document

{#input-local_video_1}
~~~
Here's a paragraph before the figure.

![A Piece of Cake](cake_eating_contest.webm)

Here's a paragraph after the figure.
~~~

###### HTML Output

{#output-local_video_1}
~~~
<p>Here's a paragraph before the figure.</p>
<div class="figure">
  <video src="cake_eating_contest.webm"/>
  <p class="caption">A Piece of Cake</p>
</div>
<p>Here's a paragraph after the figure.</p>
~~~

#### Web Video

##### Example

###### Markua Document

{#input-web_video_1}
~~~
Here's a paragraph before the figure.

{poster: http://img.youtube.com/vi/VOCYL-FNbr0/mqdefault.jpg}
![Introducing Markua](https://www.youtube.com/watch?t=105&v=VOCYL-FNbr0)

Here's a paragraph after the figure.
~~~

###### HTML Output

{#output-web_video_1}
~~~
<p>Here's a paragraph before the figure.</p>
<div class="figure">
  <video src="https://www.youtube.com/watch?t=105&v=VOCYL-FNbr0"
    poster="http://img.youtube.com/vi/VOCYL-FNbr0/mqdefault.jpg"/>
  <p class="caption">Introducing Markua</p>
</div>
<p>Here's a paragraph after the figure.</p>
~~~

## Audio

TODO


{#audio_html}
The syntax for audio is described [here](#audio).

### Local Audio

##### Example

###### Markua Document

{#input-local_audio_1}
~~~
The full version of the talk is here:

![Full Talk](talk.m4a)
~~~

###### HTML Output

{#output-local_audio_1}
~~~
<p>The full version of the talk is here:</p>
<div class="figure">
  <audio src="resources/talk.m4a"/>
  <p class="caption">Full Talk</p>
</div>
~~~

### Web Audio

##### Example

###### Markua Document

{#input-local_audio_1}
~~~
The full version of the talk is here:

![Full Talk](http://markua.com/talk.m4a)
~~~

###### HTML Output

{#output-local_audio_1}
~~~
<p>The full version of the talk is here:</p>
<div class="figure">
  <audio src="http://markua.com/talk.m4a"/>
  <p class="caption">Full Talk</p>
</div>
~~~




## Autolinks

[Autolink](@)s are absolute URIs and email addresses inside
`<` and `>`. They are parsed as links, with the URL or email address
as the link label.

A [URI autolink](@) consists of `<`, followed by an
[absolute URI] followed by `>`.  It is parsed as
a link to the URI, with the URI as the link's label.

An [absolute URI](@),
for these purposes, consists of a [scheme] followed by a colon (`:`)
followed by zero or more characters other than ASCII
[whitespace] and control characters, `<`, and `>`.  If
the URI includes these characters, they must be percent-encoded
(e.g. `%20` for a space).

For purposes of this spec, a [scheme](@) is any sequence
of 2--32 characters beginning with an ASCII letter and followed
by any combination of ASCII letters, digits, or the symbols plus
("+"), period ("."), or hyphen ("-").

Here are some valid autolinks:

```example
<http://foo.bar.baz>
.
<p><a href="http://foo.bar.baz">http://foo.bar.baz</a></p>
```


```example
<http://foo.bar.baz/test?q=hello&id=22&boolean>
.
<p><a href="http://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean">http://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean</a></p>
```


```example
<irc://foo.bar:2233/baz>
.
<p><a href="irc://foo.bar:2233/baz">irc://foo.bar:2233/baz</a></p>
```


Uppercase is also fine:

```example
<MAILTO:FOO@BAR.BAZ>
.
<p><a href="MAILTO:FOO@BAR.BAZ">MAILTO:FOO@BAR.BAZ</a></p>
```


Note that many strings that count as [absolute URIs] for
purposes of this spec are not valid URIs, because their
schemes are not registered or because of other problems
with their syntax:

```example
<a+b+c:d>
.
<p><a href="a+b+c:d">a+b+c:d</a></p>
```


```example
<made-up-scheme://foo,bar>
.
<p><a href="made-up-scheme://foo,bar">made-up-scheme://foo,bar</a></p>
```


```example
<http://../>
.
<p><a href="http://../">http://../</a></p>
```


```example
<localhost:5001/foo>
.
<p><a href="localhost:5001/foo">localhost:5001/foo</a></p>
```


Spaces are not allowed in autolinks:

```example
<http://foo.bar/baz bim>
.
<p>&lt;http://foo.bar/baz bim&gt;</p>
```


Backslash-escapes do not work inside autolinks:

```example
<http://example.com/\[\>
.
<p><a href="http://example.com/%5C%5B%5C">http://example.com/\[\</a></p>
```


An [email autolink](@)
consists of `<`, followed by an [email address],
followed by `>`.  The link's label is the email address,
and the URL is `mailto:` followed by the email address.

An [email address](@),
for these purposes, is anything that matches
the [non-normative regex from the HTML5
spec](https://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email)):

    /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?
    (?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/

Examples of email autolinks:

```example
<foo@bar.example.com>
.
<p><a href="mailto:foo@bar.example.com">foo@bar.example.com</a></p>
```


```example
<foo+special@Bar.baz-bar0.com>
.
<p><a href="mailto:foo+special@Bar.baz-bar0.com">foo+special@Bar.baz-bar0.com</a></p>
```


Backslash-escapes do not work inside email autolinks:

```example
<foo\+@bar.example.com>
.
<p>&lt;foo+@bar.example.com&gt;</p>
```


These are not autolinks:

```example
<>
.
<p>&lt;&gt;</p>
```


```example
< http://foo.bar >
.
<p>&lt; http://foo.bar &gt;</p>
```


```example
<m:abc>
.
<p>&lt;m:abc&gt;</p>
```


```example
<foo.bar.baz>
.
<p>&lt;foo.bar.baz&gt;</p>
```


```example
http://example.com
.
<p>http://example.com</p>
```


```example
foo@bar.example.com
.
<p>foo@bar.example.com</p>
```

## Hard line breaks

Unlike Markdown, all line breaks are hard breaks, and produce `<br/>` tags in HTML. (In Markdown, a line break which is not preceded by two spaces is a "soft line break" which does not actually cause a `<br/>` tag.

A> A Markua Processor may output either `<br/>` or `<br />` for break tags. The former looks nicer; the latter is more compatible with outdated web browsers.

##### Example

###### Markua Document

{#input-single_newlines_1}
~~~
I'm paragraph one. Yay!

This is paragraph two.
This is *still* in paragraph two, preceded by a forced line break.
This is also in paragraph two, also preceded by a forced line break.

This is paragraph three.
~~~



```example
foo
baz
.
<p>foo<br />
baz</p>
```


Leading spaces at the beginning of the next line are ignored:

```example
foo
     bar
.
<p>foo<br />
bar</p>
```

Line breaks can occur inside emphasis, links, and other constructs
that allow inline content:

```example
*foo
bar*
.
<p><em>foo<br />
bar</em></p>
```


```example
*foo\
bar*
.
<p><em>foo<br />
bar</em></p>
```


Line breaks do not occur inside code spans

```example
`code
span`
.
<p><code>code  span</code></p>
```


```example
`code\
span`
.
<p><code>code\ span</code></p>
```

Hard line breaks are for separating inline content within a block.
Neither syntax for hard line breaks works at the end of a paragraph or
other block element:

```example
foo\
.
<p>foo\</p>
```


```example
foo
.
<p>foo</p>
```


```example
### foo\
.
<h3>foo\</h3>
```


```example
### foo
.
<h3>foo</h3>
```

## Textual content

Any characters not given an interpretation by the above rules will
be parsed as plain textual content.

```example
hello $.;'there
.
<p>hello $.;'there</p>
```


```example
Foo χρῆν
.
<p>Foo χρῆν</p>
```


Internal spaces are preserved verbatim:

```example
Multiple     spaces
.
<p>Multiple     spaces</p>
```







## Tables

TODO

Tables are always output inside a `<figure>`, and table captions are always output as a `<figcaption>` of the `<figure>`, instead of as a `<caption>` of a `<table>`. This way, the captions can be handled the same way as other figures, and the tables can benefit from the figure styling.

## Simple Tables

##### Example 1: No Leading Pipes, No Caption

###### Markua Document

{#input-simple_tables_1}
~~~
Header A   | Header B   | Header C
-----------|------------|-----------
Content A1 | Content B1 | Content C1
Content A2 | Content B2 | Content C2
Content A3 | Content B3 | Content C3
~~~

###### HTML Output

{#output-simple_tables_1}
~~~
<figure>
  <table>
    <thead>
      <tr>
        <th>Header A</th>
        <th>Header B</th>
        <th>Header C</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>Content A1</td>
        <td>Content B1</td>
        <td>Content C1</td>
      </tr>
      <tr>
        <td>Content A2</td>
        <td>Content B2</td>
        <td>Content C2</td>
      </tr>
      <tr>
        <td>Content A3</td>
        <td>Content B3</td>
        <td>Content C3</td>
      </tr>
    </tbody>
  </table>
</figure>
~~~

##### Example 2: Leading Pipes, Caption

###### Markua Document

{#input-simple_tables_2}
~~~
{caption: "A Simple Table"}
| Header A   | Header B   | Header C   |
|------------|------------|------------|
| Content A1 | Content B1 | Content C1 |
| Content A2 | Content B2 | Content C2 |
| Content A3 | Content B3 | Content C3 |
~~~

###### HTML Output

{#output-simple_tables_2}
~~~
<figure>
  <figcaption>A Simple Table</figcaption>
  <table>
    <thead>
      <tr>
        <th>Header A</th>
        <th>Header B</th>
        <th>Header C</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>Content A1</td>
        <td>Content B1</td>
        <td>Content C1</td>
      </tr>
      <tr>
        <td>Content A2</td>
        <td>Content B2</td>
        <td>Content C2</td>
      </tr>
      <tr>
        <td>Content A3</td>
        <td>Content B3</td>
        <td>Content C3</td>
      </tr>
    </tbody>
  </table>
</figure>
~~~

## Complex Tables

##### Example

###### Markua Document

{#input-complex_tables_1}
~~~
{caption: "A Complex Table"}
|=============|===============|=============|
| Header A    | Header B      | Header C    |
|:============|:=============:|============:|
| Content A1 and B1 Merged    | Content C1  |
|------------:|:--------------|-------------|
| Content A2  | Content B2    | Content C2  |
|:-----------:| and B3 Merged |-------------|
| Content A3  |               | Content C3  |
|=============|===============|=============|
| Footer A    | Footer B      | Footer C    |
|=============|===============|=============|
~~~

###### HTML Output

{#output-complex_tables_1}
~~~
<figure>
  <figcaption>A Complex Table</figcaption>
  <table>
    <thead>
      <tr>
        <th align="left">Header A</th>
        <th align="center">Header B</th>
        <th align="right">Header C</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td colspan="2" align="left">Content A1 annd B1 Merged</td>
        <td align="right">Content C1</td>
      </tr>
      <tr>
        <td align="right">Content A2</td>
        <td rowspan="2" align="left">Content B2 and B3 Merged</td>
        <td align="right">Content C2</td>
      </tr>
      <tr>
        <td align="center">Content A3</td>
        <td align="right">Content C3</td>
      </tr>
    </tbody>
    <tfoot>
      <tr>
        <td align="left">Footer A</td>
        <td align="center">Footer B</td>
        <td align="right">Footer C</td>
      </tr>
    </tfoot>
  </table>
</figure>
~~~


## Math

Markua does not specify how math is output in HTML. It is perfectly acceptable for a Markua Processor to output any math block as an image or as the LaTeX or MathML text of the math equation itself.

If MathJax is available, it is recommended for a Markua Processor to convert AsciiMath into MathML, and then use MathJax to format it.


### Quizzes and Exercises

TODO

## Span Elements

TODO

### Links

TODO


##### Example

###### Markua Document

{#input-links_1}
~~~
Markua was developed at [Leanpub](http://leanpub.com).

Markua was developed at <http://leanpub.com>.
~~~

###### HTML Output

{#output-links_1}
~~~
Markua was developed at <a href="http://leanpub.com">Leanpub</a>.

Markua was developed at <a href="http://leanpub.com">http://leanpub.com</a>.
~~~

### Explicitly Creating Spans with `[`...`]`

TODO

### Footnotes and Endnotes

TODO

Markua does not specify how footnotes and endnotes are output in HTML. A Markua Processor should output them *somewhere*, but the details are not specified. This is deliberate, in order to maximize implementation flexibility for implementers of Markua Processors.

### Crosslinks and ids

TODO


##### Example

###### Markua Document

{#input-crosslinks_ids_1}
~~~
{id: id1}
This is a paragraph with an id of `id1`.

{#id2}
This is a paragraph with an id of `id2`.

This link to [Markua](#markua) is before the id definition.

The word Markua{id: markua} has an id of `markua`.

This link to [Markua](#markua) is after the id definition.

Leanpub is based in **Victoria, BC, Canada**{#victoria}.

The [quick sly fox]{#quick_sly} jumped over the lazy dogs.
~~~

###### HTML Output

{#output-crosslinks_ids_1}
~~~
<h1>Crosslink Example</h1>
<p id="id1">This is a paragraph with an id of <code>id1</code>.</p>
<p id="id2">This is a paragraph with an id of <code>id2</code>.</p>
<p>This link to <a href="#markua">Markua</a> is before the id definition.</p>
<p>The word <span id="markua">Markua</span> has an id of <code>markua</code>.</p>
<p>This link to <a href="#markua">Markua</a> is after the id definition.</p>
<p>Leanpub is based in <strong id="victoria">Victoria, BC, Canada</strong>.
<p>The <span id="quick_sly">quick sly fox</span> jumped over the lazy dogs.</p>
~~~

### Character Substitution

TODO

### Escaping Special Characters with Backslash (`\`)

TODO

### Backticks (`` ` ``)

TODO

### Unicode Entities with `\u`

### Nesting Formatting

TODO

### Emoji

Markua does not specify how emoji are output in HTML. The various choices are discussed in the [Emoji section](#emoji).

### Placeholders

TODO


### A Hack for Forcing Whitespace

TODO

### Concatenating Files and Blank Lines

TODO

## Metadata

TODO

### Attributes

TODO

### Index Entries

Markua does not specify how index entries are output in HTML. Markua Processors can take great liberties in the construction of an index based on index entries.

### Directives

Markua does not specify how book section directives affect the HTML output. Markua Processors have lots of freedom here.

### Settings

TODO

## Courses

TODO

### Quizzes and Exercises

TODO

### Question Types: Multiple Choice, Multiple Selection, Fill In The Blank, Written

TODO

### Markua Processor Behaviour

TODO

### Question Alternates

TODO